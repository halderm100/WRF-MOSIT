#!/bin/bash

start=$(date)
START=$(date +"%s")


############################### Version Numbers ##########################
# For Ease of updating
##########################################################################
export METPLUS_Version=5.1.0
export met_Version_number=11.1.0
export met_VERSION_number=11.1
export METPLUS_DATA=5.1

export HDF5_Version=1_14_3
export Zlib_Version=1.2.13
export Netcdf_C_Version=4.9.0
export Netcdf_Fortran_Version=4.6.1
export Mpich_Version=4.1.2
export Libpng_Version=1.6.39
export Jasper_Version=1.900.1
export Pnetcdf_Version=1.12.3

export WRF_VERSION=4.5.2
export WPS_VERSION=4.5


############################### Citation Requirement  ####################

echo " "
echo " The GitHub software WRF-MOSIT (Version 2.1.1) by W. Hatheway (2023)"
echo " "
echo "It is important to note that any usage or publication that incorporates or references this software must include a proper citation to acknowledge the work of the author."
echo " "
echo -e "This is not only a matter of respect and academic integrity, but also a \e[31mrequirement\e[0m set by the author. Please ensure to adhere to this guideline when using this software."
echo " "
echo -e "\e[31mCitation: Hatheway, W., Snoun, H., ur Rehman, H., & Mwanthi, A. WRF-MOSIT: a modular and cross-platform tool for configuring and installing the WRF model [Computer software]. https://doi.org/10.1007/s12145-023-01136-y]\e[0m"

echo " "
read -p "Press enter to continue"

############################### System Architecture Type #################
# 32 or 64 bit
##########################################################################
export SYS_ARCH=$(uname -m)

if [ "$SYS_ARCH" = "x86_64" ] || [ "$SYS_ARCH" = "arm64" ]; then
	export SYSTEMBIT="64"
else
	export SYSTEMBIT="32"
fi

if [ "$SYS_ARCH" = "arm64" ]; then
	export MAC_CHIP="ARM"
else
	export MAC_CHIP="Intel"
fi

############################# System OS Version #############################
# Macos or linux
# Make note that this script only works for Debian Linux kernals
#############################################################################
export SYS_OS=$(uname -s)

if [ "$SYS_OS" = "Darwin" ]; then
	export SYSTEMOS="MacOS"
elif [ "$SYS_OS" = "Linux" ]; then
	export SYSTEMOS="Linux"
fi

########## Centos Test #############
if [ "$SYSTEMOS" = "Linux" ]; then
	export YUM=$(command -v yum)
	if [ "$YUM" != "" ]; then
		echo " yum found"
		echo "Your system is a CentOS based Kernal"
		export SYSTEMOS=CentOS
	fi
fi

############################### Intel or GNU Compiler Option #############

if [ "$SYSTEMBIT" = "32" ] && [ "$SYSTEMOS" = "CentOS" ]; then
	echo "Your system is not compatibile with this script."
	exit
fi

if [ "$SYSTEMBIT" = "64" ] && [ "$SYSTEMOS" = "CentOS" ]; then
	echo "Your system is a 64bit version of CentOS Linux Kernal"
	echo " "
	echo "Intel compilers are not compatibile with this script"
	echo " "
	echo "Setting compiler to GNU"
	export Centos_64bit_GNU=1
	echo "Centos_64bit_GNU=$Centos_64bit_GNU"
fi

if [ "$Centos_64bit_GNU" = "1" ]; then

	export gcc_test_version=$(gcc -dumpversion 2>&1 | awk '{print $1}')
	export gcc_test_version_major=$(echo $gcc_test_version | awk -F. '{print $1}')
	export gcc_version_9="9"

	if [[ $gcc_test_version_major -lt $gcc_version_9 ]]; then
		export Centos_64bit_GNU=2
		echo " OLD GNU FILES FOUND"
		echo "Centos_64bit_GNU=$Centos_64bit_GNU"
	fi
fi

if [ "$SYSTEMBIT" = "32" ] && [ "$SYSTEMOS" = "MacOS" ]; then
	echo "Your system is not compatibile with this script."
	exit
fi

if [ "$SYSTEMBIT" = "64" ] && [ "$SYSTEMOS" = "MacOS" ] && [ "$MAC_CHIP" = "Intel" ]; then
	echo "Your system is a 64bit version of MacOS"
	echo " "
	echo "Intel compilers are not compatibile with this script"
	echo " "
	echo "Setting compiler to GNU"
	export macos_64bit_GNU=1
	echo " "
	echo "Xcode Command Line Tools & Homebrew are required for this script."
	echo " "
	echo "Installing Homebrew and Xcode Command Line Tools now"
	echo " "
	echo "Please enter password when prompted"
	/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"

	(
		echo
		echo 'eval "$(/usr/local/bin/brew shellenv)"'
	) >>~/.profile
	eval "$(/usr/local/bin/brew shellenv)"

	chsh -s /bin/bash

fi

if [ "$SYSTEMBIT" = "64" ] && [ "$SYSTEMOS" = "MacOS" ] && [ "$MAC_CHIP" = "ARM" ]; then
	echo "Your system is a 64bit version of MacOS with arm64"
	echo " "
	echo "Intel compilers are not compatibile with this script"
	echo " "
	echo "Setting compiler to GNU"
	export macos_64bit_GNU=1
	echo " "
	echo "Xcode Command Line Tools & Homebrew are required for this script."
	echo " "
	echo "Installing Homebrew and Xcode Command Line Tools now"
	echo " "
	echo "Please enter password when prompted"
	/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"

	(
		echo
		echo 'eval "$(/opt/homebrew/bin/brew shellenv)"'
	) >>~/.profile
	eval "$(/opt/homebrew/bin/brew shellenv)"

	chsh -s /bin/bash

fi

if [ "$SYSTEMBIT" = "64" ] && [ "$SYSTEMOS" = "Linux" ]; then
	echo "Your system is 64bit version of Debian Linux Kernal"
	echo " "
	while read -r -p "Which compiler do you want to use?
  -Intel
   --Please note that Hurricane WRF (HWRF) is only compatibile with Intel Compilers.
	 --Please note that WRF_CMAQ i sonly compatibile with GNU Compilers

  -GNU

  Please answer Intel or GNU and press enter (case sensative).
  " yn; do

		case $yn in
		Intel)
			echo "-------------------------------------------------- "
			echo " "
			echo "Intel is selected for installation"
			export Ubuntu_64bit_Intel=1
			break
			;;
		GNU)
			echo "-------------------------------------------------- "
			echo " "
			echo "GNU is selected for installation"
			export Ubuntu_64bit_GNU=1
			break
			;;
		*)
			echo " "
			echo "Please answer Intel or GNU (case sensative)."
			;;

		esac
	done
fi

if [ "$SYSTEMBIT" = "32" ] && [ "$SYSTEMOS" = "Linux" ]; then
	echo "Your system is not compatibile with this script."
	exit
fi

################### System Information Tests ##############################
if [ "$SYSTEMOS" = "CentOS" ]; then

	export HOME=$(
		cd
		pwd
	)
	export Storage_Space_Size=$(df -h --output=avail ${HOME} | awk 'NR==2 {print $1}' | tr -cd '[:digit:]')
	export Storage_Space_Units=$(df -h --output=avail ${HOME} | awk 'NR==2 {print $1}' | tr -cd '[:alpha:]')
	export Storage_Space_Required="350"
	echo "-------------------------------------------------- "
	echo " "
	echo " Testing for Storage Space for installation"
	echo " "

	case $Storage_Space_Units in
	[Pp]*)

		echo " "
		echo "Sufficient storage space for installation found"
		echo "-------------------------------------------------- "
		;;
	[Tt]*)
		echo " "
		echo "Sufficient storage space for installation found"
		echo "-------------------------------------------------- "
		;;
	[Gg]*)
		if [[ ${Storage_Space_Size} -lt ${Storage_Space_Required} ]]; then
			echo " "
			echo "Not enough storage space for installation"
			echo "-------------------------------------------------- "
			exit
		else
			echo " "
			echo "Sufficient storage space for installation found."
			echo "-------------------------------------------------- "
		fi
		;;
	[MmKk]*)
		echo " "
		echo "Not enough storage space for installation. 350GB is required for installation."
		echo "-------------------------------------------------- "
		exit
		;;
	*)
		echo " "
		echo "Not enough storage space for installation. 350GB is required for installation."
		echo "-------------------------------------------------- "
		exit
		;;
	esac

	echo " "
fi

if [ "$SYSTEMOS" = "Linux" ]; then

	export HOME=$(
		cd
		pwd
	)
	export Storage_Space_Size=$(df -h --output=avail ${HOME} | awk 'NR==2 {print $1}' | tr -cd '[:digit:]')
	export Storage_Space_Units=$(df -h --output=avail ${HOME} | awk 'NR==2 {print $1}' | tr -cd '[:alpha:]')
	export Storage_Space_Required="350"
	echo "-------------------------------------------------- "
	echo " "
	echo " Testing for Storage Space for installation"
	echo " "

	case $Storage_Space_Units in
	[Pp]*)

		echo " "
		echo "Sufficient storage space for installation found"
		echo "-------------------------------------------------- "
		;;
	[Tt]*)
		echo " "
		echo "Sufficient storage space for installation found"
		echo "-------------------------------------------------- "
		;;
	[Gg]*)
		if [[ ${Storage_Space_Size} -lt ${Storage_Space_Required} ]]; then
			echo " "
			echo "Not enough storage space for installation. 350GB is required for installation."
			echo "-------------------------------------------------- "
			exit
		else
			echo " "
			echo "Sufficient storage space for installation found."
			echo "-------------------------------------------------- "
		fi
		;;
	[MmKk]*)
		echo " "
		echo "Not enough storage space for installation. 350GB is required for installation."
		echo "-------------------------------------------------- "
		exit
		;;
	*)
		echo " "
		echo "Not enough storage space for installation. 350GB is required for installation."
		echo "-------------------------------------------------- "
		exit
		;;
	esac

	echo " "
fi

if [ "$SYSTEMOS" = "MacOS" ]; then
	export Storage_Space_Size=$(df -h / | awk 'NR==2 {print $2}' | tr -cd '[:digit:]')
	export Storage_Space_Units=$(df -h / | awk 'NR==2 {print $2}' | tr -cd '[:alpha:]')
	export Storage_Space_Required="350"
	echo "-------------------------------------------------- "
	echo " "
	echo " Testing for Storage Space for installation"
	echo " "

	case $Storage_Space_Units in
	[Pi]*)

		echo " "
		echo "Sufficient storage space for installation found"
		echo "-------------------------------------------------- "
		;;
	[Ti]*)
		echo " "
		echo "Sufficient storage space for installation found"
		echo "-------------------------------------------------- "
		;;
	[Gi]*)
		if [[ ${Storage_Space_Size} -lt ${Storage_Space_Required} ]]; then
			echo " "
			echo "Not enough storage space for installation. 350GB is required for installation."
			echo "-------------------------------------------------- "
			exit
		else
			echo " "
			echo "Sufficient storage space for installation found."
			echo "-------------------------------------------------- "
		fi
		;;
	[MiKi]*)
		echo " "
		echo "Not enough storage space for installation. 350GB is required for installation."
		echo "-------------------------------------------------- "
		exit
		;;
	*)
		echo " "
		echo "Not enough storage space for installation. 350GB is required for installation."
		echo "-------------------------------------------------- "
		exit
		;;
	esac

	echo " "
fi

############################# Chose GrADS or OpenGrADS #########################

if [ "$SYSTEMOS" != "MacOS" ]; then
  while read -r -p "Which graphic display software should be installed?
- OpenGrADS
- GrADS

Please answer with either OpenGrADS or GrADS and press enter.
  " yn; do
    case $yn in
    OpenGrADS)
      echo " "
      echo "OpenGrADS selected for installation"
      echo "-------------------------------------------------- "
      export GRADS_PICK=1 # variable set for grads or opengrads choice
      break
      ;;
    GrADS)
      echo " "
      echo "GrADS selected for installation"
      echo "-------------------------------------------------- "
      export GRADS_PICK=2 # variable set for grads or opengrads choice
      break
      ;;
    *)
      echo " "
      echo "Please answer OpenGrADS or GrADS (case-sensitive)."
      ;;
    esac
  done
else
  echo "MacOS is not supported for GrADS or OpenGrADS at this installation."
fi

echo " "
################################# Auto Configuration Test ##################

while true; do
	echo " Auto Configuration Check"
	read -r -p "
  Would you like the script to select all the configure options for you?
  Please note, that you should not have to type anything else in the terminal.

  This will use Basic Nesting for WRF Configuration

  (Y/N)    " yn
	case $yn in
	[Yy]*)
		export auto_config=1 #variable set for one click config and installation
		break
		;;
	[Nn]*)
		export auto_config=0 #variable set for manual config and installation
		break
		;;
	*) echo "Please answer yes or no." ;;
	esac
done

echo " "
################################# DTC MET Tools Test ##################

while true; do
	echo " NCAR's DTC MET Tools Install"
	read -r -p "
  Would you like the script to install the NCAR's DTC Model Evaluation Tools?


  (Y/N)    " yn
	case $yn in
	[Yy]*)
		export DTC_MET=1
		break
		;;
	[Nn]*)
		export DTC_MET=0
		break
		;;
	*) echo "Please answer yes or no." ;;
	esac
done

echo " "

################################# GEOG WPS Geographical Input Data Mandatory for Specific Applications ##################

while true; do
	echo "-------------------------------------------------- "
	echo " "
	echo "Would you like to download the WPS Geographical Input Data for Specific Applications? (Optional)"
	echo " "
	echo "Specific Applicaitons files can be viewed here:  "
	echo " "
	printf '\e]8;;https://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html\e\\Specific GEOG Applications Website (right click to open link) \e]8;;\e\\\n'
	echo " "
	read -r -p "(Y/N)   " yn
	case $yn in
	[Yy]*)
		export WPS_Specific_Applications=1 #variable set for "YES" for specific application data
		break
		;;
	[Nn]*)
		export WPS_Specific_Applications=0 #variable set for "NO" for specific application data
		break
		;;
	*) echo "Please answer yes or no." ;;
	esac
done

echo " "
################################# GEOG Optional WPS Geographical Input Data ##################

while true; do
	echo "-------------------------------------------------- "
	echo " "
	echo "Would you like to download the GEOG Optional WPS Geographical Input Data? (Optional)"
	echo " "
	echo "Optional Geogrpahical files can be viewed here:  "
	echo " "
	printf '\e]8;;https://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html\e\\Optional GEOG File Applications Website (right click to open link) \e]8;;\e\\\n'
	echo " "
	read -r -p "(Y/N)    " yn
	echo " "
	case $yn in
	[Yy]*)
		export Optional_GEOG=1 #variable set for "YES" for Optional GEOG Data
		break
		;;
	[Nn]*)
		export Optional_GEOG=0 #variable set for "NO" for Optional GEOG Data
		break
		;;
	*) echo "Please answer yes or no." ;;
	esac
done

echo " "
############################## Choice for which version of WRF to Install ############

# Define the colored messages
CMAQ_MESSAGE="\e[91m(Not available on MacOS && GNU Only)\e[0m"
HWRF_MESSAGE="\e[91m(Not available on CentOS Kernel & MacOS)\e[0m"

echo -e "Which version of WRF would you like to install?
-WRF
-WRFCHEM
-WRFHYDRO_COUPLED
-WRFHYDRO_STANDALONE
-WRF_SFIRE
-WRF_CMAQ $CMAQ_MESSAGE
-HURRICANE_WRF $HWRF_MESSAGE
Please enter one of the above options and press enter (Case Sensitive):"

while read -r yn; do
	case $yn in
		WRF_SFIRE)
			echo " "
			echo "WRF_SFIRE selected for installation"
			export SFIRE_PICK=1 #variable set for grads or opengrads choice
			break
			;;
	 	WRF_CMAQ)
			echo " "
			echo "WRF_CMAQ selected for installation"
			echo "WRF_CMAQ is only compatible with GNU Compilers"
			export CMAQ_PICK=1 #variable set for grads or opengrads choice
			break
			;;
		HURRICANE_WRF)
			echo " "
			echo "Hurricane WRF (HWRF) selected for installation"
			echo "HWRF is only compatible with Intel Compilers"
			echo "All geography files are downloaded and must be installed on system."
			export HWRF_PICK=1 #variable set for grads or opengrads choice
			break
			;;
		WRF)
			echo " "
			echo "WRF selected for installation"
			export WRF_PICK=1 #variable set for grads or opengrads choice
			break
			;;
		WRFCHEM)
			echo " "
			echo "WRFCHEM selected for installation"
			export WRFCHEM_PICK=1 #variable set for grads or opengrads choice
			break
			;;
		WRFHYDRO_COUPLED)
			echo " "
			echo "WRFHYDRO_COUPLED selected for installation"
			export WRFHYDRO_COUPLED_PICK=1 #variable set for grads or opengrads choice
			break
			;;
		WRFHYDRO_STANDALONE)
			echo " "
			echo "WRFHYDRO_STANDALONE selected for installation"
			export WRFHYDRO_STANDALONE_PICK=1 #variable set for grads or opengrads choice
			break
			;;
		*)
			echo " "
			echo "Please answer WRF, WRFCHEM, WRFHYDRO_COUPLED, WRFHYDRO_STANDALONE, WRF_SFIRE, WRF_CMAQ, or HURRICANE_WRF (All Upper Case)."
			;;
	esac
done

################################# WRF-CHEM Tools Test ##################
if [ "$WRFCHEM_PICK" = "1" ]; then
	while true; do
		echo " NCAR's WRF-CHEM Tools Install"
		read -r -p "
  	Would you like the script to install the NCAR's WRF-CHEM Tools?

  	Not availble for MacOS.  Please Select No


  	(Y/N)    " yn
		case $yn in
		[Yy]*)
			export WRFCHEM_TOOLS=1
			break
			;;
		[Nn]*)
			export WRFCHEM_TOOLS=0
			break
			;;
		*) echo "Please answer yes or no." ;;
		esac
	done
fi
echo " "

############################# Enter sudo users information #############################
echo "-------------------------------------------------- "
while true; do
	echo " "
	read -r -s -p "
  Password is only save locally and will not be seen when typing.
  Please enter your sudo password:

  " yn
	export PASSWD=$yn
	echo "-------------------------------------------------- "
	break
done

echo " "
echo "Beginning Installation"
echo " "

############################ DTC's MET & METPLUS ##################################################

###################################################################################################



if [ "$Ubuntu_64bit_Intel" = "1" ] && [ "$DTC_MET" = "1" ]; then

	echo $PASSWD | sudo -S sudo apt install git
	echo "MET INSTALLING"
	echo $PASSWD | sudo -S apt -y update
	echo $PASSWD | sudo -S apt -y upgrade && sudo -S apt -y autoremove

	# download the key to system keyring; this and the following echo command are
	# needed in order to install the Intel compilers
	wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB |
		gpg --dearmor | sudo tee /usr/share/keyrings/oneapi-archive-keyring.gpg >/dev/null

	# add signed entry to apt sources and configure the APT client to use Intel repository:
	echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list

	# this update should get the Intel package info from the Intel repository
	echo $PASSWD | sudo -S apt -y update
	echo $PASSWD | sudo -S apt -y upgrade && sudo -S apt -y autoremove
	echo $PASSWD | sudo -S apt -y install autoconf automake bison build-essential byacc cmake csh curl default-jdk default-jre emacs flex g++ gawk gcc gfortran git ksh libcurl4-openssl-dev libjpeg-dev libncurses6 libpixman-1-dev libpng-dev libtool libxml2 libxml2-dev m4 make  ncview okular openbox pipenv pkg-config  python3 python3-dev python3-pip python3-dateutil tcsh unzip xauth xorg time

	# install the Intel compilers
	echo $PASSWD | sudo -S apt -y install intel-basekit
	echo $PASSWD | sudo -S apt -y install intel-hpckit
	echo $PASSWD | sudo -S apt -y install intel-oneapi-python

	echo $PASSWD | sudo -S apt -y update

	# make sure some critical packages have been installed
	which cmake pkg-config make gcc g++ gfortran

	# add the Intel compiler file paths to various environment variables
	source /opt/intel/oneapi/setvars.sh

	# some of the libraries we install below need one or more of these variables
	export CC=icc
	export CXX=icpc
	export FC=ifort
	export F77=ifort
	export F90=ifort
	export MPIFC=mpiifort
	export MPIF77=mpiifort
	export MPIF90=mpiifort
	export MPICC=mpiicc
	export MPICXX=mpiicpc
	export CFLAGS="-fPIC -fPIE -O3 -diag-disable=10441 "
	export FFLAGS="-m64"
	export FCFLAGS="-m64"
	#########################

	#Downloading latest dateutil due to python3.8 running old version.
	pip3 install python-dateutil==2.8
	pip3 install python-dateutil

	#Directory Listings
	if [ "$WRFCHEM_PICK" = "1" ]; then
		mkdir $HOME/WRFCHEM_Intel
		export WRF_FOLDER=$HOME/WRFCHEM_Intel
	fi

	if [ "$WRFHYDRO_COUPLED_PICK" = "1" ]; then
		mkdir $HOME/WRFHYDRO_COUPLED_Intel
		export WRF_FOLDER=$HOME/WRFHYDRO_COUPLED_Intel
	fi

	if [ "$WRF_PICK" = "1" ]; then
		mkdir $HOME/WRF_Intel
		export WRF_FOLDER=$HOME/WRF_Intel
	fi

	if [ "$HWRF_PICK" = "1" ]; then
		mkdir $HOME/HWRF
		export WRF_FOLDER=$HOME/HWRF
	fi

	if [ "$SFIRE_PICK" = "1" ]; then
		mkdir $HOME/WRF_SFIRE_Intel
		export WRF_FOLDER=$HOME/WRF_SFIRE_Intel
	fi

	mkdir ${WRF_FOLDER}/MET-$met_Version_number
	mkdir ${WRF_FOLDER}/MET-$met_Version_number/Downloads
	mkdir ${WRF_FOLDER}/METplus-$METPLUS_Version
	mkdir ${WRF_FOLDER}/METplus-$METPLUS_Version/Downloads

	#Downloading MET and untarring files
	#Note weblinks change often update as needed.
	cd ${WRF_FOLDER}/MET-$met_Version_number/Downloads
	wget -c https://raw.githubusercontent.com/dtcenter/MET/main_v$met_VERSION_number/internal/scripts/installation/compile_MET_all.sh

	wget -c https://dtcenter.ucar.edu/dfiles/code/METplus/MET/installation/tar_files.tgz

	wget -c https://github.com/dtcenter/MET/archive/refs/tags/v$met_Version_number.tar.gz

	cp compile_MET_all.sh ${WRF_FOLDER}/MET-$met_Version_number
	tar -xvzf tar_files.tgz -C ${WRF_FOLDER}/MET-$met_Version_number
	cp v$met_Version_number.tar.gz ${WRF_FOLDER}/MET-$met_Version_number/tar_files
	cd ${WRF_FOLDER}/MET-$met_Version_number

	cd ${WRF_FOLDER}/MET-$met_Version_number

	export PYTHON_VERSION=$(/opt/intel/oneapi/intelpython/latest/bin/python3 -V 2>&1 | awk '{print $2}')
	export PYTHON_VERSION_MAJOR_VERSION=$(echo $PYTHON_VERSION | awk -F. '{print $1}')
	export PYTHON_VERSION_MINOR_VERSION=$(echo $PYTHON_VERSION | awk -F. '{print $2}')
	export PYTHON_VERSION_COMBINED=$PYTHON_VERSION_MAJOR_VERSION.$PYTHON_VERSION_MINOR_VERSION

	export CC=icc
	export CXX=icpc
	export FC=ifort
	export F77=ifort
	export F90=ifort
	export gcc_version=$(icc -dumpversion -diag-disable=10441)
	export TEST_BASE=${WRF_FOLDER}/MET-$met_Version_number
	export COMPILER=intel_$gcc_version
	export MET_SUBDIR=${TEST_BASE}
	export MET_TARBALL=v$met_Version_number.tar.gz
	export USE_MODULES=FALSE
	export MET_PYTHON=/opt/intel/oneapi/intelpython/python${PYTHON_VERSION_COMBINED}
	export MET_PYTHON_CC="$(python3-config --cflags --embed)"
	export MET_PYTHON_LD="$(python3-config --ldflags --embed) -L${MET_PYTHON}/lib -lpython${PYTHON_VERSION_COMBINED}"
	export SET_D64BIT=FALSE
	export CPU_CORE=$(nproc) # number of available threads on system
	export CPU_6CORE="6"
	export CPU_HALF=$(($CPU_CORE / 2))                    #half of availble cores on system
	export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2))) #Forces CPU cores to even number to avoid partial core export. ie 7 cores would be 3.5 cores.

	if [ $CPU_CORE -le $CPU_6CORE ]; then #If statement for low core systems.  Forces computers to only use 1 core if there are 4 cores or less on the system.
		export CPU_HALF_EVEN="2"
	else
		export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))
	fi

	echo "##########################################"
	echo "Number of Threads being used $CPU_HALF_EVEN"
	echo "##########################################"

	echo " "

	export MAKE_ARGS="-j 4"


	chmod 775 compile_MET_all.sh

	time ./compile_MET_all.sh 2>&1 | tee compile_MET_all.log

	export PATH=${WRF_FOLDER}/MET-$met_Version_number/bin:$PATH #Add MET executables to path

	#Basic Package Management for Model Evaluation Tools (METplus)

	echo $PASSWD | sudo -S apt -y update
	echo $PASSWD | sudo -S apt -y upgrade && sudo -S apt -y autoremove

	#Directory Listings for Model Evaluation Tools (METplus

	mkdir ${WRF_FOLDER}/METplus-$METPLUS_Version
	mkdir ${WRF_FOLDER}/METplus-$METPLUS_Version/Sample_Data
	mkdir ${WRF_FOLDER}/METplus-$METPLUS_Version/Output
	mkdir ${WRF_FOLDER}/METplus-$METPLUS_Version/Downloads

	#Downloading METplus and untarring files

	cd ${WRF_FOLDER}/METplus-$METPLUS_Version/Downloads
	wget -c https://github.com/dtcenter/METplus/archive/refs/tags/v$METPLUS_Version.tar.gz
	tar -xvzf v$METPLUS_Version.tar.gz -C ${WRF_FOLDER}

	# Insatlllation of Model Evaluation Tools Plus
	cd ${WRF_FOLDER}/METplus-$METPLUS_Version/parm/metplus_config

	sed -i "s|MET_INSTALL_DIR = /path/to|MET_INSTALL_DIR = ${WRF_FOLDER}/MET-$met_Version_number|" defaults.conf
	sed -i "s|INPUT_BASE = /path/to|INPUT_BASE = ${WRF_FOLDER}/METplus-$METPLUS_Version/Sample_Data|" defaults.conf
	sed -i "s|OUTPUT_BASE = /path/to|OUTPUT_BASE = ${WRF_FOLDER}/METplus-$METPLUS_Version/Output|" defaults.conf

	# Downloading Sample Data

	cd ${WRF_FOLDER}/METplus-$METPLUS_Version/Downloads
	wget -c https://dtcenter.ucar.edu/dfiles/code/METplus/METplus_Data/v$METPLUS_DATA/sample_data-met_tool_wrapper-$METPLUS_DATA.tgz
	tar -xvzf sample_data-met_tool_wrapper-$METPLUS_DATA.tgz -C ${WRF_FOLDER}/METplus-$METPLUS_Version/Sample_Data

	# Testing if installation of MET & METPlus was sucessfull
	# If you see in terminal "METplus has successfully finished running."
	# Then MET & METPLUS is sucessfully installed

	echo 'Testing MET & METPLUS Installation.'
	$WRF_FOLDER/METplus-$METPLUS_Version/ush/run_metplus.py -c $WRF_FOLDER/METplus-$METPLUS_Version/parm/use_cases/met_tool_wrapper/GridStat/GridStat.conf

	# Check if the previous command was successful
	if [ $? -eq 0 ]; then
			echo " "
			echo "MET and METPLUS successfully installed with GNU compilers."
			echo " "
			export PATH=$WRF_FOLDER/METplus-$METPLUS_Version/ush:$PATH
	else
			echo " "
			echo "Error: MET and METPLUS installation failed."
			echo " "
			# Handle the error case, e.g., exit the script or retry installation
			exit 1
	fi
fi

if [ "$Ubuntu_64bit_GNU" = "1" ] && [ "$DTC_MET" = "1" ]; then

	echo $PASSWD | sudo -S sudo apt install git
	echo "MET INSTALLING"
	export HOME=$(
		cd
		pwd
	)
	#Basic Package Management for Model Evaluation Tools (MET)

	#############################basic package managment############################
	echo $PASSWD | sudo -S apt -y update
	echo $PASSWD | sudo -S apt -y upgrade && sudo -S apt -y autoremove
	echo $PASSWD | sudo -S apt -y install autoconf automake bison build-essential byacc cmake csh curl default-jdk default-jre emacs flex g++ gawk gcc gfortran git ksh libcurl4-openssl-dev libjpeg-dev libncurses6 libpixman-1-dev libpng-dev libtool libxml2 libxml2-dev m4 make  ncview okular openbox pipenv pkg-config  python3 python3-dev python3-pip python3-dateutil tcsh unzip xauth xorg time

	#Downloading latest dateutil due to python3.8 running old version.
	pip3 install python-dateutil==2.8
	pip3 install python-dateutil

	#Directory Listings
	if [ "$WRFCHEM_PICK" = "1" ]; then
		mkdir $HOME/WRFCHEM
		export WRF_FOLDER=$HOME/WRFCHEM
	fi

	if [ "$WRFHYDRO_COUPLED_PICK" = "1" ]; then
		mkdir $HOME/WRFHYDRO_COUPLED
		export WRF_FOLDER=$HOME/WRFHYDRO_COUPLED
	fi

	if [ "$WRFHYDRO_STANDALONE_PICK" = "1" ]; then
		mkdir $HOME/WRFHYDRO_STANDALONE
		export WRF_FOLDER=$HOME/WRFHYDRO_STANDALONE
	fi

	if [ "$WRF_PICK" = "1" ]; then
		mkdir $HOME/WRF
		export WRF_FOLDER=$HOME/WRF
	fi

	if [ "$HWRF_PICK" = "1" ]; then
		mkdir $HOME/HWRF
		export WRF_FOLDER=$HOME/HWRF
	fi

	if [ "$CMAQ_PICK" = "1" ]; then
		mkdir $HOME/WRF_CMAQ
		export WRF_FOLDER=$HOME/WRF_CMAQ
	fi

	if [ "$SFIRE_PICK" = "1" ]; then
		mkdir $HOME/WRF_SFIRE_Intel
		export WRF_FOLDER=$HOME/WRF_SFIRE
	fi

	mkdir ${WRF_FOLDER}/MET-$met_Version_number
	mkdir ${WRF_FOLDER}/MET-$met_Version_number/Downloads
	mkdir ${WRF_FOLDER}/METplus-$METPLUS_Version
	mkdir ${WRF_FOLDER}/METplus-$METPLUS_Version/Downloads

	#Downloading MET and untarring files
	#Note weblinks change often update as needed.
	cd ${WRF_FOLDER}/MET-$met_Version_number/Downloads

	wget -c https://raw.githubusercontent.com/dtcenter/MET/main_v$met_VERSION_number/internal/scripts/installation/compile_MET_all.sh

	wget -c https://dtcenter.ucar.edu/dfiles/code/METplus/MET/installation/tar_files.tgz

	wget -c https://github.com/dtcenter/MET/archive/refs/tags/v$met_Version_number.tar.gz

	cp compile_MET_all.sh ${WRF_FOLDER}/MET-$met_Version_number
	tar -xvzf tar_files.tgz -C ${WRF_FOLDER}/MET-$met_Version_number
	cp v$met_Version_number.tar.gz ${WRF_FOLDER}/MET-$met_Version_number/tar_files
	cd ${WRF_FOLDER}/MET-$met_Version_number

	# Installation of Model Evaluation Tools
	export CC=gcc
	export CXX=g++
	export FC=gfortran
	export F77=gfortran
	export CFLAGS="-fPIC -fPIE -O3"

	cd ${WRF_FOLDER}/MET-$met_Version_number
	export GCC_VERSION=$(gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	export PYTHON_VERSION=$(/usr/bin/python3 -V 2>&1 | awk '{print $2}')
	export PYTHON_VERSION_MAJOR_VERSION=$(echo $PYTHON_VERSION | awk -F. '{print $1}')
	export PYTHON_VERSION_MINOR_VERSION=$(echo $PYTHON_VERSION | awk -F. '{print $2}')
	export PYTHON_VERSION_COMBINED=$PYTHON_VERSION_MAJOR_VERSION.$PYTHON_VERSION_MINOR_VERSION

	export FC=/usr/bin/gfortran
	export F77=/usr/bin/gfortran
	export F90=/usr/bin/gfortran
	export gcc_version=$(gcc -dumpfullversion)
	export TEST_BASE=${WRF_FOLDER}/MET-$met_Version_number
	export COMPILER=gnu_$gcc_version
	export MET_SUBDIR=${TEST_BASE}
	export MET_TARBALL=v$met_Version_number.tar.gz
	export USE_MODULES=FALSE
	export MET_PYTHON=/usr
	export MET_PYTHON_CC="$(python3-config --cflags --embed)"
	export MET_PYTHON_LD="$(python3-config --ldflags --embed) -L${MET_PYTHON}/lib -lpython${PYTHON_VERSION_COMBINED}"
	export SET_D64BIT=FALSE


	export MAKE_ARGS="-j 4"

	chmod 775 compile_MET_all.sh

	time ./compile_MET_all.sh 2>&1 | tee compile_MET_all.log

	export PATH=${WRF_FOLDER}/MET-$met_Version_number/bin:$PATH

	#basic Package Management for Model Evaluation Tools (METplus)

	echo $PASSWD | sudo -S apt -y update
	echo $PASSWD | sudo -S apt -y upgrade && sudo -S apt -y autoremove

	#Directory Listings for Model Evaluation Tools (METplus

	mkdir ${WRF_FOLDER}/METplus-$METPLUS_Version
	mkdir ${WRF_FOLDER}/METplus-$METPLUS_Version/Sample_Data
	mkdir ${WRF_FOLDER}/METplus-$METPLUS_Version/Output
	mkdir ${WRF_FOLDER}/METplus-$METPLUS_Version/Downloads

	#Downloading METplus and untarring files

	cd ${WRF_FOLDER}/METplus-$METPLUS_Version/Downloads
	wget -c https://github.com/dtcenter/METplus/archive/refs/tags/v$METPLUS_Version.tar.gz
	tar -xvzf v$METPLUS_Version.tar.gz -C ${WRF_FOLDER}

	# Insatlllation of Model Evaluation Tools Plus
	cd ${WRF_FOLDER}/METplus-$METPLUS_Version/parm/metplus_config

	sed -i "s|MET_INSTALL_DIR = /path/to|MET_INSTALL_DIR = ${WRF_FOLDER}/MET-$met_Version_number|" defaults.conf
	sed -i "s|INPUT_BASE = /path/to|INPUT_BASE = ${WRF_FOLDER}/METplus-$METPLUS_Version/Sample_Data|" defaults.conf
	sed -i "s|OUTPUT_BASE = /path/to|OUTPUT_BASE = ${WRF_FOLDER}/METplus-$METPLUS_Version/Output|" defaults.conf

	# Downloading Sample Data

	cd ${WRF_FOLDER}/METplus-$METPLUS_Version/Downloads
	wget -c https://dtcenter.ucar.edu/dfiles/code/METplus/METplus_Data/v$METPLUS_DATA/sample_data-met_tool_wrapper-$METPLUS_DATA.tgz
	tar -xvzf sample_data-met_tool_wrapper-$METPLUS_DATA.tgz -C ${WRF_FOLDER}/METplus-$METPLUS_Version/Sample_Data

	# Testing if installation of MET & METPlus was sucessfull
	# If you see in terminal "METplus has successfully finished running."
	# Then MET & METPLUS is sucessfully installed

	echo 'Testing MET & METPLUS Installation.'
	$WRF_FOLDER/METplus-$METPLUS_Version/ush/run_metplus.py -c $WRF_FOLDER/METplus-$METPLUS_Version/parm/use_cases/met_tool_wrapper/GridStat/GridStat.conf

	# Check if the previous command was successful
	if [ $? -eq 0 ]; then
			echo " "
			echo "MET and METPLUS successfully installed with GNU compilers."
			echo " "
			export PATH=$WRF_FOLDER/METplus-$METPLUS_Version/ush:$PATH
	else
			echo " "
			echo "Error: MET and METPLUS installation failed."
			echo " "
			# Handle the error case, e.g., exit the script or retry installation
			exit 1
	fi
fi

if [ "$Centos_64bit_GNU" = "1" ] && [ "$DTC_MET" = "1" ]; then
	export HOME=$(
		cd
		pwd
	)

	echo $PASSWD | sudo -S sudo dnf install git

	#Basic Package Management for Model Evaluation Tools (MET)
	echo $PASSWD | sudo -S yum install epel-release -y
	echo $PASSWD | sudo -S yum install dnf -y
	echo $PASSWD | sudo -S dnf install epel-release -y
	echo $PASSWD | sudo -S dnf -y update
	echo $PASSWD | sudo -S dnf -y upgrade
	echo $PASSWD | sudo -S dnf -y install autoconf automake bzip2 bzip2-devel byacc cairo-devel cmake cpp curl curl-devel flex  fontconfig-devel fontconfig-devel.x86_64 gcc gcc-c++ gcc-gfortran git java-11-openjdk java-11-openjdk-devel ksh libX11-devel libX11-devel.x86_64 libXaw libXaw-devel libXext-devel libXext-devel.x86_64 libXmu-devel libXrender-devel libXrender-devel.x86_64 libstdc++ libstdc++-devel  libxml2 libxml2-devel m4  .x86_64 nfs-utils perl pkgconfig  pixman-devel python3 python3-devel tcsh time unzip wget
	pip3 install python-dateutil
	echo $PASSWD | sudo -S dnf -y groupinstall "Development Tools"
	echo $PASSWD | sudo -S dnf -y update
	echo $PASSWD | sudo -S dnf -y upgrade
	echo " "

	#Directory Listings
	if [ "$WRFCHEM_PICK" = "1" ]; then
		mkdir $HOME/WRFCHEM
		export WRF_FOLDER=$HOME/WRFCHEM
	fi

	if [ "$WRFHYDRO_COUPLED_PICK" = "1" ]; then
		mkdir $HOME/WRFHYDRO_COUPLED
		export WRF_FOLDER=$HOME/WRFHYDRO_COUPLED
	fi

	if [ "$WRFHYDRO_STANDALONE_PICK" = "1" ]; then
		mkdir $HOME/WRFHYDRO_STANDALONE
		export WRF_FOLDER=$HOME/WRFHYDRO_STANDALONE
	fi

	if [ "$WRF_PICK" = "1" ]; then
		mkdir $HOME/WRF
		export WRF_FOLDER=$HOME/WRF
	fi

	if [ "$CMAQ_PICK" = "1" ]; then
		mkdir $HOME/WRF_CMAQ
		export WRF_FOLDER=$HOME/WRF_CMAQ
	fi

	if [ "$SFIRE_PICK" = "1" ]; then
		mkdir $HOME/WRF_SFIRE_Intel
		export WRF_FOLDER=$HOME/WRF_SFIRE
	fi

	mkdir ${WRF_FOLDER}/MET-$met_Version_number
	mkdir ${WRF_FOLDER}/MET-$met_Version_number/Downloads
	mkdir ${WRF_FOLDER}/METplus-$METPLUS_Version
	mkdir ${WRF_FOLDER}/METplus-$METPLUS_Version/Downloads

	#Downloading MET and untarring files
	#Note weblinks change often update as needed.
	cd ${WRF_FOLDER}/MET-$met_Version_number/Downloads

	wget -c https://raw.githubusercontent.com/dtcenter/MET/main_v$met_VERSION_number/internal/scripts/installation/compile_MET_all.sh

	wget -c https://dtcenter.ucar.edu/dfiles/code/METplus/MET/installation/tar_files.tgz

	wget -c https://github.com/dtcenter/MET/archive/refs/tags/v$met_Version_number.tar.gz

	cp compile_MET_all.sh ${WRF_FOLDER}/MET-$met_Version_number
	tar -xvzf tar_files.tgz -C ${WRF_FOLDER}/MET-$met_Version_number
	cp v$met_Version_number.tar.gz ${WRF_FOLDER}/MET-$met_Version_number/tar_files
	cd ${WRF_FOLDER}/MET-$met_Version_number

	# Installation of Model Evaluation Tools

	cd ${WRF_FOLDER}/MET-$met_Version_number

	export PYTHON_VERSION=$(/usr/bin/python3 -V 2>&1 | awk '{print $2}')
	export PYTHON_VERSION_MAJOR_VERSION=$(echo $PYTHON_VERSION | awk -F. '{print $1}')
	export PYTHON_VERSION_MINOR_VERSION=$(echo $PYTHON_VERSION | awk -F. '{print $2}')
	export PYTHON_VERSION_COMBINED=$PYTHON_VERSION_MAJOR_VERSION.$PYTHON_VERSION_MINOR_VERSION

	export CC=gcc
	export CXX=g++
	export CFLAGS="-fPIC -fPIE -O3"
	export FC=gfortran
	export F77=gfortran
	export F90=gfortran
	export gcc_version=$(gcc -dumpfullversion)
	export TEST_BASE=${WRF_FOLDER}/MET-$met_Version_number
	export COMPILER=gnu_$gcc_version
	export MET_SUBDIR=${TEST_BASE}
	export MET_TARBALL=v$met_Version_number.tar.gz
	export USE_MODULES=FALSE
	export MET_PYTHON=/usr
	export MET_PYTHON_CC="$(python3-config --cflags --embed)"
	export MET_PYTHON_LD="$(python3-config --ldflags --embed) -L${MET_PYTHON}/lib -lpython${PYTHON_VERSION_COMBINED}"
	export SET_D64BIT=FALSE


	export MAKE_ARGS="-j 4"

	chmod 775 compile_MET_all.sh

	time ./compile_MET_all.sh 2>&1 | tee compile_MET_all.log

	export PATH=${WRF_FOLDER}/MET-$met_Version_number/bin:$PATH

	#basic Package Management for Model Evaluation Tools (METplus)

	echo $PASSWD | sudo -S dnf -y update
	echo $PASSWD | sudo -S dnf -y upgrade

	#Directory Listings for Model Evaluation Tools (METplus

	mkdir ${WRF_FOLDER}/METplus-$METPLUS_Version
	mkdir ${WRF_FOLDER}/METplus-$METPLUS_Version/Sample_Data
	mkdir ${WRF_FOLDER}/METplus-$METPLUS_Version/Output
	mkdir ${WRF_FOLDER}/METplus-$METPLUS_Version/Downloads

	#Downloading METplus and untarring files

	cd ${WRF_FOLDER}/METplus-$METPLUS_Version/Downloads
	wget -c https://github.com/dtcenter/METplus/archive/refs/tags/v$METPLUS_Version.tar.gz
	tar -xvzf v$METPLUS_Version.tar.gz -C ${WRF_FOLDER}

	# Insatlllation of Model Evaluation Tools Plus
	cd ${WRF_FOLDER}/METplus-$METPLUS_Version/parm/metplus_config

	sed -i "s|MET_INSTALL_DIR = /path/to|MET_INSTALL_DIR = ${WRF_FOLDER}/MET-$met_Version_number|" defaults.conf
	sed -i "s|INPUT_BASE = /path/to|INPUT_BASE = ${WRF_FOLDER}/METplus-$METPLUS_Version/Sample_Data|" defaults.conf
	sed -i "s|OUTPUT_BASE = /path/to|OUTPUT_BASE = ${WRF_FOLDER}/METplus-$METPLUS_Version/Output|" defaults.conf

	# Downloading Sample Data

	cd ${WRF_FOLDER}/METplus-$METPLUS_Version/Downloads
	wget -c https://dtcenter.ucar.edu/dfiles/code/METplus/METplus_Data/v$METPLUS_DATA/sample_data-met_tool_wrapper-$METPLUS_DATA.tgz
	tar -xvzf sample_data-met_tool_wrapper-$METPLUS_DATA.tgz -C ${WRF_FOLDER}/METplus-$METPLUS_Version/Sample_Data

	# Testing if installation of MET & METPlus was sucessfull
	# If you see in terminal "METplus has successfully finished running."
	# Then MET & METPLUS is sucessfully installed

	echo 'Testing MET & METPLUS Installation.'
	$WRF_FOLDER/METplus-$METPLUS_Version/ush/run_metplus.py -c $WRF_FOLDER/METplus-$METPLUS_Version/parm/use_cases/met_tool_wrapper/GridStat/GridStat.conf

	# Check if the previous command was successful
	if [ $? -eq 0 ]; then
			echo " "
			echo "MET and METPLUS successfully installed with GNU compilers."
			echo " "
			export PATH=$WRF_FOLDER/METplus-$METPLUS_Version/ush:$PATH
	else
			echo " "
			echo "Error: MET and METPLUS installation failed."
			echo " "
			# Handle the error case, e.g., exit the script or retry installation
			exit 1
	fi
fi

if [ "$Centos_64bit_GNU" = "2" ] && [ "$DTC_MET" = "1" ]; then

	echo $PASSWD | sudo -S sudo dnf install git

	echo "MET INSTALLING"
	export HOME=$(
		cd
		pwd
	)

	#Basic Package Management for Model Evaluation Tools (MET)

	echo $PASSWD | sudo -S yum install epel-release -y
	echo $PASSWD | sudo -S yum install dnf -y
	echo $PASSWD | sudo -S dnf install epel-release -y
	echo $PASSWD | sudo -S dnf -y update
	echo $PASSWD | sudo -S dnf -y upgrade
	echo $PASSWD | sudo -S dnf -y install autoconf automake bzip2 bzip2-devel byacc cairo-devel cmake cpp curl curl-devel flex  fontconfig-devel fontconfig-devel.x86_64 gcc gcc-c++ gcc-gfortran git java-11-openjdk java-11-openjdk-devel ksh libX11-devel libX11-devel.x86_64 libXaw libXaw-devel libXext-devel libXext-devel.x86_64 libXmu-devel libXrender-devel libXrender-devel.x86_64 libstdc++ libstdc++-devel  libxml2 libxml2-devel m4  .x86_64 nfs-utils perl pkgconfig  pixman-devel python3 python3-devel tcsh time unzip wget
	echo $PASSWD | sudo -S pip3 install python-dateutil
	echo $PASSWD | sudo -S dnf -y groupinstall "Development Tools"
	echo $PASSWD | sudo -S dnf -y update
	echo $PASSWD | sudo -S dnf -y upgrade
	echo " "

	echo "old version of GNU detected"
	echo $PASSWD | sudo -S yum install centos-release-scl -y
	echo $PASSWD | sudo -S yum clean all
	echo $PASSWD | sudo -S yum remove devtoolset-11*
	echo $PASSWD | sudo -S yum install devtoolset-11
	echo $PASSWD | sudo -S yum install devtoolset-11-\* -y
	source /opt/rh/devtoolset-11/enable
	gcc --version
	echo $PASSWD | sudo -S yum install rh-python38* -y
	source /opt/rh/rh-python38/enable
	python3 -V
	echo $PASSWD | sudo echo $PASSWD | sudo -S ./opt/rh/rh-python38/root/bin/pip3.8 install python-dateutil

	#Directory Listings
	if [ "$WRFCHEM_PICK" = "1" ]; then
		mkdir $HOME/WRFCHEM
		export WRF_FOLDER=$HOME/WRFCHEM
	fi

	if [ "$WRFHYDRO_COUPLED_PICK" = "1" ]; then
		mkdir $HOME/WRFHYDRO_COUPLED
		export WRF_FOLDER=$HOME/WRFHYDRO_COUPLED
	fi

	if [ "$WRFHYDRO_STANDALONE_PICK" = "1" ]; then
		mkdir $HOME/WRFHYDRO_STANDALONE
		export WRF_FOLDER=$HOME/WRFHYDRO_STANDALONE
	fi

	if [ "$WRF_PICK" = "1" ]; then
		mkdir $HOME/WRF
		export WRF_FOLDER=$HOME/WRF
	fi

	if [ "$CMAQ_PICK" = "1" ]; then
		mkdir $HOME/WRF_CMAQ
		export WRF_FOLDER=$HOME/WRF_CMAQ
	fi

	if [ "$SFIRE_PICK" = "1" ]; then
		mkdir $HOME/WRF_SFIRE_Intel
		export WRF_FOLDER=$HOME/WRF_SFIRE
	fi

	mkdir ${WRF_FOLDER}/MET-$met_Version_number
	mkdir ${WRF_FOLDER}/MET-$met_Version_number/Downloads
	mkdir ${WRF_FOLDER}/METplus-$METPLUS_Version
	mkdir ${WRF_FOLDER}/METplus-$METPLUS_Version/Downloads

	#Downloading MET and untarring files
	#Note weblinks change often update as needed.
	cd ${WRF_FOLDER}/MET-$met_Version_number/Downloads

	wget -c https://raw.githubusercontent.com/dtcenter/MET/main_v$met_VERSION_number/internal/scripts/installation/compile_MET_all.sh

	wget -c https://dtcenter.ucar.edu/dfiles/code/METplus/MET/installation/tar_files.tgz

	wget -c https://github.com/dtcenter/MET/archive/refs/tags/v$met_Version_number.tar.gz

	cp compile_MET_all.sh ${WRF_FOLDER}/MET-$met_Version_number
	tar -xvzf tar_files.tgz -C ${WRF_FOLDER}/MET-$met_Version_number
	cp v$met_Version_number.tar.gz ${WRF_FOLDER}/MET-$met_Version_number/tar_files
	cd ${WRF_FOLDER}/MET-$met_Version_number

	# Installation of Model Evaluation Tools

	cd ${WRF_FOLDER}/MET-$met_Version_number

	export PYTHON_VERSION=$(/opt/rh/rh-python38/root/usr/bin/python3 -V 2>&1 | awk '{print $2}')
	export PYTHON_VERSION_MAJOR_VERSION=$(echo $PYTHON_VERSION | awk -F. '{print $1}')
	export PYTHON_VERSION_MINOR_VERSION=$(echo $PYTHON_VERSION | awk -F. '{print $2}')
	export PYTHON_VERSION_COMBINED=$PYTHON_VERSION_MAJOR_VERSION.$PYTHON_VERSION_MINOR_VERSION

	export CC=gcc
	export CXX=g++
	export CFLAGS="-fPIC -fPIE -O3"
	export FC=gfortran
	export F77=gfortran
	export F90=gfortran
	export gcc_version=$(gcc -dumpfullversion)
	export TEST_BASE=${WRF_FOLDER}/MET-$met_Version_number
	export COMPILER=gnu_$gcc_version
	export MET_SUBDIR=${TEST_BASE}
	export MET_TARBALL=v$met_Version_number.tar.gz
	export USE_MODULES=FALSE
	export MET_PYTHON=/opt/rh/rh-python38/root/usr/
	export MET_PYTHON_CC="$(python3-config --cflags --embed)"
	export MET_PYTHON_LD="$(python3-config --ldflags --embed) -L${MET_PYTHON}/lib -lpython${PYTHON_VERSION_COMBINED}"
	export SET_D64BIT=FALSE


	export MAKE_ARGS="-j 4"

	chmod 775 compile_MET_all.sh

	time ./compile_MET_all.sh 2>&1 | tee compile_MET_all.log

	export PATH=${WRF_FOLDER}/MET-$met_Version_number/bin:$PATH

	#basic Package Management for Model Evaluation Tools (METplus)

	echo $PASSWD | sudo -S dnf -y update
	echo $PASSWD | sudo -S dnf -y upgrade

	#Directory Listings for Model Evaluation Tools (METplus

	mkdir ${WRF_FOLDER}/METplus-$METPLUS_Version
	mkdir ${WRF_FOLDER}/METplus-$METPLUS_Version/Sample_Data
	mkdir ${WRF_FOLDER}/METplus-$METPLUS_Version/Output
	mkdir ${WRF_FOLDER}/METplus-$METPLUS_Version/Downloads

	#Downloading METplus and untarring files

	cd ${WRF_FOLDER}/METplus-$METPLUS_Version/Downloads
	wget -c https://github.com/dtcenter/METplus/archive/refs/tags/v$METPLUS_Version.tar.gz
	tar -xvzf v$METPLUS_Version.tar.gz -C ${WRF_FOLDER}

	# Insatlllation of Model Evaluation Tools Plus
	cd ${WRF_FOLDER}/METplus-$METPLUS_Version/parm/metplus_config

	sed -i "s|MET_INSTALL_DIR = /path/to|MET_INSTALL_DIR = ${WRF_FOLDER}/MET-$met_Version_number|" defaults.conf
	sed -i "s|INPUT_BASE = /path/to|INPUT_BASE = ${WRF_FOLDER}/METplus-$METPLUS_Version/Sample_Data|" defaults.conf
	sed -i "s|OUTPUT_BASE = /path/to|OUTPUT_BASE = ${WRF_FOLDER}/METplus-$METPLUS_Version/Output|" defaults.conf

	# Downloading Sample Data

	cd ${WRF_FOLDER}/METplus-$METPLUS_Version/Downloads
	wget -c https://dtcenter.ucar.edu/dfiles/code/METplus/METplus_Data/v$METPLUS_DATA/sample_data-met_tool_wrapper-$METPLUS_DATA.tgz
	tar -xvzf sample_data-met_tool_wrapper-$METPLUS_DATA.tgz -C ${WRF_FOLDER}/METplus-$METPLUS_Version/Sample_Data

	# Testing if installation of MET & METPlus was sucessfull
	# If you see in terminal "METplus has successfully finished running."
	# Then MET & METPLUS is sucessfully installed

	echo 'Testing MET & METPLUS Installation.'
	$WRF_FOLDER/METplus-$METPLUS_Version/ush/run_metplus.py -c $WRF_FOLDER/METplus-$METPLUS_Version/parm/use_cases/met_tool_wrapper/GridStat/GridStat.conf

	# Check if the previous command was successful
	if [ $? -eq 0 ]; then
			echo " "
			echo "MET and METPLUS successfully installed with GNU compilers."
			echo " "
			export PATH=$WRF_FOLDER/METplus-$METPLUS_Version/ush:$PATH
	else
			echo " "
			echo "Error: MET and METPLUS installation failed."
			echo " "
			# Handle the error case, e.g., exit the script or retry installation
			exit 1
	fi
fi

if [ "$macos_64bit_GNU" = "1" ] && [ "$DTC_MET" = "1" ] && [ "$MAC_CHIP" = "Intel" ]; then
	echo "MET INSTALLING"
# Update Homebrew and get list of outdated packages
brew update
outdated_packages=$(brew outdated --quiet)

# List of packages to check/install
packages=("automake" "autoconf" "bison" "cmake" "curl" "flex" "gdal" "gedit" "gcc@12" "gnu-sed" "imagemagick" "java" "ksh" "libtool" "make" "m4" "python@3.10" "snapcraft" "tcsh" "wget" "xauth" "xorgproto" "xorgrgb" "xquartz")

for pkg in "${packages[@]}"; do
    if brew list "$pkg" &>/dev/null; then
        echo "$pkg is already installed."
        if [[ $outdated_packages == *"$pkg"* ]]; then
            echo "$pkg has a newer version available. Upgrading..."
            brew upgrade "$pkg"
        fi
    else
        echo "$pkg is not installed. Installing..."
        brew install "$pkg"
    fi
    sleep 1
done

# Install python-dateutil using pip
pip3.10 install python-dateutil
pip3.10 install python-dateutil==2.8
	#Directory Listings
	if [ "$WRFCHEM_PICK" = "1" ]; then
		mkdir $HOME/WRFCHEM
		export WRF_FOLDER=$HOME/WRFCHEM
	fi

	if [ "$WRFHYDRO_COUPLED_PICK" = "1" ]; then
		mkdir $HOME/WRFHYDRO_COUPLED
		export WRF_FOLDER=$HOME/WRFHYDRO_COUPLED
	fi

	if [ "$WRFHYDRO_STANDALONE_PICK" = "1" ]; then
		mkdir $HOME/WRFHYDRO_STANDALONE
		export WRF_FOLDER=$HOME/WRFHYDRO_STANDALONE
	fi

	if [ "$WRF_PICK" = "1" ]; then
		mkdir $HOME/WRF
		export WRF_FOLDER=$HOME/WRF
	fi

	if [ "$HWRF_PICK" = "1" ]; then
		mkdir $HOME/HWRF
		export WRF_FOLDER=$HOME/HWRF
	fi

	if [ "$CMAQ_PICK" = "1" ]; then
		mkdir $HOME/WRF_CMAQ
		export WRF_FOLDER=$HOME/WRF_CMAQ
	fi

	if [ "$SFIRE_PICK" = "1" ]; then
		mkdir $HOME/WRF_SFIRE_Intel
		export WRF_FOLDER=$HOME/WRF_SFIRE
	fi

	mkdir ${WRF_FOLDER}/MET-$met_Version_number
	mkdir ${WRF_FOLDER}/MET-$met_Version_number/Downloads
	mkdir ${WRF_FOLDER}/METplus-$METPLUS_Version
	mkdir ${WRF_FOLDER}/METplus-$METPLUS_Version/Downloads

	#Symlink to avoid clang conflicts with compilers
	#default gcc path /usr/bin/gcc
	#default homebrew path /usr/local/bin

	echo "Please enter password for linking GNU libraries"

	echo $PASSWD | sudo -S ln -sf /usr/local/bin/gcc-12 /usr/local/bin/gcc
	echo $PASSWD | sudo -S ln -sf /usr/local/bin/g++-12 /usr/local/bin/g++
	echo $PASSWD | sudo -S ln -sf /usr/local/bin/gfortran-12 /usr/local/bin/gfortran
	echo $PASSWD | sudo -S ln -sf /usr/local/bin/python3.10 /usr/local/bin/python3


	gcc --version
	g++ --version
	gfortran --version
	python3 --version


	cd ${WRF_FOLDER}/MET-$met_Version_number/Downloads

	wget -c https://raw.githubusercontent.com/dtcenter/MET/main_v$met_VERSION_number/internal/scripts/installation/compile_MET_all.sh

	wget -c https://dtcenter.ucar.edu/dfiles/code/METplus/MET/installation/tar_files.tgz

	wget -c https://github.com/dtcenter/MET/archive/refs/tags/v$met_Version_number.tar.gz

	cp compile_MET_all.sh ${WRF_FOLDER}/MET-$met_Version_number
	tar -xvzf tar_files.tgz -C ${WRF_FOLDER}/MET-$met_Version_number
	cp v$met_Version_number.tar.gz ${WRF_FOLDER}/MET-$met_Version_number/tar_files
	cd ${WRF_FOLDER}/MET-$met_Version_number

	cd ${WRF_FOLDER}/MET-$met_Version_number

	export PYTHON_VERSION=$(python3 -V 2>1 | awk '{print $2}')
	export PYTHON_VERSION_MAJOR_VERSION=$(echo $PYTHON_VERSION | awk -F. '{print $1}')
	export PYTHON_VERSION_MINOR_VERSION=$(echo $PYTHON_VERSION | awk -F. '{print $2}')
	export PYTHON_VERSION_COMBINED=$PYTHON_VERSION_MAJOR_VERSION.$PYTHON_VERSION_MINOR_VERSION

	export CC=/usr/local/bin/gcc
	export CXX=/usr/local/bin/g++
	export CFLAGS="-fPIC -fPIE -O3 -Wno-implicit-function-declaration"
	export FC=/usr/local/bin/gfortran
	export F77=/usr/local/bin/gfortran
	export F90=/usr/local/bin/gfortran
	export gcc_version=$(gcc -dumpfullversion)
	export TEST_BASE=${WRF_FOLDER}/MET-$met_Version_number
	export COMPILER=gnu_$gcc_version
	export MET_SUBDIR=${TEST_BASE}
	export MET_TARBALL=v$met_Version_number.tar.gz
	export USE_MODULES=FALSE
	export MET_PYTHON=/usr/local
	export MET_PYTHON_CC="$(python3.10-config --cflags --embed)"
	export MET_PYTHON_LD="$(python3.10-config --ldflags --embed) -L${MET_PYTHON}/lib -lpython${PYTHON_VERSION_COMBINED}"

	export SET_D64BIT=FALSE

	export MAKE_ARGS="-j 4"

	chmod 775 compile_MET_all.sh


	time ./compile_MET_all.sh 2>&1 | tee compile_MET_all.log

	export PATH=${WRF_FOLDER}/MET-$met_Version_number/bin:$PATH

	mkdir ${WRF_FOLDER}/METplus-$METPLUS_Version
	mkdir ${WRF_FOLDER}/METplus-$METPLUS_Version/Sample_Data
	mkdir ${WRF_FOLDER}/METplus-$METPLUS_Version/Output
	mkdir ${WRF_FOLDER}/METplus-$METPLUS_Version/Downloads

	#Downloading METplus and untarring files

	cd ${WRF_FOLDER}/METplus-$METPLUS_Version/Downloads
	wget -c https://github.com/dtcenter/METplus/archive/refs/tags/v$METPLUS_Version.tar.gz
	tar -xvzf v$METPLUS_Version.tar.gz -C ${WRF_FOLDER}

	# Insatlllation of Model Evaluation Tools Plus
	cd ${WRF_FOLDER}/METplus-$METPLUS_Version/parm/metplus_config

	sed -i'' -e "s|MET_INSTALL_DIR = /path/to|MET_INSTALL_DIR = ${WRF_FOLDER}/MET-$met_Version_number|" defaults.conf
	sed -i'' -e "s|INPUT_BASE = /path/to|INPUT_BASE = ${WRF_FOLDER}/METplus-$METPLUS_Version/Sample_Data|" defaults.conf
	sed -i'' -e "s|OUTPUT_BASE = /path/to|OUTPUT_BASE = ${WRF_FOLDER}/METplus-$METPLUS_Version/Output|" defaults.conf

	# Downloading Sample Data

	cd ${WRF_FOLDER}/METplus-$METPLUS_Version/Downloads
	wget -c https://dtcenter.ucar.edu/dfiles/code/METplus/METplus_Data/v$METPLUS_DATA/sample_data-met_tool_wrapper-$METPLUS_DATA.tgz
	tar -xvzf sample_data-met_tool_wrapper-$METPLUS_DATA.tgz -C ${WRF_FOLDER}/METplus-$METPLUS_Version/Sample_Data

	# Testing if installation of MET & METPlus was sucessfull
	# If you see in terminal "METplus has successfully finished running."
	# Then MET & METPLUS is sucessfully installed

	echo 'Testing MET & METPLUS Installation.'
	$WRF_FOLDER/METplus-$METPLUS_Version/ush/run_metplus.py -c $WRF_FOLDER/METplus-$METPLUS_Version/parm/use_cases/met_tool_wrapper/GridStat/GridStat.conf

	# Check if the previous command was successful
	if [ $? -eq 0 ]; then
	    echo "MET and METPLUS successfully installed with GNU compilers."
	    export PATH=$WRF_FOLDER/METplus-$METPLUS_Version/ush:$PATH
	else
	    echo "Error: MET and METPLUS installation failed."
	    # Handle the error case, e.g., exit the script or retry installation
	    exit 1
	fi
fi

if [ "$macos_64bit_GNU" = "1" ] && [ "$DTC_MET" = "1" ] && [ "$MAC_CHIP" = "ARM" ]; then
	echo "MET INSTALLING"
# Update Homebrew and get list of outdated packages
brew update
outdated_packages=$(brew outdated --quiet)

# List of packages to check/install
packages=("automake" "autoconf" "bison" "cmake" "curl" "flex" "gdal" "gedit" "gcc@12" "gnu-sed" "imagemagick" "java" "ksh" "libtool" "make" "m4" "python@3.10" "snapcraft" "tcsh" "wget" "xauth" "xorgproto" "xorgrgb" "xquartz")

for pkg in "${packages[@]}"; do
    if brew list "$pkg" &>/dev/null; then
        echo "$pkg is already installed."
        if [[ $outdated_packages == *"$pkg"* ]]; then
            echo "$pkg has a newer version available. Upgrading..."
            brew upgrade "$pkg"
        fi
    else
        echo "$pkg is not installed. Installing..."
        brew install "$pkg"
    fi
    sleep 1
done

# Install python-dateutil using pip
pip3.10 install python-dateutil
pip3.10 install python-dateutil==2.8
	#Directory Listings
	if [ "$WRFCHEM_PICK" = "1" ]; then
		mkdir $HOME/WRFCHEM
		export WRF_FOLDER=$HOME/WRFCHEM
	fi

	if [ "$WRFHYDRO_COUPLED_PICK" = "1" ]; then
		mkdir $HOME/WRFHYDRO_COUPLED
		export WRF_FOLDER=$HOME/WRFHYDRO_COUPLED
	fi

	if [ "$WRFHYDRO_STANDALONE_PICK" = "1" ]; then
		mkdir $HOME/WRFHYDRO_STANDALONE
		export WRF_FOLDER=$HOME/WRFHYDRO_STANDALONE
	fi

	if [ "$WRF_PICK" = "1" ]; then
		mkdir $HOME/WRF
		export WRF_FOLDER=$HOME/WRF
	fi

	if [ "$HWRF_PICK" = "1" ]; then
		mkdir $HOME/HWRF
		export WRF_FOLDER=$HOME/HWRF
	fi

	if [ "$CMAQ_PICK" = "1" ]; then
		mkdir $HOME/WRF_CMAQ
		export WRF_FOLDER=$HOME/WRF_CMAQ
	fi

	if [ "$SFIRE_PICK" = "1" ]; then
		mkdir $HOME/WRF_SFIRE_Intel
		export WRF_FOLDER=$HOME/WRF_SFIRE
	fi

	mkdir ${WRF_FOLDER}/MET-$met_Version_number
	mkdir ${WRF_FOLDER}/MET-$met_Version_number/Downloads
	mkdir ${WRF_FOLDER}/METplus-$METPLUS_Version
	mkdir ${WRF_FOLDER}/METplus-$METPLUS_Version/Downloads

	#Symlink to avoid clang conflicts with compilers
	#default gcc path /usr/bin/gcc
	#default homebrew path /usr/local/bin
	echo $PASSWD | sudo -S unlink /opt/homebrew/bin/gfortran
	echo $PASSWD | sudo -S unlink /opt/homebrew/bin/gcc
	echo $PASSWD | sudo -S unlink /opt/homebrew/bin/g++
	echo $PASSWD | sudo -S unlink /opt/homebrew/bin/python3

	source ~./bashrc
	gcc --version
	g++ --version
	gfortran --version

	cd /opt/homebrew/bin

	echo $PASSWD | sudo -S ln -sf gcc-12 gcc
	echo $PASSWD | sudo -S ln -sf g++-12 g++
	echo $PASSWD | sudo -S ln -sf gfortran-12 gfortran
	echo $PASSWD | sudo -S ln -sf python3.10 python3

	cd
	source ~/.bashrc
	source ~/.bash_profile
	gcc --version
	g++ --version
	gfortran --version
	python3 --version

	cd ${WRF_FOLDER}/MET-$met_Version_number/Downloads

	wget -c https://raw.githubusercontent.com/dtcenter/MET/main_v$met_VERSION_number/internal/scripts/installation/compile_MET_all.sh

	wget -c https://dtcenter.ucar.edu/dfiles/code/METplus/MET/installation/tar_files.tgz

	wget -c https://github.com/dtcenter/MET/archive/refs/tags/v$met_Version_number.tar.gz

	cp compile_MET_all.sh ${WRF_FOLDER}/MET-$met_Version_number
	tar -xvzf tar_files.tgz -C ${WRF_FOLDER}/MET-$met_Version_number
	cp v$met_Version_number.tar.gz ${WRF_FOLDER}/MET-$met_Version_number/tar_files
	cd ${WRF_FOLDER}/MET-$met_Version_number

	cd ${WRF_FOLDER}/MET-$met_Version_number

	export PYTHON_VERSION=$(python3 -V 2>1 | awk '{print $2}')
	export PYTHON_VERSION_MAJOR_VERSION=$(echo $PYTHON_VERSION | awk -F. '{print $1}')
	export PYTHON_VERSION_MINOR_VERSION=$(echo $PYTHON_VERSION | awk -F. '{print $2}')
	export PYTHON_VERSION_COMBINED=$PYTHON_VERSION_MAJOR_VERSION.$PYTHON_VERSION_MINOR_VERSION

	export CC=/usr/local/bin/gcc
	export CXX=/usr/local/bin/g++
	export CFLAGS="-fPIC -fPIE -O3 -Wno-implicit-function-declaration"
	export FC=/usr/local/bin/gfortran
	export F77=/usr/local/bin/gfortran
	export F90=/usr/local/bin/gfortran
	export gcc_version=$(gcc -dumpfullversion)
	export TEST_BASE=${WRF_FOLDER}/MET-$met_Version_number
	export COMPILER=gnu_$gcc_version
	export MET_SUBDIR=${TEST_BASE}
	export MET_TARBALL=v$met_Version_number.tar.gz
	export USE_MODULES=FALSE
	export MET_PYTHON=/usr/local
	export MET_PYTHON_CC="$(python3.10-config --cflags --embed)"
	export MET_PYTHON_LD="$(python3.10-config --ldflags --embed) -L${MET_PYTHON}/lib -lpython${PYTHON_VERSION_COMBINED}"

	export SET_D64BIT=FALSE

	export MAKE_ARGS="-j 4"

	chmod 775 compile_MET_all.sh


	time ./compile_MET_all.sh 2>&1 | tee compile_MET_all.log

	export PATH=${WRF_FOLDER}/MET-$met_Version_number/bin:$PATH

	mkdir ${WRF_FOLDER}/METplus-$METPLUS_Version
	mkdir ${WRF_FOLDER}/METplus-$METPLUS_Version/Sample_Data
	mkdir ${WRF_FOLDER}/METplus-$METPLUS_Version/Output
	mkdir ${WRF_FOLDER}/METplus-$METPLUS_Version/Downloads

	#Downloading METplus and untarring files

	cd ${WRF_FOLDER}/METplus-$METPLUS_Version/Downloads
	wget -c https://github.com/dtcenter/METplus/archive/refs/tags/v$METPLUS_Version.tar.gz
	tar -xvzf v$METPLUS_Version.tar.gz -C ${WRF_FOLDER}

	# Insatlllation of Model Evaluation Tools Plus
	cd ${WRF_FOLDER}/METplus-$METPLUS_Version/parm/metplus_config

	sed -i'' -e "s|MET_INSTALL_DIR = /path/to|MET_INSTALL_DIR = ${WRF_FOLDER}/MET-$met_Version_number|" defaults.conf
	sed -i'' -e "s|INPUT_BASE = /path/to|INPUT_BASE = ${WRF_FOLDER}/METplus-$METPLUS_Version/Sample_Data|" defaults.conf
	sed -i'' -e "s|OUTPUT_BASE = /path/to|OUTPUT_BASE = ${WRF_FOLDER}/METplus-$METPLUS_Version/Output|" defaults.conf

	# Downloading Sample Data

	cd ${WRF_FOLDER}/METplus-$METPLUS_Version/Downloads
	wget -c https://dtcenter.ucar.edu/dfiles/code/METplus/METplus_Data/v$METPLUS_DATA/sample_data-met_tool_wrapper-$METPLUS_DATA.tgz
	tar -xvzf sample_data-met_tool_wrapper-$METPLUS_DATA.tgz -C ${WRF_FOLDER}/METplus-$METPLUS_Version/Sample_Data

	# Testing if installation of MET & METPlus was sucessfull
	# If you see in terminal "METplus has successfully finished running."
	# Then MET & METPLUS is sucessfully installed

	echo 'Testing MET & METPLUS Installation.'
	$WRF_FOLDER/METplus-$METPLUS_Version/ush/run_metplus.py -c $WRF_FOLDER/METplus-$METPLUS_Version/parm/use_cases/met_tool_wrapper/GridStat/GridStat.conf

	# Check if the previous command was successful
	if [ $? -eq 0 ]; then
	    echo "MET and METPLUS successfully installed with GNU compilers."
	    export PATH=$WRF_FOLDER/METplus-$METPLUS_Version/ush:$PATH
	else
	    echo "Error: MET and METPLUS installation failed."
	    # Handle the error case, e.g., exit the script or retry installation
	    exit 1
	fi
fi

##################################### WRFCHEM Tools ###############################################
# This script will install the WRFCHEM pre-processor tools.
# Information on these tools can be found here:
# https://www2.acom.ucar.edu/wrf-chem/wrf-chem-tools-community#download
#
# Addtional information on WRFCHEM can be found here:
# https://ruc.noaa.gov/wrf/wrf-chem/
#
# We ask users of the WRF-Chem preprocessor tools to include in any publications the following acknowledgement:
# "We acknowledge use of the WRF-Chem preprocessor tool {mozbc, fire_emiss, etc.} provided by the Atmospheric Chemistry Observations and Modeling Lab (ACOM) of NCAR."
#
#
# This script installs the WRFCHEM Tools with gnu or intel compilers.
####################################################################################################

if [ "$WRFCHEM_TOOLS" = "1" ]; then

	if [ "$Ubuntu_64bit_GNU" = "1" ] && [ "$WRFCHEM_PICK" = "1" ]; then

		echo $PASSWD | sudo -S sudo apt install git
		cd $HOME
		git clone https://github.com/HathewayWill/WRFCHEM-TOOLS-MOSIT.git
		cd WRFCHEM-TOOLS-MOSIT
		chmod 775 *.sh
		./WRFCHEM_TOOLS_MOSIT.sh $PASSWD $Ubuntu_64bit_GNU
		cd $HOME
	fi

	if [ "$Ubuntu_64bit_Intel" = "1" ] && [ "$WRFCHEM_PICK" = "1" ]; then

		echo $PASSWD | sudo -S sudo apt install git
		cd $HOME
		git clone https://github.com/HathewayWill/WRFCHEM-TOOLS-MOSIT.git
		cd WRFCHEM-TOOLS-MOSIT
		chmod 775 *.sh
		./WRFCHEM_TOOLS_MOSIT.sh $PASSWD $Ubuntu_64bit_Intel
		cd $HOME
	fi

	if [ "$macos_64bit_GNU" = "1" ] && [ "$WRFCHEM_PICK" = "1" ]; then

		brew install git
		cd $HOME
		git clone https://github.com/HathewayWill/WRFCHEM-TOOLS-MOSIT.git
		cd WRFCHEM-TOOLS-MOSIT
		chmod 775 *.sh
		./WRFCHEM_TOOLS_MOSIT.sh $PASSWD $macos_64bit_GNU
		cd $HOME
	fi

	if [ "$Centos_64bit_GNU" = "1" ] && [ "$WRFCHEM_PICK" = "1" ]; then

		echo $PASSWD | sudo -S sudo dnf install git
		cd $HOME
		git clone https://github.com/HathewayWill/WRFCHEM-TOOLS-MOSIT.git
		cd WRFCHEM-TOOLS-MOSIT
		chmod 775 *.sh
		./WRFCHEM_TOOLS_MOSIT.sh $PASSWD $Centos_64bit_GNU
		cd $HOME
	fi

	if [ "$Centos_64bit_GNU" = "2" ] && [ "$WRFCHEM_PICK" = "1" ]; then

		echo $PASSWD | sudo -S sudo dnf install git
		cd $HOME
		git clone https://github.com/HathewayWill/WRFCHEM-TOOLS-MOSIT.git
		cd WRFCHEM-TOOLS-MOSIT
		chmod 775 *.sh
		./WRFCHEM_TOOLS_MOSIT.sh $PASSWD $Centos_64bit_GNU
		cd $HOME
	fi

fi




############################################# WRF CMAQ #################################
## WRF_SFIRE installation with parallel process.
# Download and install required library and data files for WRF_CMAQ.
# Tested in Ubuntu 20.0${WPS_VERSION} LTS & Ubuntu 22.04, Rocky Linux 9
# Built in 64-bit system
# Built with Intel or GNU compilers
# Tested with current available libraries on 10/10/2023
# If newer libraries exist edit script paths for changes
#Estimated Run Time ~ 30 - 60 Minutes with 10mb/s downloadspeed.
# Special thanks to:
# Youtube's meteoadriatic, GitHub user jamal919.
# University of Manchester's  Doug L
# University of Tunis El Manar's Hosni
# GSL's Jordan S.
# NCAR's Mary B., Christine W., & Carl D.
# DTC's Julie P., Tara J., George M., & John H.
# UCAR's Katelyn F., Jim B., Jordan P., Kevin M.,
# EPA's Fahim S.
##############################################################

if [ "$Ubuntu_64bit_GNU" = "1" ] && [ "$CMAQ_PICK" = "1" ]; then
	#############################basic package managment############################
	  echo $PASSWD | sudo -S apt -y update
	  echo $PASSWD | sudo -S apt -y upgrade && sudo -S apt -y autoremove
	  echo $PASSWD | sudo -S apt -y install autoconf automake bison build-essential byacc cmake csh curl default-jdk default-jre emacs flex g++ gawk gcc gfortran git ksh libcurl4-openssl-dev libjpeg-dev libncurses6 libpixman-1-dev libpng-dev libtool libxml2 libxml2-dev m4 make  ncview okular openbox pipenv pkg-config  python3 python3-dev python3-pip python3-dateutil tcsh unzip xauth xorg time

	  echo " "
	  ##############################Directory Listing############################
	  export HOME=`cd;pwd`

	  mkdir $HOME/WRF_CMAQ
	  export WRF_FOLDER=$HOME/WRF_CMAQ
	  cd ${WRF_FOLDER}/
	  mkdir Downloads
	  mkdir Libs
	  export DIR=${WRF_FOLDER}/Libs
	  mkdir Libs/grib2
	  mkdir Libs/NETCDF
	  mkdir Libs/MPICH
	  mkdir -p Tests/Environment
	  mkdir -p Tests/Compatibility

	  echo " "
	  #############################Core Management####################################

	  export CPU_CORE=$(nproc)                                             # number of available threads on system
	  export CPU_6CORE="6"
	  export CPU_HALF=$(($CPU_CORE / 2))                                   #half of availble cores on system
	  export CPU_HALF_EVEN=$(( $CPU_HALF - ($CPU_HALF % 2) ))              #Forces CPU cores to even number to avoid partial core export. ie 7 cores would be 3.5 cores.

	  if [ $CPU_CORE -le $CPU_6CORE ]                                  #If statement for low core systems.  Forces computers to only use 1 core if there are 4 cores or less on the system.
	  then
	    export CPU_HALF_EVEN="2"
	  else
	    export CPU_HALF_EVEN=$(( $CPU_HALF - ($CPU_HALF % 2) ))
	  fi


	  echo "##########################################"
	  echo "Number of Threads being used $CPU_HALF_EVEN"
	  echo "##########################################"


	  echo " "
	  ##############################Downloading Libraries############################

	  cd Downloads
	  wget -c https://github.com/madler/zlib/archive/refs/tags/v$Zlib_Version.tar.gz
	  wget -c https://github.com/HDFGroup/hdf5/archive/refs/tags/hdf5-$HDF5_Version.tar.gz
	  wget -c https://github.com/Unidata/netcdf-c/archive/refs/tags/v$Netcdf_C_Version.tar.gz
	  wget -c https://github.com/Unidata/netcdf-fortran/archive/refs/tags/v$Netcdf_Fortran_Version.tar.gz
	  wget -c https://download.sourceforge.net/libpng/libpng-$Libpng_Version.tar.gz
	  wget -c https://www.ece.uvic.ca/~frodo/jasper/software/jasper-$Jasper_Version.zip
	  wget -c https://github.com/pmodels/mpich/releases/download/v$Mpich_Version/mpich-$Mpich_Version.tar.gz
	  wget -c  https://parallel-netcdf.github.io/Release/pnetcdf-$Pnetcdf_Version.tar.gz
	  wget -c https://sourceforge.net/projects/opengrads/files/grads2/2.2.1.oga.1/Linux%20%2864%20Bits%29/opengrads-2.2.1.oga.1-bundle-x86_64-pc-linux-gnu-glibc_2.17.tar.gz
	  wget -c https://www.cmascenter.org/ioapi/download/ioapi-3.2.tar.gz



	  echo " "
	  ####################################Compilers#####################################
	  export CC=gcc
	  export CXX=g++
	  export FC=gfortran
	  export F77=gfortran
	  export CFLAGS="-fPIC -fPIE -O3 "



	  #IF statement for GNU compiler issue
	  export GCC_VERSION=$(/usr/bin/gcc -dumpfullversion | awk '{print$1}')
	  export GFORTRAN_VERSION=$(/usr/bin/gfortran -dumpfullversion | awk '{print$1}')
	  export GPLUSPLUS_VERSION=$(/usr/bin/g++ -dumpfullversion | awk '{print$1}')

	  export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	  export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	  export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	  export version_10="10"

	  if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]
	    then
	      export fallow_argument=-fallow-argument-mismatch
	      export boz_argument=-fallow-invalid-boz
	    else
	      export fallow_argument=
	      export boz_argument=
	  fi


	  export FFLAGS="$fallow_argument -m64"
	  export FCFLAGS="$fallow_argument -m64"


	  echo "##########################################"
	  echo "FFLAGS = $FFLAGS"
	  echo "FCFLAGS = $FCFLAGS"
	  echo "##########################################"




	  echo " "
	  #############################zlib############################
	  #Uncalling compilers due to comfigure issue with zlib$Zlib_Version
	  #With CC & CXX definied ./configure uses different compiler Flags

	  cd ${WRF_FOLDER}/Downloads
	  tar -xvzf v$Zlib_Version.tar.gz
	  cd zlib-$Zlib_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log
	  ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	  make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	  make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	  #make check

	  echo " "
	  ##############################MPICH############################
	  #F90= due to compiler issues with mpich install
	  cd ${WRF_FOLDER}/Downloads
	  tar -xvzf mpich-$Mpich_Version.tar.gz
	  cd mpich-$Mpich_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log
	  F90= ./configure --prefix=$DIR/MPICH --with-device=ch3 FFLAGS=$fallow_argument FCFLAGS=$fallow_argument 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	  make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	  make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	  # make check



	  export PATH=$DIR/MPICH/bin:$PATH

	  export MPIFC=$DIR/MPICH/bin/mpifort
	  export MPIF77=$DIR/MPICH/bin/mpifort
	  export MPIF90=$DIR/MPICH/bin/mpifort
	  export MPICC=$DIR/MPICH/bin/mpicc
	  export MPICXX=$DIR/MPICH/bin/mpicxx


	  echo " "
	  #############################libpng############################
	  cd ${WRF_FOLDER}/Downloads
	  export LDFLAGS=-L$DIR/grib2/lib
	  export CPPFLAGS=-I$DIR/grib2/include
	  tar -xvzf libpng-$Libpng_Version.tar.gz
	  cd libpng-$Libpng_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log
	  CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	  make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	  make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	  #make check
	  echo " "
	  #############################JasPer############################
	  cd ${WRF_FOLDER}/Downloads
	  unzip jasper-$Jasper_Version.zip
	  cd jasper-$Jasper_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log
	  ./configure --prefix=$DIR/grib2
	  CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	  make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	  make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	  #make check

	  export JASPERLIB=$DIR/grib2/lib
	  export JASPERINC=$DIR/grib2/include


	  echo " "
	  #############################hdf5 library for netcdf4 functionality############################
	  cd ${WRF_FOLDER}/Downloads
	  tar -xvzf hdf5-$HDF5_Version.tar.gz
	  cd hdf5-hdf5-$HDF5_Version
	autoreconf -i -f 2>&1 | tee autoreconf.log
	  CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 --with-zlib=$DIR/grib2 --enable-hl --enable-fortran --enable-parallel 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	  make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	  make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	  #make check

	  export HDF5=$DIR/grib2
	  export PHDF5=$DIR/grib2
	  export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH


	  echo " "
	  #############################Install Parallel-netCDF##############################
	  #Make file created with half of available cpu cores
	  #Hard path for MPI added
	  ##################################################################################
	  cd ${WRF_FOLDER}/Downloads
	  tar -xzvf pnetcdf-$Pnetcdf_Version.tar.gz
	  cd pnetcdf-$Pnetcdf_Version
	  export MPIFC=$DIR/MPICH/bin/mpifort
	  export MPIF77=$DIR/MPICH/bin/mpifort
	  export MPIF90=$DIR/MPICH/bin/mpifort
	  export MPICC=$DIR/MPICH/bin/mpicc
	  export MPICXX=$DIR/MPICH/bin/mpicxx
	autoreconf -i -f 2>&1 | tee autoreconf.log
	  ./configure --prefix=$DIR/grib2  --enable-shared --enable-static 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	  make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	  make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	  #make check

	  export PNETCDF=$DIR/grib2


	  ##############################Install NETCDF C Library############################
	  cd ${WRF_FOLDER}/Downloads
	  tar -xzvf v$Netcdf_C_Version.tar.gz
	  cd netcdf-c-$Netcdf_C_Version/
	  export CPPFLAGS=-I$DIR/grib2/include
	  export LDFLAGS=-L$DIR/grib2/lib
	  export LIBS="-lhdf5_hl -lhdf5 -lz -lcurl -lgfortran -lgcc -lm -ldl -lpnetcdf"
	autoreconf -i -f 2>&1 | tee autoreconf.log
	  CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 ./configure --prefix=$DIR/NETCDF --disable-dap --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-pnetcdf --enable-cdf5 --enable-parallel-tests 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	  make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	  make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	  #make check

	  export PATH=$DIR/NETCDF/bin:$PATH
	  export NETCDF=$DIR/NETCDF
	  echo " "
	  ##############################NetCDF fortran library############################
	  cd ${WRF_FOLDER}/Downloads
	  tar -xvzf v$Netcdf_Fortran_Version.tar.gz
	  cd netcdf-fortran-$Netcdf_Fortran_Version/
	  export LD_LIBRARY_PATH=$DIR/NETCDF/lib:$LD_LIBRARY_PATH
	  export CPPFLAGS="-I$DIR/NETCDF/include -I$DIR/grib2/include"
	  export LDFLAGS="-L$DIR/NETCDF/lib -L$DIR/grib2/lib"
	  export LIBS="-lnetcdf -lpnetcdf -lcurl -lhdf5_hl -lhdf5 -lz -lm -ldl -lgcc -lgfortran"
	autoreconf -i -f 2>&1 | tee autoreconf.log
	  CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 ./configure --prefix=$DIR/NETCDF --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-parallel-tests --enable-hdf5 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	  make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	  make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	  #make check

	  echo " "



	  ###############################  I/O API  ###################################

	  cd ${WRF_FOLDER}/Downloads
	  mkdir ioapi
	  cd ioapi
	  tar -xzvf ${WRF_FOLDER}/Downloads/ioapi-3.2.tar.gz

	  #set gnu version
	  export BIN=Linux2_x86_64gfort10
	  export CPLMODE=nocpl
	  mkdir $BIN

	  #Link netcdf and grib lib folders to ioapi
	  ln -sf ${WRF_FOLDER}/Libs/NETCDF/lib/* ${WRF_FOLDER}/Downloads/ioapi/$BIN
	  ln -sf ${WRF_FOLDER}/Libs/grib2/lib/* ${WRF_FOLDER}/Downloads/ioapi/$BIN

	  #copy makefiles from ioapi directory to source makefile
	  #cp ${WRF_FOLDER}/Downloads/ioapi/ioapi/Makefile.nocpl ${WRF_FOLDER}/Downloads/ioapi/ioapi/Makefile
	  #cp ${WRF_FOLDER}/Downloads/ioapi/m3tools/Makefile.nocpl ${WRF_FOLDER}/Downloads/ioapi/m3tools/Makefile
	  cp ${WRF_FOLDER}/Downloads/ioapi/Makefile.template ${WRF_FOLDER}/Downloads/ioapi/Makefile

	  # Add proper sed statements needed for gfortran
	   sed -i '193s|-lnetcdff -lnetcdf| -lnetcdff -lnetcdf -lhdf5hl_fortran -lhdf5_fortran -lhdf5_hl -lhdf5 -ljpeg -lm -lz -lcurl|g' ${WRF_FOLDER}/Downloads/ioapi/Makefile
	   sed -i '210s|${IODIR}/Makefile ${TOOLDIR}/Makefile| |g' ${WRF_FOLDER}/Downloads/ioapi/Makefile


	   #Remove openmnp flags from Makefile
	   sed -i '30s/ -fopenmp//g' ${WRF_FOLDER}/Downloads/ioapi/ioapi/Makeinclude.$BIN
	   sed -i '31s/ -fopenmp//g' ${WRF_FOLDER}/Downloads/ioapi/ioapi/Makeinclude.$BIN


	   # Build IOAPI
	   make configure 2>&1 | tee configure.log
	   make -j $CPU_HALF_EVEN 2>&1 | tee make.log

	   #If statement to check that libioapi.a & m3xtract exist

	   cd ${WRF_FOLDER}/Downloads/ioapi/$BIN
	   n=$(ls -lrt libioapi.a | wc -l)
	   m=$(ls -rlt m3xtract | wc -l)
	     if (( ( $n == 1 ) && ( $m == 1) ))
	      then
	        echo "All expected files created."

	     else
	       echo "Missing one or more expected files. Exiting the script."
	       read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
	       exit
	     fi
	    echo " "

	    echo " "

	    mv ${WRF_FOLDER}/Downloads/ioapi/$BIN ${WRF_FOLDER}/Downloads/ioapi/Linux2_x86_64gfort
	    export BIN=Linux2_x86_64gfort
	  #################################### System Environment Tests ##############

	  cd ${WRF_FOLDER}/Downloads
	  wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_NETCDF_MPI_tests.tar
	  wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_tests.tar

	  tar -xvf Fortran_C_tests.tar -C ${WRF_FOLDER}/Tests/Environment
	  tar -xvf Fortran_C_NETCDF_MPI_tests.tar -C ${WRF_FOLDER}/Tests/Compatibility

	  export one="1"
	  echo " "
	  ############## Testing Environment #####

	  cd ${WRF_FOLDER}/Tests/Environment

	  cp ${NETCDF}/include/netcdf.inc .

	  echo " "
	  echo " "
	  echo "Environment Testing "
	  echo "Test 1"
	  $FC TEST_1_fortran_only_fixed.f
	  ./a.out | tee env_test1.txt
	  export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test1.txt | awk  '{print$1}')
	   if [ $TEST_PASS -ge 1 ]
	      then
	        echo "Enviroment Test 1 Passed"
	      else
	        echo "Environment Compiler Test 1 Failed"
	        exit
	    fi
	  read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	  echo " "
	  echo "Test 2"
	  $FC TEST_2_fortran_only_free.f90
	  ./a.out | tee env_test2.txt
	  export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test2.txt | awk  '{print$1}')
	   if [ $TEST_PASS -ge 1 ]
	      then
	        echo "Enviroment Test 2 Passed"
	      else
	        echo "Environment Compiler Test 2 Failed"
	        exit
	    fi
	  echo " "
	  read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	  echo " "
	  echo "Test 3"
	  $CC TEST_3_c_only.c
	  ./a.out | tee env_test3.txt
	  export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test3.txt | awk  '{print$1}')
	   if [ $TEST_PASS -ge 1 ]
	      then
	        echo "Enviroment Test 3 Passed"
	      else
	        echo "Environment Compiler Test 3 Failed"
	        exit
	    fi
	  echo " "
	  read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	  echo " "
	  echo "Test 4"
	  $CC -c -m64 TEST_4_fortran+c_c.c
	  $FC -c -m64 TEST_4_fortran+c_f.f90
	  $FC -m64 TEST_4_fortran+c_f.o TEST_4_fortran+c_c.o
	  ./a.out | tee env_test4.txt
	  export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test4.txt | awk  '{print$1}')
	   if [ $TEST_PASS -ge 1 ]
	      then
	        echo "Enviroment Test 4 Passed"
	      else
	        echo "Environment Compiler Test 4 Failed"
	        exit
	    fi
	  echo " "
	  read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	  echo " "
	  ############## Testing Environment #####

	  cd ${WRF_FOLDER}/Tests/Compatibility

	  cp ${NETCDF}/include/netcdf.inc .

	  echo " "
	  echo " "
	  echo "Library Compatibility Tests "
	  echo "Test 1"
	  $FC -c 01_fortran+c+netcdf_f.f
	  $CC -c 01_fortran+c+netcdf_c.c
	  $FC 01_fortran+c+netcdf_f.o 01_fortran+c+netcdf_c.o \
	       -L${NETCDF}/lib -lnetcdff -lnetcdf

	       ./a.out | tee comp_test1.txt
	       export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test1.txt | awk  '{print$1}')
	        if [ $TEST_PASS -ge 1 ]
	           then
	             echo "Compatibility Test 1 Passed"
	           else
	             echo "Compatibility Compiler Test 1 Failed"
	             exit
	         fi
	       echo " "
	       read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	  echo " "

	  echo "Test 2"
	  $MPIFC -c 02_fortran+c+netcdf+mpi_f.f
	  $MPICC -c 02_fortran+c+netcdf+mpi_c.c
	  $MPIFC 02_fortran+c+netcdf+mpi_f.o \
	  02_fortran+c+netcdf+mpi_c.o \
	       -L${NETCDF}/lib -lnetcdff -lnetcdf

	  $DIR/MPICH/bin/mpirun ./a.out | tee comp_test2.txt
	  export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test2.txt | awk  '{print$1}')
	   if [ $TEST_PASS -ge 1 ]
	      then
	        echo "Compatibility Test 2 Passed"
	      else
	        echo "Compatibility Compiler Test 2 Failed"
	        exit
	    fi
	  echo " "
	  read -r -t 3 -p "I am going to wait for 3 seconds only ..."
	  echo " "

	  echo " All tests completed and passed"
	  echo " "


	  ############################ CMAQ Source Code #################################
	  cd ${WRF_FOLDER}/Downloads
	  git clone -b main https://github.com/USEPA/CMAQ.git  #clone CMAQ github to WRF_CMAQ Main Folder

	  cd CMAQ
	  cp bldit_project.csh bldit_project.csh.old     # Create backup of build project script

	  # Set path to where CMAQ will be built
	  sed -i '19s|/home/username/path|${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4|g' ${WRF_FOLDER}/Downloads/CMAQ/bldit_project.csh
	  # Build CMAQ Project
	  ./bldit_project.csh

	  cd ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4

	  cp config_cmaq.csh config_cmaq.csh.old        # Create backup of configure script

	  # Sed statements to configure the Build_WRFv${WRF_VERSION}-CMAQv5.4
	  sed -i '146s|netcdf_root_gcc|${WRF_FOLDER}/Libs/NETCDF|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/config_cmaq.csh
	  sed -i '147s|ioapi_root_gcc|${WRF_FOLDER}/Downloads/ioapi|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/config_cmaq.csh
	  sed -i '148s|WRF_ARCH|WRF_ARCH 34|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/config_cmaq.csh

	  # sed statements for paths in configure file
	  sed -i '151s|ioapi_inc_gcc|${WRF_FOLDER}/Downloads/ioapi/ioapi/fixed_src|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/config_cmaq.csh
	  sed -i '152s|ioapi_lib_gcc|${WRF_FOLDER}/Downloads/ioapi/$BIN|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/config_cmaq.csh
	  sed -i '153s|netcdf_lib_gcc |${WRF_FOLDER}/Libs/NETCDF/lib|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/config_cmaq.csh
	  sed -i '154s|netcdf_inc_gcc|${WRF_FOLDER}/Libs/NETCDF/include|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/config_cmaq.csh
	  sed -i '155s|netcdff_lib_gcc|${WRF_FOLDER}/Libs/NETCDF/lib|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/config_cmaq.csh
	  sed -i '156s|netcdff_inc_gcc|${WRF_FOLDER}/Libs/NETCDF/include|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/config_cmaq.csh
	  sed -i '157s|mpi_incl_gcc|${WRF_FOLDER}/Libs/MPICH|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/config_cmaq.csh
	  sed -i '158s|mpi_lib_gcc|${WRF_FOLDER}/Libs/MPICH|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/config_cmaq.csh


	  # compile the Chemistry Transport Model (CCTM) preprocess

	  cd ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/CCTM/scripts

	  cp bldit_cctm.csh bldit_cctm.csh.old  # make a back up copy of .csh script

	  # Sed statements for configuration
	  sed -i '74s|-j|-j $CPU_HALF_EVEN|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/CCTM/scripts/bldit_cctm.csh # set multicore to half of available cpus
	  sed -i '84s|#set|set|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/CCTM/scripts/bldit_cctm.csh # build two way
	  sed -i '103s|v4.4|v${WRF_VERSION}|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/CCTM/scripts/bldit_cctm.csh # change wrf version from 4.4 to ${WPS_VERSION}


	  sed -i '446s| if ( $? != 0 ) then| |g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/CCTM/scripts/bldit_cctm.csh
	  sed -i '447s|    set shaID   = "not_a_repo"| |g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/CCTM/scripts/bldit_cctm.csh
	  sed -i '448s| endif| |g' ${WRF_FOLDER}/Downloads/CMAQ//Build_WRFv${WRF_VERSION}-CMAQv5.4/CCTM/scripts/bldit_cctm.csh
	  sed -i '791s|  if ($? == 0) then| |g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/CCTM/scripts/bldit_cctm.csh
	  sed -i '793s|  endif| |g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/CCTM/scripts/bldit_cctm.csh
	  sed -i '822s|compile em_real|compile -j $CPU_HALF_EVEN em_real|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/CCTM/scripts/bldit_cctm.csh

	  # Build WRF-CMAQ
	  ./bldit_cctm.csh gcc 2>&1 | tee bldit.cctm.twoway.gcc.log

	  # Move built folder to top level directory
	  mv ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/CCTM/scripts/BLD_WRFv${WRF_VERSION}_CCTM_v54_gcc ${WRF_FOLDER}/WRFv${WRF_VERSION}_CMAQv5.4

	  export WRF_DIR=${WRF_FOLDER}/WRFv${WRF_VERSION}_CMAQv5.4



	    # IF statement to check that all files were created.
	  cd ${WRF_FOLDER}/WRFv${WRF_VERSION}_CMAQv5.4/main
	  n=$(ls ./*.exe | wc -l)
	  if (($n >= 3))
	   then
	   echo "All expected files created."
	   read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
	  else
	   echo "Missing one or more expected files. Exiting the script."
	   read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
	   exit
	  fi
	  echo " "

	  ############################WPSV${WPS_VERSION}#####################################
	  ## WPS v${WPS_VERSION}
	  ## Downloaded from git tagged releases
	  #Option 3 for gfortran and distributed memory
	  ########################################################################

	  cd ${WRF_FOLDER}/Downloads
	  wget -c https://github.com/wrf-model/WPS/archive/refs/tags/v${WPS_VERSION}.tar.gz -O WPS-${WPS_VERSION}.tar.gz
	  tar -xvzf WPS-${WPS_VERSION}.tar.gz -C ${WRF_FOLDER}/
	  cd ${WRF_FOLDER}/WPS-${WPS_VERSION}
	  ./clean -a

	  if [ ${auto_config} -eq 1 ]
	    then
	        echo 3 | ./configure 2>&1 | tee configure.log #Option 3 for gfortran and distributed memory
	      else
	        ./configure 2>&1 | tee configure.log  #Option 3 gfortran compiler with distributed memory
	  fi
	  ./compile 2>&1 | tee compile.wps.log


	  echo " "
	  # IF statement to check that all files were created.
	   cd ${WRF_FOLDER}/WPS-${WPS_VERSION}
	   n=$(ls ./*.exe | wc -l)
	   if (($n == 3))
	    then
	      echo "All expected files created."
	      read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
	   else
	     echo "Missing one or more expected files. Exiting the script."
	     read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
	     exit
	   fi
	   echo " "

	  ######################## WPS Domain Setup Tools ########################
	  ## DomainWizard
	  cd ${WRF_FOLDER}/Downloads
	  wget -c http://esrl.noaa.gov/gsd/wrfportal/domainwizard/WRFDomainWizard.zip
	  mkdir ${WRF_FOLDER}/WRFDomainWizard
	  unzip WRFDomainWizard.zip -d ${WRF_FOLDER}/WRFDomainWizard
	  chmod +x ${WRF_FOLDER}/WRFDomainWizard/run_DomainWizard

	  echo " "
	  ######################## WPF Portal Setup Tools ########################
	  ## WRFPortal
	  cd ${WRF_FOLDER}/Downloads
	  wget -c https://esrl.noaa.gov/gsd/wrfportal/portal/wrf-portal.zip
	  mkdir ${WRF_FOLDER}/WRFPortal
	  unzip wrf-portal.zip -d ${WRF_FOLDER}/WRFPortal
	  chmod +x ${WRF_FOLDER}/WRFPortal/runWRFPortal


	  echo " "

	  ######################## Static Geography Data inc/ Optional ####################
	  # http://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	  # These files are large so if you only need certain ones comment the others off
	  # All files downloaded and untarred is 200GB
	  # https://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	  #################################################################################
	  cd ${WRF_FOLDER}/Downloads
	  mkdir ${WRF_FOLDER}/GEOG
	  mkdir ${WRF_FOLDER}/GEOG/WPS_GEOG

	  echo " "
	  echo "Mandatory WRF Preprocessing System (WPS) Geographical Input Data Mandatory Fields Downloads"
	  echo " "
	  wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_high_res_mandatory.tar.gz
	  tar -xvzf geog_high_res_mandatory.tar.gz -C ${WRF_FOLDER}/GEOG/

	  wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_low_res_mandatory.tar.gz
	  tar -xvzf geog_low_res_mandatory.tar.gz -C ${WRF_FOLDER}/GEOG/
	  mv ${WRF_FOLDER}/GEOG/WPS_GEOG_LOW_RES/ ${WRF_FOLDER}/GEOG/WPS_GEOG


	  if [ ${WPS_Specific_Applications} -eq 1 ]
	    then
	      echo " "
	      echo " WPS Geographical Input Data Mandatory for Specific Applications"
	      echo " "

	      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_thompson28_chem.tar.gz
	      tar -xvzf geog_thompson28_chem.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

	      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_noahmp.tar.gz
	      tar -xvzf geog_noahmp.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

	      wget -c  https://www2.mmm.ucar.edu/wrf/src/wps_files/irrigation.tar.gz
	      tar -xvzf irrigation.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

	      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_px.tar.gz
	      tar -xvzf geog_px.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

	      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_urban.tar.gz
	      tar -xvzf geog_urban.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

	      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_ssib.tar.gz
	      tar -xvzf geog_ssib.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

	      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/lake_depth.tar.bz2
	      tar -xvf lake_depth.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

	      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/topobath_30s.tar.bz2
	      tar -xvf topobath_30s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

	      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/gsl_gwd.tar.bz2
	      tar -xvf gsl_gwd.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG
	  fi


	  if [ ${Optional_GEOG} -eq 1 ]
	    then
	      echo " "
	      echo "Optional WPS Geographical Input Data"
	      echo " "


	      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_older_than_2000.tar.gz
	      tar -xvzf geog_older_than_2000.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

	      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s_with_lakes.tar.gz
	      tar -xvzf modis_landuse_20class_15s_with_lakes.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

	      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_alt_lsm.tar.gz
	      tar -xvzf geog_alt_lsm.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

	      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/nlcd2006_ll_9s.tar.bz2
	      tar -xvf nlcd2006_ll_9s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

	      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/updated_Iceland_LU.tar.gz
	      tar -xvf updated_Iceland_LU.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

	      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s.tar.bz2
	      tar -xvf modis_landuse_20class_15s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG


	  fi
fi

if [ "$Centos_64bit_GNU" = "1" ] && [ "$CMAQ_PICK" = "1" ]; then

    #############################basic package managment############################
    echo $PASSWD | sudo -S yum install epel-release -y
    echo $PASSWD | sudo -S yum install dnf -y
    echo $PASSWD | sudo -S dnf install epel-release -y
    echo $PASSWD | sudo -S dnf install dnf -y
    echo $PASSWD | sudo -S dnf -y update
    echo $PASSWD | sudo -S dnf -y upgrade
    echo $PASSWD | sudo -S dnf -y install autoconf automake bzip2 bzip2-devel byacc cairo-devel cmake cpp curl curl-devel flex fontconfig fontconfig-devel gcc gcc-c++ gcc-gfortran git java-11-openjdk java-11-openjdk-devel ksh libjpeg libjpeg-devel libX11 libX11-devel libXaw libXaw-devel libXext-devel libXmu libXmu-devel libXrender libXrender-devel libXt libXt-devel libxml2 libxml2-devel libXmu  libXmu-devel libgeotiff libgeotiff-devel libtiff libtiff-devel m4  nfs-utils perl pkgconfig pixman  pixman-devel python3 python3-devel tcsh time unzip wget
    echo $PASSWD | sudo -S  dnf -y groupinstall "Development Tools"
    echo $PASSWD | sudo -S dnf -y update
    echo $PASSWD | sudo -S dnf -y upgrade

    echo " "
  ##############################Directory Listing############################
  export HOME=`cd;pwd`

  mkdir $HOME/WRF_CMAQ
  export WRF_FOLDER=$HOME/WRF_CMAQ
  cd ${WRF_FOLDER}/
  mkdir Downloads
  mkdir Libs
  export DIR=${WRF_FOLDER}/Libs
  mkdir Libs/grib2
  mkdir Libs/NETCDF
  mkdir Libs/MPICH
  mkdir -p Tests/Environment
  mkdir -p Tests/Compatibility

  echo " "
  #############################Core Management####################################

  export CPU_CORE=$(nproc)                                             # number of available threads on system
  export CPU_6CORE="6"
  export CPU_HALF=$(($CPU_CORE / 2))                                   #half of availble cores on system
  export CPU_HALF_EVEN=$(( $CPU_HALF - ($CPU_HALF % 2) ))              #Forces CPU cores to even number to avoid partial core export. ie 7 cores would be 3.5 cores.

  if [ $CPU_CORE -le $CPU_6CORE ]                                  #If statement for low core systems.  Forces computers to only use 1 core if there are 4 cores or less on the system.
  then
    export CPU_HALF_EVEN="2"
  else
    export CPU_HALF_EVEN=$(( $CPU_HALF - ($CPU_HALF % 2) ))
  fi


  echo "##########################################"
  echo "Number of Threads being used $CPU_HALF_EVEN"
  echo "##########################################"


  echo " "
  ##############################Downloading Libraries############################

  cd Downloads
  wget -c https://github.com/madler/zlib/archive/refs/tags/v$Zlib_Version.tar.gz
  wget -c https://github.com/HDFGroup/hdf5/archive/refs/tags/hdf5-$HDF5_Version.tar.gz
  wget -c https://github.com/Unidata/netcdf-c/archive/refs/tags/v$Netcdf_C_Version.tar.gz
  wget -c https://github.com/Unidata/netcdf-fortran/archive/refs/tags/v$Netcdf_Fortran_Version.tar.gz
  wget -c https://download.sourceforge.net/libpng/libpng-$Libpng_Version.tar.gz
  wget -c https://www.ece.uvic.ca/~frodo/jasper/software/jasper-$Jasper_Version.zip
  wget -c https://github.com/pmodels/mpich/releases/download/v$Mpich_Version/mpich-$Mpich_Version.tar.gz
  wget -c  https://parallel-netcdf.github.io/Release/pnetcdf-$Pnetcdf_Version.tar.gz
  wget -c https://sourceforge.net/projects/opengrads/files/grads2/2.2.1.oga.1/Linux%20%2864%20Bits%29/opengrads-2.2.1.oga.1-bundle-x86_64-pc-linux-gnu-glibc_2.17.tar.gz
  wget -c https://www.cmascenter.org/ioapi/download/ioapi-3.2.tar.gz



  echo " "
  ####################################Compilers#####################################
        export CC=gcc
	export CXX=g++
	export FC=gfortran
	export F77=gfortran
	export CFLAGS="-fPIC -fPIE -O3"

	#IF statement for GNU compiler issue
	export GCC_VERSION=$(gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		export fallow_argument=-fallow-argument-mismatch
		export boz_argument=-fallow-invalid-boz
	else
		export fallow_argument=
		export boz_argument=
	fi

	export FFLAGS="$fallow_argument -m64"
	export FCFLAGS="$fallow_argument -m64"

	echo "##########################################"
	echo "FFLAGS = $FFLAGS"
	echo "FCFLAGS = $FCFLAGS"
	echo "CFLAGS = $CFLAGS"
	echo "##########################################"

	echo " "
  #############################zlib############################
	#Uncalling compilers due to comfigure issue with zlib$Zlib_Version
	#With CC & CXX definied ./configure uses different compiler Flags

	cd ${WRF_FOLDER}/Downloads
	tar -xvzf v$Zlib_Version.tar.gz
	cd zlib-$Zlib_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log
	./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	make -j $CPU_HALF_EVEN check

	echo " "
	##############################MPICH############################
	#F90= due to compiler issues with mpich install
	cd ${WRF_FOLDER}/Downloads
	tar -xvzf mpich-$Mpich_Version.tar.gz
	cd mpich-$Mpich_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	F90= ./configure --prefix=$DIR/MPICH --with-device=ch3 FFLAGS=$fallow_argument FCFLAGS=$fallow_argument 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	# make check

	export PATH=$DIR/MPICH/bin:$PATH
	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx

	echo " "
	#############################libpng############################
	cd ${WRF_FOLDER}/Downloads
	export LDFLAGS=-L$DIR/grib2/lib
	export CPPFLAGS=-I$DIR/grib2/include
	tar -xvzf libpng-$Libpng_Version.tar.gz
	cd libpng-$Libpng_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make -j $CPU_HALF_EVEN check
	echo " "
	#############################JasPer############################
	cd ${WRF_FOLDER}/Downloads
	unzip jasper-$Jasper_Version.zip
	cd jasper-$Jasper_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	./configure --prefix=$DIR/grib2
	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make -j $CPU_HALF_EVEN check

	export JASPERLIB=$DIR/grib2/lib
	export JASPERINC=$DIR/grib2/include

	echo " "
	#############################hdf5 library for netcdf4 functionality############################
	cd ${WRF_FOLDER}/Downloads
	tar -xvzf hdf5-$HDF5_Version.tar.gz
	cd hdf5-hdf5-$HDF5_Version
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 --with-zlib=$DIR/grib2 --enable-hl --enable-fortran --enable-parallel 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make -j $CPU_HALF_EVEN check

	export HDF5=$DIR/grib2
	export PHDF5=$DIR/grib2
	export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH

	echo " "
	#############################Install Parallel-netCDF##############################
	#Make file created with half of available cpu cores
	#Hard path for MPI added
	##################################################################################
	cd ${WRF_FOLDER}/Downloads
	tar -xvzf pnetcdf-$Pnetcdf_Version.tar.gz
	cd pnetcdf-$Pnetcdf_Version
	export MPIFC=mpifort
	export MPIF77=mpifort
	export MPIF90=mpifort
	export MPICC=mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx
	autoreconf -i -f 2>&1 | tee autoreconf.log
	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX ./configure --prefix=$DIR/grib2 --enable-shared --enable-static 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make -j $CPU_HALF_EVEN check

	export PNETCDF=$DIR/grib2

        echo " "

	##############################Install NETCDF C Library############################
	cd ${WRF_FOLDER}/Downloads
	tar -xzvf v$Netcdf_C_Version.tar.gz
	cd netcdf-c-$Netcdf_C_Version/
	export CPPFLAGS=-I$DIR/grib2/include
	export LDFLAGS=-L$DIR/grib2/lib
	export LIBS="-lhdf5_hl -lhdf5 -lz -lcurl -lgfortran -lgcc -lm -ldl -lpnetcdf"
	echo $CFLAGS
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --disable-dap --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-pnetcdf --enable-cdf5 --enable-parallel-tests 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make -j $CPU_HALF_EVEN check

	export PATH=$DIR/NETCDF/bin:$PATH
	export NETCDF=$DIR/NETCDF
	echo " "
	##############################NetCDF fortran library############################
	cd ${WRF_FOLDER}/Downloads
	tar -xvzf v$Netcdf_Fortran_Version.tar.gz
	cd netcdf-fortran-$Netcdf_Fortran_Version/
	export LD_LIBRARY_PATH=$DIR/NETCDF/lib:$LD_LIBRARY_PATH
	export CPPFLAGS="-I$DIR/NETCDF/include -I$DIR/grib2/include"
	export LDFLAGS="-L$DIR/NETCDF/lib -L$DIR/grib2/lib"
	export LIBS="-lnetcdf -lpnetcdf -lcurl -lhdf5_hl -lhdf5 -lz -lm -ldl -lgcc -lgfortran"
	autoreconf -i -f 2>&1 | tee autoreconf.log
        echo $CFLAGS
	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-parallel-tests --enable-hdf5 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make -j $CPU_HALF_EVEN check

	echo " "


  ###############################  I/O API  ###################################

  cd ${WRF_FOLDER}/Downloads
  mkdir ioapi
  cd ioapi
  tar -xzvf ${WRF_FOLDER}/Downloads/ioapi-3.2.tar.gz

  #set gnu version
  export BIN=Linux2_x86_64gfort10
  export CPLMODE=nocpl
  mkdir $BIN

  #Link netcdf and grib lib folders to ioapi
  ln -sf ${WRF_FOLDER}/Libs/NETCDF/lib/* ${WRF_FOLDER}/Downloads/ioapi/$BIN
  ln -sf ${WRF_FOLDER}/Libs/grib2/lib/* ${WRF_FOLDER}/Downloads/ioapi/$BIN

  #copy makefiles from ioapi directory to source makefile
  #cp ${WRF_FOLDER}/Downloads/ioapi/ioapi/Makefile.nocpl ${WRF_FOLDER}/Downloads/ioapi/ioapi/Makefile
  #cp ${WRF_FOLDER}/Downloads/ioapi/m3tools/Makefile.nocpl ${WRF_FOLDER}/Downloads/ioapi/m3tools/Makefile
  cp ${WRF_FOLDER}/Downloads/ioapi/Makefile.template ${WRF_FOLDER}/Downloads/ioapi/Makefile

  # Add proper sed statements needed for gfortran
   sed -i '193s|-lnetcdff -lnetcdf| -lnetcdff -lnetcdf -lhdf5hl_fortran -lhdf5_fortran -lhdf5_hl -lhdf5 -ljpeg -lm -lz -lcurl|g' ${WRF_FOLDER}/Downloads/ioapi/Makefile
   sed -i '210s|${IODIR}/Makefile ${TOOLDIR}/Makefile| |g' ${WRF_FOLDER}/Downloads/ioapi/Makefile


   #Remove openmnp flags from Makefile
   sed -i '30s/ -fopenmp//g' ${WRF_FOLDER}/Downloads/ioapi/ioapi/Makeinclude.$BIN
   sed -i '31s/ -fopenmp//g' ${WRF_FOLDER}/Downloads/ioapi/ioapi/Makeinclude.$BIN


   # Build IOAPI
   make configure 2>&1 | tee configure.log
   make -j $CPU_HALF_EVEN 2>&1 | tee make.log

   #If statement to check that libioapi.a & m3xtract exist

   cd ${WRF_FOLDER}/Downloads/ioapi/$BIN
   n=$(ls -lrt libioapi.a | wc -l)
   m=$(ls -rlt m3xtract | wc -l)
     if (( ( $n == 1 ) && ( $m == 1) ))
      then
        echo "All expected files created."

     else
       echo "Missing one or more expected files. Exiting the script."
       read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
       exit
     fi
    echo " "

    echo " "

    mv ${WRF_FOLDER}/Downloads/ioapi/$BIN ${WRF_FOLDER}/Downloads/ioapi/Linux2_x86_64gfort
    export BIN=Linux2_x86_64gfort
  #################################### System Environment Tests ##############

  cd ${WRF_FOLDER}/Downloads
  wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_NETCDF_MPI_tests.tar
  wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_tests.tar

  tar -xvf Fortran_C_tests.tar -C ${WRF_FOLDER}/Tests/Environment
  tar -xvf Fortran_C_NETCDF_MPI_tests.tar -C ${WRF_FOLDER}/Tests/Compatibility

  export one="1"
  echo " "
  ############## Testing Environment #####

  cd ${WRF_FOLDER}/Tests/Environment

  cp ${NETCDF}/include/netcdf.inc .

  echo " "
  echo " "
  echo "Environment Testing "
  echo "Test 1"
  $FC TEST_1_fortran_only_fixed.f
  ./a.out | tee env_test1.txt
  export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test1.txt | awk  '{print$1}')
   if [ $TEST_PASS -ge 1 ]
      then
        echo "Enviroment Test 1 Passed"
      else
        echo "Environment Compiler Test 1 Failed"
        exit
    fi
  read -r -t 3 -p "I am going to wait for 3 seconds only ..."

  echo " "
  echo "Test 2"
  $FC TEST_2_fortran_only_free.f90
  ./a.out | tee env_test2.txt
  export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test2.txt | awk  '{print$1}')
   if [ $TEST_PASS -ge 1 ]
      then
        echo "Enviroment Test 2 Passed"
      else
        echo "Environment Compiler Test 2 Failed"
        exit
    fi
  echo " "
  read -r -t 3 -p "I am going to wait for 3 seconds only ..."

  echo " "
  echo "Test 3"
  $CC TEST_3_c_only.c
  ./a.out | tee env_test3.txt
  export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test3.txt | awk  '{print$1}')
   if [ $TEST_PASS -ge 1 ]
      then
        echo "Enviroment Test 3 Passed"
      else
        echo "Environment Compiler Test 3 Failed"
        exit
    fi
  echo " "
  read -r -t 3 -p "I am going to wait for 3 seconds only ..."

  echo " "
  echo "Test 4"
  $CC -c -m64 TEST_4_fortran+c_c.c
  $FC -c -m64 TEST_4_fortran+c_f.f90
  $FC -m64 TEST_4_fortran+c_f.o TEST_4_fortran+c_c.o
  ./a.out | tee env_test4.txt
  export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test4.txt | awk  '{print$1}')
   if [ $TEST_PASS -ge 1 ]
      then
        echo "Enviroment Test 4 Passed"
      else
        echo "Environment Compiler Test 4 Failed"
        exit
    fi
  echo " "
  read -r -t 3 -p "I am going to wait for 3 seconds only ..."

  echo " "
  ############## Testing Environment #####

  cd ${WRF_FOLDER}/Tests/Compatibility

  cp ${NETCDF}/include/netcdf.inc .

  echo " "
  echo " "
  echo "Library Compatibility Tests "
  echo "Test 1"
  $FC -c 01_fortran+c+netcdf_f.f
  $CC -c 01_fortran+c+netcdf_c.c
  $FC 01_fortran+c+netcdf_f.o 01_fortran+c+netcdf_c.o \
       -L${NETCDF}/lib -lnetcdff -lnetcdf

       ./a.out | tee comp_test1.txt
       export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test1.txt | awk  '{print$1}')
        if [ $TEST_PASS -ge 1 ]
           then
             echo "Compatibility Test 1 Passed"
           else
             echo "Compatibility Compiler Test 1 Failed"
             exit
         fi
       echo " "
       read -r -t 3 -p "I am going to wait for 3 seconds only ..."

  echo " "

  echo "Test 2"
  $MPIFC -c 02_fortran+c+netcdf+mpi_f.f
  $MPICC -c 02_fortran+c+netcdf+mpi_c.c
  $MPIFC 02_fortran+c+netcdf+mpi_f.o \
  02_fortran+c+netcdf+mpi_c.o \
       -L${NETCDF}/lib -lnetcdff -lnetcdf

  $DIR/MPICH/bin/mpirun ./a.out | tee comp_test2.txt
  export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test2.txt | awk  '{print$1}')
   if [ $TEST_PASS -ge 1 ]
      then
        echo "Compatibility Test 2 Passed"
      else
        echo "Compatibility Compiler Test 2 Failed"
        exit
    fi
  echo " "
  read -r -t 3 -p "I am going to wait for 3 seconds only ..."
  echo " "

  echo " All tests completed and passed"
  echo " "


  ############################ CMAQ Source Code #################################
  cd ${WRF_FOLDER}/Downloads
  git clone -b main https://github.com/USEPA/CMAQ.git  #clone CMAQ github to WRF_CMAQ Main Folder

  cd CMAQ
  cp bldit_project.csh bldit_project.csh.old     # Create backup of build project script

  # Set path to where CMAQ will be built
  sed -i '19s|/home/username/path|${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4|g' ${WRF_FOLDER}/Downloads/CMAQ/bldit_project.csh
  # Build CMAQ Project
  ./bldit_project.csh

  cd ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4

  cp config_cmaq.csh config_cmaq.csh.old        # Create backup of configure script

  # Sed statements to configure the Build_WRFv${WRF_VERSION}-CMAQv5.4
  sed -i '146s|netcdf_root_gcc|${WRF_FOLDER}/Libs/NETCDF|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/config_cmaq.csh
  sed -i '147s|ioapi_root_gcc|${WRF_FOLDER}/Downloads/ioapi|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/config_cmaq.csh
  sed -i '148s|WRF_ARCH|WRF_ARCH 34|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/config_cmaq.csh

  # sed statements for paths in configure file
  sed -i '151s|ioapi_inc_gcc|${WRF_FOLDER}/Downloads/ioapi/ioapi/fixed_src|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/config_cmaq.csh
  sed -i '152s|ioapi_lib_gcc|${WRF_FOLDER}/Downloads/ioapi/$BIN|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/config_cmaq.csh
  sed -i '153s|netcdf_lib_gcc |${WRF_FOLDER}/Libs/NETCDF/lib|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/config_cmaq.csh
  sed -i '154s|netcdf_inc_gcc|${WRF_FOLDER}/Libs/NETCDF/include|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/config_cmaq.csh
  sed -i '155s|netcdff_lib_gcc|${WRF_FOLDER}/Libs/NETCDF/lib|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/config_cmaq.csh
  sed -i '156s|netcdff_inc_gcc|${WRF_FOLDER}/Libs/NETCDF/include|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/config_cmaq.csh
  sed -i '157s|mpi_incl_gcc|${WRF_FOLDER}/Libs/MPICH|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/config_cmaq.csh
  sed -i '158s|mpi_lib_gcc|${WRF_FOLDER}/Libs/MPICH|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/config_cmaq.csh


  # compile the Chemistry Transport Model (CCTM) preprocess

  cd ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/CCTM/scripts

  cp bldit_cctm.csh bldit_cctm.csh.old  # make a back up copy of .csh script

  # Sed statements for configuration
  sed -i '74s|-j|-j $CPU_HALF_EVEN|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/CCTM/scripts/bldit_cctm.csh # set multicore to half of available cpus
  sed -i '84s|#set|set|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/CCTM/scripts/bldit_cctm.csh # build two way
  sed -i '103s|v4.4|v${WRF_VERSION}|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/CCTM/scripts/bldit_cctm.csh # change wrf version from 4.4 to ${WPS_VERSION}


  sed -i '446s| if ( $? != 0 ) then| |g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/CCTM/scripts/bldit_cctm.csh
  sed -i '447s|    set shaID   = "not_a_repo"| |g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/CCTM/scripts/bldit_cctm.csh
  sed -i '448s| endif| |g' ${WRF_FOLDER}/Downloads/CMAQ//Build_WRFv${WRF_VERSION}-CMAQv5.4/CCTM/scripts/bldit_cctm.csh
  sed -i '791s|  if ($? == 0) then| |g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/CCTM/scripts/bldit_cctm.csh
  sed -i '793s|  endif| |g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/CCTM/scripts/bldit_cctm.csh
  sed -i '822s|compile em_real|compile -j $CPU_HALF_EVEN em_real|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/CCTM/scripts/bldit_cctm.csh

  # Build WRF-CMAQ
  ./bldit_cctm.csh gcc 2>&1 | tee bldit.cctm.twoway.gcc.log

  # Move built folder to top level directory
  mv ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/CCTM/scripts/BLD_WRFv${WRF_VERSION}_CCTM_v54_gcc ${WRF_FOLDER}/WRFv${WRF_VERSION}_CMAQv5.4

  export WRF_DIR=${WRF_FOLDER}/WRFv${WRF_VERSION}_CMAQv5.4



    # IF statement to check that all files were created.
  cd ${WRF_FOLDER}/WRFv${WRF_VERSION}_CMAQv5.4/main
  n=$(ls ./*.exe | wc -l)
  if (($n >= 3))
   then
   echo "All expected files created."
   read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
  else
   echo "Missing one or more expected files. Exiting the script."
   read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
   exit
  fi
  echo " "


  ############################WPSV${WPS_VERSION}#####################################
  ## WPS v${WPS_VERSION}
  ## Downloaded from git tagged releases
  #Option 3 for gfortran and distributed memory
  ########################################################################

  cd ${WRF_FOLDER}/Downloads
  wget -c https://github.com/wrf-model/WPS/archive/refs/tags/v${WPS_VERSION}.tar.gz -O WPS-${WPS_VERSION}.tar.gz
  tar -xvzf WPS-${WPS_VERSION}.tar.gz -C ${WRF_FOLDER}/
  cd ${WRF_FOLDER}/WPS-${WPS_VERSION}
  ./clean -a

  if [ ${auto_config} -eq 1 ]
    then
        echo 3 | ./configure 2>&1 | tee configure.log #Option 3 for gfortran and distributed memory
      else
        ./configure 2>&1 | tee configure.log  #Option 3 gfortran compiler with distributed memory
  fi
  ./compile 2>&1 | tee compile.wps.log


  echo " "
  # IF statement to check that all files were created.
   cd ${WRF_FOLDER}/WPS-${WPS_VERSION}
   n=$(ls ./*.exe | wc -l)
   if (($n == 3))
    then
      echo "All expected files created."
      read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
   else
     echo "Missing one or more expected files. Exiting the script."
     read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
     exit
   fi
   echo " "

  ######################## WPS Domain Setup Tools ########################
  ## DomainWizard
  cd ${WRF_FOLDER}/Downloads
  wget -c http://esrl.noaa.gov/gsd/wrfportal/domainwizard/WRFDomainWizard.zip
  mkdir ${WRF_FOLDER}/WRFDomainWizard
  unzip WRFDomainWizard.zip -d ${WRF_FOLDER}/WRFDomainWizard
  chmod +x ${WRF_FOLDER}/WRFDomainWizard/run_DomainWizard

  echo " "
  ######################## WPF Portal Setup Tools ########################
  ## WRFPortal
  cd ${WRF_FOLDER}/Downloads
  wget -c https://esrl.noaa.gov/gsd/wrfportal/portal/wrf-portal.zip
  mkdir ${WRF_FOLDER}/WRFPortal
  unzip wrf-portal.zip -d ${WRF_FOLDER}/WRFPortal
  chmod +x ${WRF_FOLDER}/WRFPortal/runWRFPortal


  echo " "

  ######################## Static Geography Data inc/ Optional ####################
  # http://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
  # These files are large so if you only need certain ones comment the others off
  # All files downloaded and untarred is 200GB
  # https://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
  #################################################################################
  cd ${WRF_FOLDER}/Downloads
  mkdir ${WRF_FOLDER}/GEOG
  mkdir ${WRF_FOLDER}/GEOG/WPS_GEOG

  echo " "
  echo "Mandatory WRF Preprocessing System (WPS) Geographical Input Data Mandatory Fields Downloads"
  echo " "
  wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_high_res_mandatory.tar.gz
  tar -xvzf geog_high_res_mandatory.tar.gz -C ${WRF_FOLDER}/GEOG/

  wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_low_res_mandatory.tar.gz
  tar -xvzf geog_low_res_mandatory.tar.gz -C ${WRF_FOLDER}/GEOG/
  mv ${WRF_FOLDER}/GEOG/WPS_GEOG_LOW_RES/ ${WRF_FOLDER}/GEOG/WPS_GEOG


  if [ ${WPS_Specific_Applications} -eq 1 ]
    then
      echo " "
      echo " WPS Geographical Input Data Mandatory for Specific Applications"
      echo " "

      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_thompson28_chem.tar.gz
      tar -xvzf geog_thompson28_chem.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_noahmp.tar.gz
      tar -xvzf geog_noahmp.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

      wget -c  https://www2.mmm.ucar.edu/wrf/src/wps_files/irrigation.tar.gz
      tar -xvzf irrigation.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_px.tar.gz
      tar -xvzf geog_px.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_urban.tar.gz
      tar -xvzf geog_urban.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_ssib.tar.gz
      tar -xvzf geog_ssib.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/lake_depth.tar.bz2
      tar -xvf lake_depth.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/topobath_30s.tar.bz2
      tar -xvf topobath_30s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/gsl_gwd.tar.bz2
      tar -xvf gsl_gwd.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG
  fi


  if [ ${Optional_GEOG} -eq 1 ]
    then
      echo " "
      echo "Optional WPS Geographical Input Data"
      echo " "


      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_older_than_2000.tar.gz
      tar -xvzf geog_older_than_2000.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s_with_lakes.tar.gz
      tar -xvzf modis_landuse_20class_15s_with_lakes.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_alt_lsm.tar.gz
      tar -xvzf geog_alt_lsm.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/nlcd2006_ll_9s.tar.bz2
      tar -xvf nlcd2006_ll_9s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/updated_Iceland_LU.tar.gz
      tar -xvf updated_Iceland_LU.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s.tar.bz2
      tar -xvf modis_landuse_20class_15s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG


  fi
fi

if [ "$Centos_64bit_GNU" = "2" ] && [ "$CMAQ_PICK" = "1" ]; then
  #############################basic package managment############################
    echo "old version of GNU detected"
    echo $PASSWD | sudo -S yum install epel-release -y
    echo $PASSWD | sudo -S yum install centos-release-scl -y
    echo $PASSWD | sudo -S yum clean all
    echo $PASSWD | sudo -S yum remove devtoolset-11*
    echo $PASSWD | sudo -S yum install devtoolset-11
    echo $PASSWD | sudo -S yum install devtoolset-11-\* -y
    echo $PASSWD | sudo -S yum -y update
    echo $PASSWD | sudo -S yum -y upgrade

    source /opt/rh/devtoolset-11/enable
    gcc --version
    echo $PASSWD | sudo -S yum install epel-release -y
    echo $PASSWD | sudo -S yum install dnf -y
    echo $PASSWD | sudo -S dnf install epel-release -y
    echo $PASSWD | sudo -S dnf install dnf -y
    echo $PASSWD | sudo -S dnf -y update
    echo $PASSWD | sudo -S dnf -y upgrade
    echo $PASSWD | sudo -S dnf -y install autoconf automake bzip2 bzip2-devel byacc cairo-devel cmake cpp curl curl-devel flex fontconfig fontconfig-devel gcc gcc-c++ gcc-gfortran git java-11-openjdk java-11-openjdk-devel ksh libjpeg libjpeg-devel libX11 libX11-devel libXaw libXaw-devel libXext-devel libXmu libXmu-devel libXrender libXrender-devel libXt libXt-devel libxml2 libxml2-devel libXmu  libXmu-devel libgeotiff libgeotiff-devel libtiff libtiff-devel m4  nfs-utils perl pkgconfig pixman  pixman-devel python3 python3-devel tcsh time unzip wget
    echo $PASSWD | sudo -S  dnf -y groupinstall "Development Tools"
    echo $PASSWD | sudo -S dnf -y update
    echo $PASSWD | sudo -S dnf -y upgrade
    source /opt/rh/devtoolset-11/enable
    echo " "
  ##############################Directory Listing############################
  export HOME=`cd;pwd`

  mkdir $HOME/WRF_CMAQ
  export WRF_FOLDER=$HOME/WRF_CMAQ
  cd ${WRF_FOLDER}/
  mkdir Downloads
  mkdir Libs
  export DIR=${WRF_FOLDER}/Libs
  mkdir Libs/grib2
  mkdir Libs/NETCDF
  mkdir Libs/MPICH
  mkdir -p Tests/Environment
  mkdir -p Tests/Compatibility

  echo " "
  #############################Core Management####################################

  export CPU_CORE=$(nproc)                                             # number of available threads on system
  export CPU_6CORE="6"
  export CPU_HALF=$(($CPU_CORE / 2))                                   #half of availble cores on system
  export CPU_HALF_EVEN=$(( $CPU_HALF - ($CPU_HALF % 2) ))              #Forces CPU cores to even number to avoid partial core export. ie 7 cores would be 3.5 cores.

  if [ $CPU_CORE -le $CPU_6CORE ]                                  #If statement for low core systems.  Forces computers to only use 1 core if there are 4 cores or less on the system.
  then
    export CPU_HALF_EVEN="2"
  else
    export CPU_HALF_EVEN=$(( $CPU_HALF - ($CPU_HALF % 2) ))
  fi


  echo "##########################################"
  echo "Number of Threads being used $CPU_HALF_EVEN"
  echo "##########################################"


  echo " "
  ##############################Downloading Libraries############################

  cd Downloads
  wget -c https://github.com/madler/zlib/archive/refs/tags/v$Zlib_Version.tar.gz
  wget -c https://github.com/HDFGroup/hdf5/archive/refs/tags/hdf5-$HDF5_Version.tar.gz
  wget -c https://github.com/Unidata/netcdf-c/archive/refs/tags/v$Netcdf_C_Version.tar.gz
  wget -c https://github.com/Unidata/netcdf-fortran/archive/refs/tags/v$Netcdf_Fortran_Version.tar.gz
  wget -c https://download.sourceforge.net/libpng/libpng-$Libpng_Version.tar.gz
  wget -c https://www.ece.uvic.ca/~frodo/jasper/software/jasper-$Jasper_Version.zip
  wget -c https://github.com/pmodels/mpich/releases/download/v$Mpich_Version/mpich-$Mpich_Version.tar.gz
  wget -c  https://parallel-netcdf.github.io/Release/pnetcdf-$Pnetcdf_Version.tar.gz
  wget -c https://sourceforge.net/projects/opengrads/files/grads2/2.2.1.oga.1/Linux%20%2864%20Bits%29/opengrads-2.2.1.oga.1-bundle-x86_64-pc-linux-gnu-glibc_2.17.tar.gz
  wget -c https://www.cmascenter.org/ioapi/download/ioapi-3.2.tar.gz



  echo " "
  ####################################Compilers#####################################
        export CC=gcc
	export CXX=g++
	export FC=gfortran
	export F77=gfortran
	export CFLAGS="-fPIC -fPIE -O3"

	#IF statement for GNU compiler issue
	export GCC_VERSION=$(gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		export fallow_argument=-fallow-argument-mismatch
		export boz_argument=-fallow-invalid-boz
	else
		export fallow_argument=
		export boz_argument=
	fi

	export FFLAGS="$fallow_argument -m64"
	export FCFLAGS="$fallow_argument -m64"

	echo "##########################################"
	echo "FFLAGS = $FFLAGS"
	echo "FCFLAGS = $FCFLAGS"
	echo "CFLAGS = $CFLAGS"
	echo "##########################################"

	echo " "
  #############################zlib############################
	#Uncalling compilers due to comfigure issue with zlib$Zlib_Version
	#With CC & CXX definied ./configure uses different compiler Flags

	cd ${WRF_FOLDER}/Downloads
	tar -xvzf v$Zlib_Version.tar.gz
	cd zlib-$Zlib_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log
	./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	make -j $CPU_HALF_EVEN check

	echo " "
	##############################MPICH############################
	#F90= due to compiler issues with mpich install
	cd ${WRF_FOLDER}/Downloads
	tar -xvzf mpich-$Mpich_Version.tar.gz
	cd mpich-$Mpich_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	F90= ./configure --prefix=$DIR/MPICH --with-device=ch3 FFLAGS=$fallow_argument FCFLAGS=$fallow_argument 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	# make check

	export PATH=$DIR/MPICH/bin:$PATH
	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx

	echo " "
	#############################libpng############################
	cd ${WRF_FOLDER}/Downloads
	export LDFLAGS=-L$DIR/grib2/lib
	export CPPFLAGS=-I$DIR/grib2/include
	tar -xvzf libpng-$Libpng_Version.tar.gz
	cd libpng-$Libpng_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	make -j $CPU_HALF_EVEN check
	echo " "
	#############################JasPer############################
	cd ${WRF_FOLDER}/Downloads
	unzip jasper-$Jasper_Version.zip
	cd jasper-$Jasper_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	./configure --prefix=$DIR/grib2
	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	make -j $CPU_HALF_EVEN check

	export JASPERLIB=$DIR/grib2/lib
	export JASPERINC=$DIR/grib2/include

	echo " "
	#############################hdf5 library for netcdf4 functionality############################
	cd ${WRF_FOLDER}/Downloads
	tar -xvzf hdf5-$HDF5_Version.tar.gz
	cd hdf5-hdf5-$HDF5_Version
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 --with-zlib=$DIR/grib2 --enable-hl --enable-fortran --enable-parallel 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make -j $CPU_HALF_EVEN check

	export HDF5=$DIR/grib2
	export PHDF5=$DIR/grib2
	export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH

	echo " "
	#############################Install Parallel-netCDF##############################
	#Make file created with half of available cpu cores
	#Hard path for MPI added
	##################################################################################
	cd ${WRF_FOLDER}/Downloads
	tar -xvzf pnetcdf-$Pnetcdf_Version.tar.gz
	cd pnetcdf-$Pnetcdf_Version
	export MPIFC=mpifort
	export MPIF77=mpifort
	export MPIF90=mpifort
	export MPICC=mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx
	autoreconf -i -f 2>&1 | tee autoreconf.log
	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX ./configure --prefix=$DIR/grib2 --enable-shared --enable-static 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make -j $CPU_HALF_EVEN check

	export PNETCDF=$DIR/grib2

        echo " "

	##############################Install NETCDF C Library############################
	cd ${WRF_FOLDER}/Downloads
	tar -xzvf v$Netcdf_C_Version.tar.gz
	cd netcdf-c-$Netcdf_C_Version/
	export CPPFLAGS=-I$DIR/grib2/include
	export LDFLAGS=-L$DIR/grib2/lib
	export LIBS="-lhdf5_hl -lhdf5 -lz -lcurl -lgfortran -lgcc -lm -ldl -lpnetcdf"
	echo $CFLAGS
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --disable-dap --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-pnetcdf --enable-cdf5 --enable-parallel-tests 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	make -j $CPU_HALF_EVEN check

	export PATH=$DIR/NETCDF/bin:$PATH
	export NETCDF=$DIR/NETCDF
	echo " "
	##############################NetCDF fortran library############################
	cd ${WRF_FOLDER}/Downloads
	tar -xvzf v$Netcdf_Fortran_Version.tar.gz
	cd netcdf-fortran-$Netcdf_Fortran_Version/
	export LD_LIBRARY_PATH=$DIR/NETCDF/lib:$LD_LIBRARY_PATH
	export CPPFLAGS="-I$DIR/NETCDF/include -I$DIR/grib2/include"
	export LDFLAGS="-L$DIR/NETCDF/lib -L$DIR/grib2/lib"
	export LIBS="-lnetcdf -lpnetcdf -lcurl -lhdf5_hl -lhdf5 -lz -lm -ldl -lgcc -lgfortran"
	autoreconf -i -f 2>&1 | tee autoreconf.log
        echo $CFLAGS
	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-parallel-tests --enable-hdf5 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make -j $CPU_HALF_EVEN check

	echo " "


  ###############################  I/O API  ###################################

  cd ${WRF_FOLDER}/Downloads
  mkdir ioapi
  cd ioapi
  tar -xzvf ${WRF_FOLDER}/Downloads/ioapi-3.2.tar.gz

  #set gnu version
  export BIN=Linux2_x86_64gfort10
  export CPLMODE=nocpl
  mkdir $BIN

  #Link netcdf and grib lib folders to ioapi
  ln -sf ${WRF_FOLDER}/Libs/NETCDF/lib/* ${WRF_FOLDER}/Downloads/ioapi/$BIN
  ln -sf ${WRF_FOLDER}/Libs/grib2/lib/* ${WRF_FOLDER}/Downloads/ioapi/$BIN

  #copy makefiles from ioapi directory to source makefile
  #cp ${WRF_FOLDER}/Downloads/ioapi/ioapi/Makefile.nocpl ${WRF_FOLDER}/Downloads/ioapi/ioapi/Makefile
  #cp ${WRF_FOLDER}/Downloads/ioapi/m3tools/Makefile.nocpl ${WRF_FOLDER}/Downloads/ioapi/m3tools/Makefile
  cp ${WRF_FOLDER}/Downloads/ioapi/Makefile.template ${WRF_FOLDER}/Downloads/ioapi/Makefile

  # Add proper sed statements needed for gfortran
   sed -i '193s|-lnetcdff -lnetcdf| -lnetcdff -lnetcdf -lhdf5hl_fortran -lhdf5_fortran -lhdf5_hl -lhdf5 -ljpeg -lm -lz -lcurl|g' ${WRF_FOLDER}/Downloads/ioapi/Makefile
   sed -i '210s|${IODIR}/Makefile ${TOOLDIR}/Makefile| |g' ${WRF_FOLDER}/Downloads/ioapi/Makefile


   #Remove openmnp flags from Makefile
   sed -i '30s/ -fopenmp//g' ${WRF_FOLDER}/Downloads/ioapi/ioapi/Makeinclude.$BIN
   sed -i '31s/ -fopenmp//g' ${WRF_FOLDER}/Downloads/ioapi/ioapi/Makeinclude.$BIN


   # Build IOAPI
   make configure 2>&1 | tee configure.log
   make -j $CPU_HALF_EVEN 2>&1 | tee make.log

   #If statement to check that libioapi.a & m3xtract exist

   cd ${WRF_FOLDER}/Downloads/ioapi/$BIN
   n=$(ls -lrt libioapi.a | wc -l)
   m=$(ls -rlt m3xtract | wc -l)
     if (( ( $n == 1 ) && ( $m == 1) ))
      then
        echo "All expected files created."

     else
       echo "Missing one or more expected files. Exiting the script."
       read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
       exit
     fi
    echo " "

    echo " "

    mv ${WRF_FOLDER}/Downloads/ioapi/$BIN ${WRF_FOLDER}/Downloads/ioapi/Linux2_x86_64gfort
    export BIN=Linux2_x86_64gfort
  #################################### System Environment Tests ##############

  cd ${WRF_FOLDER}/Downloads
  wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_NETCDF_MPI_tests.tar
  wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_tests.tar

  tar -xvf Fortran_C_tests.tar -C ${WRF_FOLDER}/Tests/Environment
  tar -xvf Fortran_C_NETCDF_MPI_tests.tar -C ${WRF_FOLDER}/Tests/Compatibility

  export one="1"
  echo " "
  ############## Testing Environment #####

  cd ${WRF_FOLDER}/Tests/Environment

  cp ${NETCDF}/include/netcdf.inc .

  echo " "
  echo " "
  echo "Environment Testing "
  echo "Test 1"
  $FC TEST_1_fortran_only_fixed.f
  ./a.out | tee env_test1.txt
  export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test1.txt | awk  '{print$1}')
   if [ $TEST_PASS -ge 1 ]
      then
        echo "Enviroment Test 1 Passed"
      else
        echo "Environment Compiler Test 1 Failed"
        exit
    fi
  read -r -t 3 -p "I am going to wait for 3 seconds only ..."

  echo " "
  echo "Test 2"
  $FC TEST_2_fortran_only_free.f90
  ./a.out | tee env_test2.txt
  export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test2.txt | awk  '{print$1}')
   if [ $TEST_PASS -ge 1 ]
      then
        echo "Enviroment Test 2 Passed"
      else
        echo "Environment Compiler Test 2 Failed"
        exit
    fi
  echo " "
  read -r -t 3 -p "I am going to wait for 3 seconds only ..."

  echo " "
  echo "Test 3"
  $CC TEST_3_c_only.c
  ./a.out | tee env_test3.txt
  export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test3.txt | awk  '{print$1}')
   if [ $TEST_PASS -ge 1 ]
      then
        echo "Enviroment Test 3 Passed"
      else
        echo "Environment Compiler Test 3 Failed"
        exit
    fi
  echo " "
  read -r -t 3 -p "I am going to wait for 3 seconds only ..."

  echo " "
  echo "Test 4"
  $CC -c -m64 TEST_4_fortran+c_c.c
  $FC -c -m64 TEST_4_fortran+c_f.f90
  $FC -m64 TEST_4_fortran+c_f.o TEST_4_fortran+c_c.o
  ./a.out | tee env_test4.txt
  export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test4.txt | awk  '{print$1}')
   if [ $TEST_PASS -ge 1 ]
      then
        echo "Enviroment Test 4 Passed"
      else
        echo "Environment Compiler Test 4 Failed"
        exit
    fi
  echo " "
  read -r -t 3 -p "I am going to wait for 3 seconds only ..."

  echo " "
  ############## Testing Environment #####

  cd ${WRF_FOLDER}/Tests/Compatibility

  cp ${NETCDF}/include/netcdf.inc .

  echo " "
  echo " "
  echo "Library Compatibility Tests "
  echo "Test 1"
  $FC -c 01_fortran+c+netcdf_f.f
  $CC -c 01_fortran+c+netcdf_c.c
  $FC 01_fortran+c+netcdf_f.o 01_fortran+c+netcdf_c.o \
       -L${NETCDF}/lib -lnetcdff -lnetcdf

       ./a.out | tee comp_test1.txt
       export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test1.txt | awk  '{print$1}')
        if [ $TEST_PASS -ge 1 ]
           then
             echo "Compatibility Test 1 Passed"
           else
             echo "Compatibility Compiler Test 1 Failed"
             exit
         fi
       echo " "
       read -r -t 3 -p "I am going to wait for 3 seconds only ..."

  echo " "

  echo "Test 2"
  $MPIFC -c 02_fortran+c+netcdf+mpi_f.f
  $MPICC -c 02_fortran+c+netcdf+mpi_c.c
  $MPIFC 02_fortran+c+netcdf+mpi_f.o \
  02_fortran+c+netcdf+mpi_c.o \
       -L${NETCDF}/lib -lnetcdff -lnetcdf

  $DIR/MPICH/bin/mpirun ./a.out | tee comp_test2.txt
  export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test2.txt | awk  '{print$1}')
   if [ $TEST_PASS -ge 1 ]
      then
        echo "Compatibility Test 2 Passed"
      else
        echo "Compatibility Compiler Test 2 Failed"
        exit
    fi
  echo " "
  read -r -t 3 -p "I am going to wait for 3 seconds only ..."
  echo " "

  echo " All tests completed and passed"
  echo " "


  ############################ CMAQ Source Code #################################
  cd ${WRF_FOLDER}/Downloads
  git clone -b main https://github.com/USEPA/CMAQ.git  #clone CMAQ github to WRF_CMAQ Main Folder

  cd CMAQ
  cp bldit_project.csh bldit_project.csh.old     # Create backup of build project script

  # Set path to where CMAQ will be built
  sed -i '19s|/home/username/path|${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4|g' ${WRF_FOLDER}/Downloads/CMAQ/bldit_project.csh
  # Build CMAQ Project
  ./bldit_project.csh

  cd ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4

  cp config_cmaq.csh config_cmaq.csh.old        # Create backup of configure script

  # Sed statements to configure the Build_WRFv${WRF_VERSION}-CMAQv5.4
  sed -i '146s|netcdf_root_gcc|${WRF_FOLDER}/Libs/NETCDF|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/config_cmaq.csh
  sed -i '147s|ioapi_root_gcc|${WRF_FOLDER}/Downloads/ioapi|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/config_cmaq.csh
  sed -i '148s|WRF_ARCH|WRF_ARCH 34|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/config_cmaq.csh

  # sed statements for paths in configure file
  sed -i '151s|ioapi_inc_gcc|${WRF_FOLDER}/Downloads/ioapi/ioapi/fixed_src|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/config_cmaq.csh
  sed -i '152s|ioapi_lib_gcc|${WRF_FOLDER}/Downloads/ioapi/$BIN|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/config_cmaq.csh
  sed -i '153s|netcdf_lib_gcc |${WRF_FOLDER}/Libs/NETCDF/lib|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/config_cmaq.csh
  sed -i '154s|netcdf_inc_gcc|${WRF_FOLDER}/Libs/NETCDF/include|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/config_cmaq.csh
  sed -i '155s|netcdff_lib_gcc|${WRF_FOLDER}/Libs/NETCDF/lib|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/config_cmaq.csh
  sed -i '156s|netcdff_inc_gcc|${WRF_FOLDER}/Libs/NETCDF/include|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/config_cmaq.csh
  sed -i '157s|mpi_incl_gcc|${WRF_FOLDER}/Libs/MPICH|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/config_cmaq.csh
  sed -i '158s|mpi_lib_gcc|${WRF_FOLDER}/Libs/MPICH|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/config_cmaq.csh


  # compile the Chemistry Transport Model (CCTM) preprocess

  cd ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/CCTM/scripts

  cp bldit_cctm.csh bldit_cctm.csh.old  # make a back up copy of .csh script

  # Sed statements for configuration
  sed -i '74s|-j|-j $CPU_HALF_EVEN|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/CCTM/scripts/bldit_cctm.csh # set multicore to half of available cpus
  sed -i '84s|#set|set|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/CCTM/scripts/bldit_cctm.csh # build two way
  sed -i '103s|v4.4|v${WRF_VERSION}|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/CCTM/scripts/bldit_cctm.csh # change wrf version from 4.4 to ${WPS_VERSION}


  sed -i '446s| if ( $? != 0 ) then| |g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/CCTM/scripts/bldit_cctm.csh
  sed -i '447s|    set shaID   = "not_a_repo"| |g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/CCTM/scripts/bldit_cctm.csh
  sed -i '448s| endif| |g' ${WRF_FOLDER}/Downloads/CMAQ//Build_WRFv${WRF_VERSION}-CMAQv5.4/CCTM/scripts/bldit_cctm.csh
  sed -i '791s|  if ($? == 0) then| |g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/CCTM/scripts/bldit_cctm.csh
  sed -i '793s|  endif| |g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/CCTM/scripts/bldit_cctm.csh
  sed -i '822s|compile em_real|compile -j $CPU_HALF_EVEN em_real|g' ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/CCTM/scripts/bldit_cctm.csh

  # Build WRF-CMAQ
  ./bldit_cctm.csh gcc 2>&1 | tee bldit.cctm.twoway.gcc.log

  # Move built folder to top level directory
  mv ${WRF_FOLDER}/Downloads/CMAQ/Build_WRFv${WRF_VERSION}-CMAQv5.4/CCTM/scripts/BLD_WRFv${WRF_VERSION}_CCTM_v54_gcc ${WRF_FOLDER}/WRFv${WRF_VERSION}_CMAQv5.4

  export WRF_DIR=${WRF_FOLDER}/WRFv${WRF_VERSION}_CMAQv5.4



    # IF statement to check that all files were created.
  cd ${WRF_FOLDER}/WRFv${WRF_VERSION}_CMAQv5.4/main
  n=$(ls ./*.exe | wc -l)
  if (($n >= 3))
   then
   echo "All expected files created."
   read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
  else
   echo "Missing one or more expected files. Exiting the script."
   read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
   exit
  fi
  echo " "

  ############################WPSV${WPS_VERSION}#####################################
  ## WPS v${WPS_VERSION}
  ## Downloaded from git tagged releases
  #Option 3 for gfortran and distributed memory
  ########################################################################

  cd ${WRF_FOLDER}/Downloads
  wget -c https://github.com/wrf-model/WPS/archive/refs/tags/v${WPS_VERSION}.tar.gz -O WPS-${WPS_VERSION}.tar.gz
  tar -xvzf WPS-${WPS_VERSION}.tar.gz -C ${WRF_FOLDER}/
  cd ${WRF_FOLDER}/WPS-${WPS_VERSION}
  ./clean -a

  if [ ${auto_config} -eq 1 ]
    then
        echo 3 | ./configure 2>&1 | tee configure.log #Option 3 for gfortran and distributed memory
      else
        ./configure 2>&1 | tee configure.log  #Option 3 gfortran compiler with distributed memory
  fi
  ./compile 2>&1 | tee compile.wps.log


  echo " "
  # IF statement to check that all files were created.
   cd ${WRF_FOLDER}/WPS-${WPS_VERSION}
   n=$(ls ./*.exe | wc -l)
   if (($n == 3))
    then
      echo "All expected files created."
      read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
   else
     echo "Missing one or more expected files. Exiting the script."
     read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
     exit
   fi
   echo " "

  ######################## WPS Domain Setup Tools ########################
  ## DomainWizard
  cd ${WRF_FOLDER}/Downloads
  wget -c http://esrl.noaa.gov/gsd/wrfportal/domainwizard/WRFDomainWizard.zip
  mkdir ${WRF_FOLDER}/WRFDomainWizard
  unzip WRFDomainWizard.zip -d ${WRF_FOLDER}/WRFDomainWizard
  chmod +x ${WRF_FOLDER}/WRFDomainWizard/run_DomainWizard

  echo " "
  ######################## WPF Portal Setup Tools ########################
  ## WRFPortal
  cd ${WRF_FOLDER}/Downloads
  wget -c https://esrl.noaa.gov/gsd/wrfportal/portal/wrf-portal.zip
  mkdir ${WRF_FOLDER}/WRFPortal
  unzip wrf-portal.zip -d ${WRF_FOLDER}/WRFPortal
  chmod +x ${WRF_FOLDER}/WRFPortal/runWRFPortal


  echo " "

  ######################## Static Geography Data inc/ Optional ####################
  # http://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
  # These files are large so if you only need certain ones comment the others off
  # All files downloaded and untarred is 200GB
  # https://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
  #################################################################################
  cd ${WRF_FOLDER}/Downloads
  mkdir ${WRF_FOLDER}/GEOG
  mkdir ${WRF_FOLDER}/GEOG/WPS_GEOG

  echo " "
  echo "Mandatory WRF Preprocessing System (WPS) Geographical Input Data Mandatory Fields Downloads"
  echo " "
  wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_high_res_mandatory.tar.gz
  tar -xvzf geog_high_res_mandatory.tar.gz -C ${WRF_FOLDER}/GEOG/

  wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_low_res_mandatory.tar.gz
  tar -xvzf geog_low_res_mandatory.tar.gz -C ${WRF_FOLDER}/GEOG/
  mv ${WRF_FOLDER}/GEOG/WPS_GEOG_LOW_RES/ ${WRF_FOLDER}/GEOG/WPS_GEOG


  if [ ${WPS_Specific_Applications} -eq 1 ]
    then
      echo " "
      echo " WPS Geographical Input Data Mandatory for Specific Applications"
      echo " "

      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_thompson28_chem.tar.gz
      tar -xvzf geog_thompson28_chem.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_noahmp.tar.gz
      tar -xvzf geog_noahmp.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

      wget -c  https://www2.mmm.ucar.edu/wrf/src/wps_files/irrigation.tar.gz
      tar -xvzf irrigation.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_px.tar.gz
      tar -xvzf geog_px.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_urban.tar.gz
      tar -xvzf geog_urban.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_ssib.tar.gz
      tar -xvzf geog_ssib.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/lake_depth.tar.bz2
      tar -xvf lake_depth.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/topobath_30s.tar.bz2
      tar -xvf topobath_30s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/gsl_gwd.tar.bz2
      tar -xvf gsl_gwd.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG
  fi


  if [ ${Optional_GEOG} -eq 1 ]
    then
      echo " "
      echo "Optional WPS Geographical Input Data"
      echo " "


      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_older_than_2000.tar.gz
      tar -xvzf geog_older_than_2000.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s_with_lakes.tar.gz
      tar -xvzf modis_landuse_20class_15s_with_lakes.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_alt_lsm.tar.gz
      tar -xvzf geog_alt_lsm.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/nlcd2006_ll_9s.tar.bz2
      tar -xvf nlcd2006_ll_9s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/updated_Iceland_LU.tar.gz
      tar -xvf updated_Iceland_LU.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s.tar.bz2
      tar -xvf modis_landuse_20class_15s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG


  fi
fi

############################################# WRF SFIRE #################################
## WRF_SFIRE installation with parallel process.
# Download and install required library and data files for WRF_SFIRE.
# Tested in Ubuntu 20.0${WPS_VERSION} LTS & Ubuntu 22.04, Rocky Linux 9 & MacOS Ventura 64bit
# Built in 64-bit system
# Built with Intel or GNU compilers
# Tested with current available libraries on 10/10/2023
# If newer libraries exist edit script paths for changes
#Estimated Run Time ~ 30 - 60 Minutes with 10mb/s downloadspeed.
# Special thanks to:
# Youtube's meteoadriatic, GitHub user jamal919.
# University of Manchester's  Doug L
# University of Tunis El Manar's Hosni
# GSL's Jordan S.
# NCAR's Mary B., Christine W., & Carl D.
# DTC's Julie P., Tara J., George M., & John H.
# UCAR's Katelyn F., Jim B., Jordan P., Kevin M.,
# University of Colorado Denver's Jan M.
##############################################################

if [ "$Ubuntu_64bit_GNU" = "1" ] && [ "$SFIRE_PICK" = "1" ]; then
	#############################basic package managment############################
echo $PASSWD | sudo -S apt -y update
echo $PASSWD | sudo -S apt -y upgrade && sudo -S apt -y autoremove
echo $PASSWD | sudo -S apt -y install autoconf automake bison build-essential byacc cmake csh curl default-jdk default-jre emacs flex g++ gawk gcc gfortran git ksh libcurl4-openssl-dev libjpeg-dev libncurses6 libpixman-1-dev libpng-dev libtool libxml2 libxml2-dev m4 make  ncview okular openbox pipenv pkg-config  python3 python3-dev python3-pip python3-dateutil tcsh unzip xauth xorg time libgeotiff-dev

echo " "
##############################Directory Listing############################
export HOME=`cd;pwd`

mkdir $HOME/WRF_SFIRE
export WRF_FOLDER=$HOME/WRF_SFIRE
cd ${WRF_FOLDER}/
mkdir Downloads
mkdir Libs
export DIR=${WRF_FOLDER}/Libs
mkdir Libs/grib2
mkdir Libs/NETCDF
mkdir Libs/MPICH
mkdir -p Tests/Environment
mkdir -p Tests/Compatibility

echo " "
#############################Core Management####################################

export CPU_CORE=$(nproc)                                             # number of available threads on system
export CPU_6CORE="6"
export CPU_HALF=$(($CPU_CORE / 2))                                   #half of availble cores on system
export CPU_HALF_EVEN=$(( $CPU_HALF - ($CPU_HALF % 2) ))              #Forces CPU cores to even number to avoid partial core export. ie 7 cores would be 3.5 cores.

if [ $CPU_CORE -le $CPU_6CORE ]                                  #If statement for low core systems.  Forces computers to only use 1 core if there are 4 cores or less on the system.
then
	export CPU_HALF_EVEN="2"
else
	export CPU_HALF_EVEN=$(( $CPU_HALF - ($CPU_HALF % 2) ))
fi


echo "##########################################"
echo "Number of Threads being used $CPU_HALF_EVEN"
echo "##########################################"


echo " "
##############################Downloading Libraries############################
#Force use of ipv4 with -4
cd Downloads
wget -c -4 https://github.com/madler/zlib/archive/refs/tags/v$Zlib_Version.tar.gz
wget -c -4 https://github.com/HDFGroup/hdf5/archive/refs/tags/hdf5-$HDF5_Version.tar.gz
wget -c -4 https://github.com/Unidata/netcdf-c/archive/refs/tags/v$Netcdf_C_Version.tar.gz
wget -c -4 https://github.com/Unidata/netcdf-fortran/archive/refs/tags/v$Netcdf_Fortran_Version.tar.gz
wget -c -4 https://download.sourceforge.net/libpng/libpng-$Libpng_Version.tar.gz
wget -c -4 https://www.ece.uvic.ca/~frodo/jasper/software/jasper-$Jasper_Version.zip
wget -c -4 https://github.com/pmodels/mpich/releases/download/v$Mpich_Version/mpich-$Mpich_Version.tar.gz
wget -c -4 https://parallel-netcdf.github.io/Release/pnetcdf-$Pnetcdf_Version.tar.gz
wget -c -4 https://sourceforge.net/projects/opengrads/files/grads2/2.2.1.oga.1/Linux%20%2864%20Bits%29/opengrads-2.2.1.oga.1-bundle-x86_64-pc-linux-gnu-glibc_2.17.tar.gz
wget -c -4  https://github.com/openwfm/convert_geotiff/releases/download/v0.1/convert_geotiff-0.1.0.tar.gz


echo " "
####################################Compilers#####################################
export CC=gcc
export CXX=g++
export FC=gfortran
export F77=gfortran
export CFLAGS="-fPIC -fPIE -O3"



#IF statement for GNU compiler issue
export GCC_VERSION=$(/usr/bin/gcc -dumpfullversion | awk '{print$1}')
export GFORTRAN_VERSION=$(/usr/bin/gfortran -dumpfullversion | awk '{print$1}')
export GPLUSPLUS_VERSION=$(/usr/bin/g++ -dumpfullversion | awk '{print$1}')

export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

export version_10="10"

if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]
	then
		export fallow_argument=-fallow-argument-mismatch
		export boz_argument=-fallow-invalid-boz
	else
		export fallow_argument=
		export boz_argument=
fi


export FFLAGS="$fallow_argument -m64"
export FCFLAGS="$fallow_argument -m64"


echo "##########################################"
echo "FFLAGS = $FFLAGS"
echo "FCFLAGS = $FCFLAGS"
echo "##########################################"




echo " "
#############################zlib############################
#Uncalling compilers due to comfigure issue with zlib$Zlib_Version
#With CC & CXX definied ./configure uses different compiler Flags

cd ${WRF_FOLDER}/Downloads
tar -xvzf v$Zlib_Version.tar.gz
cd zlib-$Zlib_Version/
autoreconf -i -f 2>&1 | tee autoreconf.log
./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
automake -a -f 2>&1 | tee automake.log
make -j $CPU_HALF_EVEN 2>&1 | tee make.log
make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
#make check

echo " "
##############################MPICH############################
#F90= due to compiler issues with mpich install
cd ${WRF_FOLDER}/Downloads
tar -xvzf mpich-$Mpich_Version.tar.gz
cd mpich-$Mpich_Version/
autoreconf -i -f 2>&1 | tee autoreconf.log
F90= ./configure --prefix=$DIR/MPICH --with-device=ch3 FFLAGS=$fallow_argument FCFLAGS=$fallow_argument 2>&1 | tee configure.log
automake -a -f 2>&1 | tee automake.log
make -j $CPU_HALF_EVEN 2>&1 | tee make.log
make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
# make check



export PATH=$DIR/MPICH/bin:$PATH

export MPIFC=$DIR/MPICH/bin/mpifort
export MPIF77=$DIR/MPICH/bin/mpifort
export MPIF90=$DIR/MPICH/bin/mpifort
export MPICC=$DIR/MPICH/bin/mpicc
export MPICXX=$DIR/MPICH/bin/mpicxx


echo " "
#############################libpng############################
cd ${WRF_FOLDER}/Downloads
export LDFLAGS=-L$DIR/grib2/lib
export CPPFLAGS=-I$DIR/grib2/include
tar -xvzf libpng-$Libpng_Version.tar.gz
cd libpng-$Libpng_Version/
autoreconf -i -f 2>&1 | tee autoreconf.log
CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
automake -a -f 2>&1 | tee automake.log
make -j $CPU_HALF_EVEN 2>&1 | tee make.log
make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
#make check
echo " "
#############################JasPer############################
cd ${WRF_FOLDER}/Downloads
unzip jasper-$Jasper_Version.zip
cd jasper-$Jasper_Version/
autoreconf -i -f 2>&1 | tee autoreconf.log
./configure --prefix=$DIR/grib2
CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
automake -a -f 2>&1 | tee automake.log
make -j $CPU_HALF_EVEN 2>&1 | tee make.log
make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
#make check

export JASPERLIB=$DIR/grib2/lib
export JASPERINC=$DIR/grib2/include


echo " "
#############################hdf5 library for netcdf4 functionality############################
cd ${WRF_FOLDER}/Downloads
tar -xvzf hdf5-$HDF5_Version.tar.gz
cd hdf5-hdf5-$HDF5_Version
autoreconf -i -f 2>&1 | tee autoreconf.log
CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX ./configure --prefix=$DIR/grib2 --with-zlib=$DIR/grib2 --enable-hl --enable-fortran --enable-parallel 2>&1 | tee configure.log
automake -a -f 2>&1 | tee automake.log
make -j $CPU_HALF_EVEN 2>&1 | tee make.log
make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
#make check

export HDF5=$DIR/grib2
export PHDF5=$DIR/grib2
export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH


echo " "
#############################Install Parallel-netCDF##############################
#Make file created with half of available cpu cores
#Hard path for MPI added
##################################################################################
cd ${WRF_FOLDER}/Downloads
tar -xzvf pnetcdf-$Pnetcdf_Version.tar.gz
cd pnetcdf-$Pnetcdf_Version
export MPIFC=$DIR/MPICH/bin/mpifort
export MPIF77=$DIR/MPICH/bin/mpifort
export MPIF90=$DIR/MPICH/bin/mpifort
export MPICC=$DIR/MPICH/bin/mpicc
export MPICXX=$DIR/MPICH/bin/mpicxx
autoreconf -i -f 2>&1 | tee autoreconf.log
./configure --prefix=$DIR/grib2  --enable-shared --enable-static 2>&1 | tee configure.log
automake -a -f 2>&1 | tee automake.log
make -j $CPU_HALF_EVEN 2>&1 | tee make.log
make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
#make check

export PNETCDF=$DIR/grib2


##############################Install NETCDF C Library############################
cd ${WRF_FOLDER}/Downloads
tar -xzvf v$Netcdf_C_Version.tar.gz
cd netcdf-c-$Netcdf_C_Version/
export CPPFLAGS=-I$DIR/grib2/include
export LDFLAGS=-L$DIR/grib2/lib
export LIBS="-lhdf5_hl -lhdf5 -lz -lcurl -lgfortran -lgcc -lm -ldl -lpnetcdf"
autoreconf -i -f 2>&1 | tee autoreconf.log
CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 ./configure --prefix=$DIR/NETCDF --disable-dap --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-pnetcdf --enable-cdf5 --enable-parallel-tests 2>&1 | tee configure.log
automake -a -f 2>&1 | tee automake.log
make -j $CPU_HALF_EVEN 2>&1 | tee make.log
make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
#make check

export PATH=$DIR/NETCDF/bin:$PATH
export NETCDF=$DIR/NETCDF
echo " "
##############################NetCDF fortran library############################
cd ${WRF_FOLDER}/Downloads
tar -xvzf v$Netcdf_Fortran_Version.tar.gz
cd netcdf-fortran-$Netcdf_Fortran_Version/
export LD_LIBRARY_PATH=$DIR/NETCDF/lib:$LD_LIBRARY_PATH
export CPPFLAGS="-I$DIR/NETCDF/include -I$DIR/grib2/include"
export LDFLAGS="-L$DIR/NETCDF/lib -L$DIR/grib2/lib"
export LIBS="-lnetcdf -lpnetcdf -lcurl -lhdf5_hl -lhdf5 -lz -lm -ldl -lgcc -lgfortran"
autoreconf -i -f 2>&1 | tee autoreconf.log
CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 ./configure --prefix=$DIR/NETCDF --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-parallel-tests --enable-hdf5 2>&1 | tee configure.log
automake -a -f 2>&1 | tee automake.log
make -j $CPU_HALF_EVEN 2>&1 | tee make.log
make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
#make check

echo " "

############################# Convert Geo Tiff #################################

cd ${WRF_FOLDER}/Downloads
tar -xzvf convert_geotiff-0.1.0.tar.gz
cd convert_geotiff-0.1.0
autoreconf -i -f 2>&1 | tee autoreconf.log
CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 ./configure -exec-prefix=$DIR/grib2 --prefix=$DIR/grib2 2>&1 | tee configure.log
automake -a -f 2>&1 | tee automake.log
make -j $CPU_HALF_EVEN 2>&1 | tee make.log
make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log



#################################### System Environment Tests ##############

cd ${WRF_FOLDER}/Downloads
wget -c -4 https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_NETCDF_MPI_tests.tar
wget -c -4 https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_tests.tar

tar -xvf Fortran_C_tests.tar -C ${WRF_FOLDER}/Tests/Environment
tar -xvf Fortran_C_NETCDF_MPI_tests.tar -C ${WRF_FOLDER}/Tests/Compatibility

export one="1"
echo " "
############## Testing Environment #####

cd ${WRF_FOLDER}/Tests/Environment

cp ${NETCDF}/include/netcdf.inc .

echo " "
echo " "
echo "Environment Testing "
echo "Test 1"
$FC TEST_1_fortran_only_fixed.f
./a.out | tee env_test1.txt
export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test1.txt | awk  '{print$1}')
 if [ $TEST_PASS -ge 1 ]
		then
			echo "Enviroment Test 1 Passed"
		else
			echo "Environment Compiler Test 1 Failed"
			exit
	fi
read -r -t 3 -p "I am going to wait for 3 seconds only ..."

echo " "
echo "Test 2"
$FC TEST_2_fortran_only_free.f90
./a.out | tee env_test2.txt
export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test2.txt | awk  '{print$1}')
 if [ $TEST_PASS -ge 1 ]
		then
			echo "Enviroment Test 2 Passed"
		else
			echo "Environment Compiler Test 2 Failed"
			exit
	fi
echo " "
read -r -t 3 -p "I am going to wait for 3 seconds only ..."

echo " "
echo "Test 3"
$CC TEST_3_c_only.c
./a.out | tee env_test3.txt
export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test3.txt | awk  '{print$1}')
 if [ $TEST_PASS -ge 1 ]
		then
			echo "Enviroment Test 3 Passed"
		else
			echo "Environment Compiler Test 3 Failed"
			exit
	fi
echo " "
read -r -t 3 -p "I am going to wait for 3 seconds only ..."

echo " "
echo "Test 4"
$CC -c -m64 TEST_4_fortran+c_c.c
$FC -c -m64 TEST_4_fortran+c_f.f90
$FC -m64 TEST_4_fortran+c_f.o TEST_4_fortran+c_c.o
./a.out | tee env_test4.txt
export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test4.txt | awk  '{print$1}')
 if [ $TEST_PASS -ge 1 ]
		then
			echo "Enviroment Test 4 Passed"
		else
			echo "Environment Compiler Test 4 Failed"
			exit
	fi
echo " "
read -r -t 3 -p "I am going to wait for 3 seconds only ..."

echo " "
############## Testing Environment #####

cd ${WRF_FOLDER}/Tests/Compatibility

cp ${NETCDF}/include/netcdf.inc .

echo " "
echo " "
echo "Library Compatibility Tests "
echo "Test 1"
$FC -c 01_fortran+c+netcdf_f.f
$CC -c 01_fortran+c+netcdf_c.c
$FC 01_fortran+c+netcdf_f.o 01_fortran+c+netcdf_c.o \
		 -L${NETCDF}/lib -lnetcdff -lnetcdf

		 ./a.out | tee comp_test1.txt
		 export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test1.txt | awk  '{print$1}')
			if [ $TEST_PASS -ge 1 ]
				 then
					 echo "Compatibility Test 1 Passed"
				 else
					 echo "Compatibility Compiler Test 1 Failed"
					 exit
			 fi
		 echo " "
		 read -r -t 3 -p "I am going to wait for 3 seconds only ..."

echo " "

echo "Test 2"
$MPIFC -c 02_fortran+c+netcdf+mpi_f.f
$MPICC -c 02_fortran+c+netcdf+mpi_c.c
$MPIFC 02_fortran+c+netcdf+mpi_f.o \
02_fortran+c+netcdf+mpi_c.o \
		 -L${NETCDF}/lib -lnetcdff -lnetcdf

$DIR/MPICH/bin/mpirun ./a.out | tee comp_test2.txt
export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test2.txt | awk  '{print$1}')
 if [ $TEST_PASS -ge 1 ]
		then
			echo "Compatibility Test 2 Passed"
		else
			echo "Compatibility Compiler Test 2 Failed"
			exit
	fi
echo " "
read -r -t 3 -p "I am going to wait for 3 seconds only ..."
echo " "

echo " All tests completed and passed"
echo " "



###############################NCEPlibs#####################################
#The libraries are built and installed with
# ./make_ncep_libs.sh -s MACHINE -c COMPILER -d NCEPLIBS_DIR -o OPENMP [-m mpi] [-a APPLICATION]
#It is recommended to install the NCEPlibs into their own directory, which must be created before running the installer. Further information on the command line arguments can be obtained with
# ./make_ncep_libs.sh -h

#If iand error occurs go to https://github.com/NCAR/NCEPlibs/pull/16/files make adjustment and re-run ./make_ncep_libs.sh
############################################################################



cd ${WRF_FOLDER}/Downloads
git clone https://github.com/NCAR/NCEPlibs.git
cd NCEPlibs
mkdir $DIR/nceplibs

export JASPER_INC=$DIR/grib2/include
export PNG_INC=$DIR/grib2/include
export NETCDF=$DIR/NETCDF

#for loop to edit linux.gnu for nceplibs to install
#make if statement for gcc-9 or older
export GCC_VERSION=$(/usr/bin/gcc -dumpfullversion | awk '{print$1}')
export GFORTRAN_VERSION=$(/usr/bin/gfortran -dumpfullversion | awk '{print$1}')
export GPLUSPLUS_VERSION=$(/usr/bin/g++ -dumpfullversion | awk '{print$1}')

export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

export version_10="10"

if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]
then
	y="24 28 32 36 40 45 49 53 56 60 64 68 69 73 74 79"
	for X in $y; do
		sed -i "${X}s/= /= $fallow_argument $boz_argument /g" ${WRF_FOLDER}/Downloads/NCEPlibs/macros.make.linux.gnu
	done
else
	echo ""
	echo "Loop not needed"
fi

if [ ${auto_config} -eq 1 ]
	then
		echo yes | ./make_ncep_libs.sh -s linux -c gnu -d $DIR/nceplibs -o 0 -m 1 -a upp
	else
		./make_ncep_libs.sh -s linux -c gnu -d $DIR/nceplibs -o 0 -m 1 -a upp
fi

export PATH=$DIR/nceplibs:$PATH

echo " "
################################UPPv4.1######################################
#Previous verison of UPP
#WRF Support page recommends UPPV4.1 due to too many changes to WRF and UPP code
#since the WRF was written
#Option 8 gfortran compiler with distributed memory
#############################################################################
cd ${WRF_FOLDER}/
git clone -b dtc_post_v4.1.0 --recurse-submodules https://github.com/NOAA-EMC/EMC_post UPPV4.1
cd UPPV4.1
mkdir postprd
export NCEPLIBS_DIR=$DIR/nceplibs
export NETCDF=$DIR/NETCDF

if [ ${auto_config} -eq 1 ]
	then
		echo 8 | ./configure  #Option 8 gfortran compiler with distributed memory
	else
		./configure  #Option 8 gfortran compiler with distributed memory
fi


#make if statement for gcc-9 or older
export GCC_VERSION=$(/usr/bin/gcc -dumpfullversion | awk '{print$1}')
export GFORTRAN_VERSION=$(/usr/bin/gfortran -dumpfullversion | awk '{print$1}')
export GPLUSPLUS_VERSION=$(/usr/bin/g++ -dumpfullversion | awk '{print$1}')

export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

export version_10="10"

if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]
	then
		z="58 63"
		for X in $z; do
			sed -i "${X}s/(FOPT)/(FOPT) $fallow_argument $boz_argument  /g" ${WRF_FOLDER}/UPPV4.1/configure.upp
		done
	else
		echo ""
		echo "Loop not needed"
fi

./compile
cd ${WRF_FOLDER}/UPPV4.1/scripts
echo $PASSWD | sudo -S cpan install XML::LibXML
chmod +x run_unipost

# IF statement to check that all files were created.
 cd ${WRF_FOLDER}/UPPV4.1/exec
 n=$(ls ./*.exe | wc -l)
 if (( $n == 1 ))
	then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing UPPV4.1. I am going to wait for 5 seconds only ..."
 else
	 echo "Missing one or more expected files. Exiting the script."
	 read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
	 exit
 fi

echo " "



######################## ARWpost V3.1  ############################
## ARWpost
##Configure #3
###################################################################
cd ${WRF_FOLDER}/Downloads
wget -c -4 http://www2.mmm.ucar.edu/wrf/src/ARWpost_V3.tar.gz
tar -xvzf ARWpost_V3.tar.gz -C ${WRF_FOLDER}/
cd ${WRF_FOLDER}/ARWpost
./clean -a
sed -i -e 's/-lnetcdf/-lnetcdff -lnetcdf/g' ${WRF_FOLDER}/ARWpost/src/Makefile
export NETCDF=$DIR/NETCDF


if [ ${auto_config} -eq 1 ]
	then
		echo 3 | ./configure  #Option 3 gfortran compiler with distributed memory
	else
		./configure  #Option 3 gfortran compiler with distributed memory
fi


export GCC_VERSION=$(/usr/bin/gcc -dumpfullversion | awk '{print$1}')
export GFORTRAN_VERSION=$(/usr/bin/gfortran -dumpfullversion | awk '{print$1}')
export GPLUSPLUS_VERSION=$(/usr/bin/g++ -dumpfullversion | awk '{print$1}')

export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

export version_10="10"

if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]
then
	sed -i '32s/-ffree-form -O -fno-second-underscore -fconvert=big-endian -frecord-marker=4/-ffree-form -O -fno-second-underscore -fconvert=big-endian -frecord-marker=4 ${fallow_argument} /g' configure.arwp
fi


sed -i -e 's/-C -P -traditional/-P -traditional/g' ${WRF_FOLDER}/ARWpost/configure.arwp
./compile


export PATH=${WRF_FOLDER}/ARWpost/ARWpost.exe:$PATH

echo " "
################################ OpenGrADS ##################################
#Verison 2.2.1 32bit of Linux
#############################################################################
if [[ $GRADS_PICK -eq 1 ]]; then
	cd ${WRF_FOLDER}/Downloads
	tar -xzvf opengrads-2.2.1.oga.1-bundle-x86_64-pc-linux-gnu-glibc_2.17.tar.gz -C ${WRF_FOLDER}/
	cd ${WRF_FOLDER}/
	mv ${WRF_FOLDER}/opengrads-2.2.1.oga.1  ${WRF_FOLDER}/GrADS
	cd GrADS/Contents
	wget -c -4 https://github.com/regisgrundig/SIMOP/blob/master/g2ctl.pl
	chmod +x g2ctl.pl
	wget -c -4 https://sourceforge.net/projects/opengrads/files/wgrib2/0.1.9.4/wgrib2-v0.1.9.4-bin-i686-glib2.5-linux-gnu.tar.gz
	tar -xzvf wgrib2-v0.1.9.4-bin-i686-glib2.5-linux-gnu.tar.gz
	cd wgrib2-v0.1.9.4/bin
	mv wgrib2 ${WRF_FOLDER}/GrADS/Contents
	cd ${WRF_FOLDER}/GrADS/Contents
	rm wgrib2-v0.1.9.4-bin-i686-glib2.5-linux-gnu.tar.gz
	rm -r wgrib2-v0.1.9.4


	export PATH=${WRF_FOLDER}/GrADS/Contents:$PATH


echo " "
fi
################################## GrADS ###############################
# Version  2.2.1
# Sublibs library instructions: http://cola.gmu.edu/grads/gadoc/supplibs2.html
# GrADS instructions: http://cola.gmu.edu/grads/downloads.php
########################################################################
if [[ $GRADS_PICK -eq 2 ]]; then

	echo $PASSWD | sudo -S apt -y install grads

fi

##################### NCAR COMMAND LANGUAGE           ##################
########### NCL compiled via Conda                    ##################
########### This is the preferred method by NCAR      ##################
########### https://www.ncl.ucar.edu/index.shtml      ##################
#Installing Miniconda3 to WRF-Hydro directory and updating libraries

export Miniconda_Install_DIR=${WRF_FOLDER}/miniconda3

mkdir -p $Miniconda_Install_DIR

wget -c -4 https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $Miniconda_Install_DIR/miniconda.sh
bash $Miniconda_Install_DIR/miniconda.sh -b -u -p $Miniconda_Install_DIR

rm -rf $Miniconda_Install_DIR/miniconda.sh

export PATH=${WRF_FOLDER}/miniconda3/bin:$PATH

source $Miniconda_Install_DIR/etc/profile.d/conda.sh

$Miniconda_Install_DIR/bin/conda init bash
$Miniconda_Install_DIR/bin/conda init zsh
$Miniconda_Install_DIR/bin/conda init tcsh
$Miniconda_Install_DIR/bin/conda init xonsh
$Miniconda_Install_DIR/bin/conda init powershell

conda config --add channels conda-forge
conda config --set auto_activate_base false
conda update -n root --all -y



echo " "





echo " "
#Installing NCL via Conda
source $Miniconda_Install_DIR/etc/profile.d/conda.sh
conda init bash
conda activate base
conda create -n ncl_stable -c conda-forge ncl -y
conda activate ncl_stable

conda deactivate
conda deactivate
conda deactivate

echo " "

############################## RIP4 #####################################
mkdir ${WRF_FOLDER}/RIP4
cd ${WRF_FOLDER}/Downloads
wget -c -4 https://www2.mmm.ucar.edu/wrf/src/RIP_47.tar.gz
tar -xvzf RIP_47.tar.gz -C ${WRF_FOLDER}/RIP4
cd ${WRF_FOLDER}/RIP4/RIP_47
mv * ..
cd ${WRF_FOLDER}/RIP4
rm -rd RIP_47
source $Miniconda_Install_DIR/etc/profile.d/conda.sh
conda activate ncl_stable
conda install -c conda-forge ncl c-compiler fortran-compiler cxx-compiler -y


export RIP_ROOT=${WRF_FOLDER}/RIP4
export NETCDF=$DIR/NETCDF
export NCARG_ROOT=${WRF_FOLDER}/miniconda3/envs/ncl_stable


sed -i '349s|-L${NETCDF}/lib -lnetcdf $NETCDFF|-L${NETCDF}/lib $NETCDFF -lnetcdff -lnetcdf -lnetcdf -lnetcdff_C -lhdf5 |g' ${WRF_FOLDER}/RIP4/configure

sed -i '27s|NETCDFLIB	= -L${NETCDF}/lib -lnetcdf CONFIGURE_NETCDFF_LIB|NETCDFLIB	= -L</usr/lib/x86_64-linux-gnu/libm.a> -lm -L${NETCDF}/lib CONFIGURE_NETCDFF_LIB -lnetcdf -lhdf5 -lhdf5_hl -lgfortran -lgcc -lz |g' ${WRF_FOLDER}/RIP4/arch/preamble

sed -i '31s|-L${NCARG_ROOT}/lib -lncarg -lncarg_gks -lncarg_c -lX11 -lXext -lpng -lz CONFIGURE_NCARG_LIB| -L${NCARG_ROOT}/lib -lncarg -lncarg_gks -lncarg_c -lX11 -lXext -lpng -lz -lcairo -lfontconfig -lpixman-1 -lfreetype -lexpat -lpthread -lbz2 -lXrender -lgfortran -lgcc -L</usr/lib/x86_64-linux-gnu/> -lm -lhdf5 -lhdf5_hl |g' ${WRF_FOLDER}/RIP4/arch/preamble

sed -i '33s| -O|-fallow-argument-mismatch -O |g' ${WRF_FOLDER}/RIP4/arch/configure.defaults

sed -i '35s|=|= -L${WRF_FOLDER}/LIBS/grib2/lib -lhdf5 -lhdf5_hl |g' ${WRF_FOLDER}/RIP4/arch/configure.defaults


if [ ${auto_config} -eq 1 ]
	then
		echo 3 | ./configure  #Option 3 gfortran compiler with distributed memory
	else
		./configure  #Option 3 gfortran compiler with distributed memory
fi

./compile

conda deactivate
conda deactivate
conda deactivate


echo " "
##################### WRF Python           ##################
########### WRf-Python compiled via Conda  ##################
########### This is the preferred method by NCAR      ##################
##### https://wrf-python.readthedocs.io/en/latest/installation.html  ##################
source $Miniconda_Install_DIR/etc/profile.d/conda.sh
conda env create -f $HOME/WRF-MOSIT/wrf-python-stable.yml

######################### Climate Data Operators ############
######################### CDO compiled via Conda ###########
####################### This is the preferred method #######
################### https://bairdlangenbrunner.github.io/python-for-climate-scientists/conda/setting-up-conda-environments.html #######################

source $Miniconda_Install_DIR/etc/profile.d/conda.sh
conda init bash
conda activate base
conda create --name cdo_stable -y
source activate cdo_stable
conda install -c conda-forge cdo -y
conda update --all -y
conda deactivate
conda deactivate
conda deactivate

echo " "


################################## QGIS #####################################
#QGIS (Quantum Geographic Information System) is a free and open-source platform that allows users to
#analyze, view, and edit geospatial data. It supports both vector and raster layers, as well as various #web services, and is extensible through community-developed plugins. Key features include map
#creation, spatial analysis, and data management.
#############################################################################

conda env create -f $HOME/WRF-MOSIT/qgis.3.28.8.yml

echo " "




############################ WRF-SFIRE  #################################
## WRF-SFIRE
# Cloned from openwfm
# option 34, option 1 for gfortran and distributed memory w/basic nesting
# large file support enable with WRFiO_NCD_LARGE_FILE_SUPPORT=1
########################################################################
cd ${WRF_FOLDER}
git clone https://github.com/openwfm/WRF-SFIRE.git

cd ${WRF_FOLDER}/WRF-SFIRE/
./clean -a                      # Clean old configuration files

 if [ ${auto_config} -eq 1 ]
	then
			sed -i '428s/.*/  $response = "34 \\n";/g' ${WRF_FOLDER}/WRF-SFIRE/arch/Config.pl # Answer for compiler choice
			sed -i '869s/.*/  $response = "1 \\n";/g' ${WRF_FOLDER}/WRF-SFIRE/arch/Config.pl  #Answer for basic nesting
			./configure 2>&1 | tee configure.log
	else
		./configure 2>&1 | tee configure.log  #Option 34 gfortran compiler with distributed memory option 1 for basic nesting
fi

./compile -j $CPU_HALF_EVEN em_real 2>&1 | tee compile.wrf1.log


 # IF statement to check that all files were created.
	cd ${WRF_FOLDER}/WRF-SFIRE/main
	n=$(ls ./*.exe | wc -l)
	if (($n >= 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		cd ${WRF_FOLDER}/WRF-SFIRE/
		./compile -j $CPU_HALF_EVEN em_real 2>&1 | tee compile.wrf2.log
		cd ${WRF_FOLDER}/WRF-SFIRE/main
		n=$(ls ./*.exe | wc -l)
		if (($n >= 3)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "

cd ${WRF_FOLDER}/WRF-SFIRE
./compile -j $CPU_HALF_EVEN em_fire 2>&1 | tee compile.wrfsfire.log

export WRF_DIR=${WRF_FOLDER}/WRF-SFIRE



############################WPSV4.2#####################################
## WPS v4.2
## Downloaded from git tagged releases
# Cloned from openwfm
#Option 3 for gfortran and distributed memory
########################################################################
cd ${WRF_FOLDER}
git clone https://github.com/openwfm/WPS.git

cd ${WRF_FOLDER}/WPS
./clean -a

cd ${WRF_FOLDER}/WPS
if [ ${auto_config} -eq 1 ]
	then
		FFLAGS=$FFLAGS  echo 3 | ./configure 2>&1 | tee configure.log #Option 3 for gfortran and distributed memory
		else
		FFLAGS=$FFLAGS  ./configure 2>&1 | tee configure.log  #Option 3 gfortran compiler with distributed memory
fi

#sed statements for issue with GNUv10+

if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]
	then
sed -i '70s/-frecord-marker=4/-frecord-marker=4 -m64 -fallow-argument-mismatch/g' ${WRF_FOLDER}/WPS/configure.wps
sed -i '71s/-frecord-marker=4/-frecord-marker=4 -m64 -fallow-argument-mismatch/g' ${WRF_FOLDER}/WPS/configure.wps
fi

./compile 2>&1 | tee compile.wps.log


# IF statement to check that all files were created.
cd ${WRF_FOLDER}/WPS
n=$(ls ./*.exe | wc -l)
if (($n == 3)); then
	echo "All expected files created."
	read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
else
	echo "Missing one or more expected files."
	echo "Running compiler again"

	./compile 2>&1 | tee compile.wps2.log
	cd ${WRF_FOLDER}/WPS
	n=$(ls ./*.exe | wc -l)
	if (($n == 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
	else
		read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
		exit
	fi
fi

echo " "




######################## WPS Domain Setup Tools ########################
## DomainWizard
cd ${WRF_FOLDER}/Downloads
wget -c -4 http://esrl.noaa.gov/gsd/wrfportal/domainwizard/WRFDomainWizard.zip
mkdir ${WRF_FOLDER}/WRFDomainWizard
unzip WRFDomainWizard.zip -d ${WRF_FOLDER}/WRFDomainWizard
chmod +x ${WRF_FOLDER}/WRFDomainWizard/run_DomainWizard

echo " "
######################## WPF Portal Setup Tools ########################
## WRFPortal
cd ${WRF_FOLDER}/Downloads
wget -c -4 https://esrl.noaa.gov/gsd/wrfportal/portal/wrf-portal.zip
mkdir ${WRF_FOLDER}/WRFPortal
unzip wrf-portal.zip -d ${WRF_FOLDER}/WRFPortal
chmod +x ${WRF_FOLDER}/WRFPortal/runWRFPortal


echo " "

######################## Static Geography Data inc/ Optional ####################
# http://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
# These files are large so if you only need certain ones comment the others off
# All files downloaded and untarred is 200GB
# https://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
#################################################################################
cd ${WRF_FOLDER}/Downloads
mkdir ${WRF_FOLDER}/GEOG
mkdir ${WRF_FOLDER}/GEOG/WPS_GEOG

echo " "
echo "Mandatory WRF Preprocessing System (WPS) Geographical Input Data Mandatory Fields Downloads"
echo " "
wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_high_res_mandatory.tar.gz
tar -xvzf geog_high_res_mandatory.tar.gz -C ${WRF_FOLDER}/GEOG/

wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_low_res_mandatory.tar.gz
tar -xvzf geog_low_res_mandatory.tar.gz -C ${WRF_FOLDER}/GEOG/
mv ${WRF_FOLDER}/GEOG/WPS_GEOG_LOW_RES/ ${WRF_FOLDER}/GEOG/WPS_GEOG


if [ ${WPS_Specific_Applications} -eq 1 ]
	then
		echo " "
		echo " WPS Geographical Input Data Mandatory for Specific Applications"
		echo " "

		wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_thompson28_chem.tar.gz
		tar -xvzf geog_thompson28_chem.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_noahmp.tar.gz
		tar -xvzf geog_noahmp.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c -4  https://www2.mmm.ucar.edu/wrf/src/wps_files/irrigation.tar.gz
		tar -xvzf irrigation.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_px.tar.gz
		tar -xvzf geog_px.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_urban.tar.gz
		tar -xvzf geog_urban.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_ssib.tar.gz
		tar -xvzf geog_ssib.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/lake_depth.tar.bz2
		tar -xvf lake_depth.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/topobath_30s.tar.bz2
		tar -xvf topobath_30s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/gsl_gwd.tar.bz2
		tar -xvf gsl_gwd.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG
fi


if [ ${Optional_GEOG} -eq 1 ]
	then
		echo " "
		echo "Optional WPS Geographical Input Data"
		echo " "


		wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_older_than_2000.tar.gz
		tar -xvzf geog_older_than_2000.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s_with_lakes.tar.gz
		tar -xvzf modis_landuse_20class_15s_with_lakes.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_alt_lsm.tar.gz
		tar -xvzf geog_alt_lsm.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/nlcd2006_ll_9s.tar.bz2
		tar -xvf nlcd2006_ll_9s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/updated_Iceland_LU.tar.gz
		tar -xvf updated_Iceland_LU.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s.tar.bz2
		tar -xvf modis_landuse_20class_15s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG


  fi
fi

if [ "$macos_64bit_GNU" = "1" ] && [ "$SFIRE_PICK" = "1" ] && [ "$MAC_CHIP" = "Intel" ]; then

	#############################basic package managment############################

brew install autoconf
sleep 1
brew install automake
sleep 1
brew install bison
sleep 1
brew install byacc
sleep 1
brew install cmake
sleep 1
brew install curl
sleep 1
brew install flex
sleep 1
brew install gcc@12
sleep 1
brew install gnu-sed
sleep 1
brew install git
sleep 1
brew install java
sleep 1
brew install jpeg
sleep 1
brew install ksh
sleep 1
brew install libgeotiff
sleep 1
brew install libtool
sleep 1
brew install libtiff
sleep 1
brew install m4
sleep 1
brew install make
sleep 1
brew install python@3.10
sleep 1
brew install tcsh
sleep 1
brew install wget
sleep 1
brew install xauth
sleep 1
brew install xorgproto
sleep 1
brew install xorgrgb


 export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
 export PATH=/usr/local/bin:$PATH

 ##############################Directory Listing############################

 export HOME=$(
 	cd
 	pwd
 )
 mkdir $HOME/WRF_SFIRE
 export WRF_FOLDER=$HOME/WRF_SFIRE
 cd ${WRF_FOLDER}/
 mkdir Downloads
 mkdir Libs
 export DIR=${WRF_FOLDER}/Libs
 mkdir -p Libs/grib2
 mkdir -p Libs/NETCDF
 mkdir -p Tests/Environment
 mkdir -p Tests/Compatibility

 #############################Core Management####################################
 export CPU_CORE=$(sysctl -n hw.ncpu) # number of available threads on system
 export CPU_6CORE="6"
 export CPU_HALF=$(($CPU_CORE / 2))
 #1/2 of availble cores on system
 export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))
 #Forces CPU cores to even number to avoid partial core export. ie 7 cores would be 3.5 cores.

 if [ $CPU_CORE -le $CPU_6CORE ]; then #If statement for low core systems.  Forces computers to only use 1 core if there are 4 cores or less on the system.
 	export CPU_HALF_EVEN="2"
 else
 	export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))
 fi

 echo "##########################################"
 echo "Number of Threads being used $CPU_HALF_EVEN"
 echo "##########################################"
 echo " "

 ##############################Downloading Libraries############################

 cd ${WRF_FOLDER}/Downloads
 wget -c -4 https://github.com/madler/zlib/archive/refs/tags/v$Zlib_Version.tar.gz
 wget -c -4 https://github.com/HDFGroup/hdf5/archive/refs/tags/hdf5-$HDF5_Version.tar.gz
 wget -c -4 https://github.com/Unidata/netcdf-c/archive/refs/tags/v$Netcdf_C_Version.tar.gz
 wget -c -4 https://github.com/Unidata/netcdf-fortran/archive/refs/tags/v$Netcdf_Fortran_Version.tar.gz
 wget -c -4 https://download.sourceforge.net/libpng/libpng-$Libpng_Version.tar.gz
 wget -c -4 https://www.ece.uvic.ca/~frodo/jasper/software/jasper-$Jasper_Version.zip
 wget -c -4 https://github.com/pmodels/mpich/releases/download/v$Mpich_Version/mpich-$Mpich_Version.tar.gz
 wget -c -4 https://parallel-netcdf.github.io/Release/pnetcdf-$Pnetcdf_Version.tar.gz
 wget -c -4 https://github.com/openwfm/convert_geotiff/releases/download/v0.1/convert_geotiff-0.1.0.tar.gz

 echo " "

 #############################Compilers############################

 #Symlink to avoid clang conflicts with compilers
 #default gcc path /usr/bin/gcc
 #default homebrew path /usr/local/bin

 echo $PASSWD | sudo -S ln -sf /usr/local/bin/gcc-12 /usr/local/bin/gcc
 echo $PASSWD | sudo -S ln -sf /usr/local/bin/g++-12 /usr/local/bin/g++
 echo $PASSWD | sudo -S ln -sf /usr/local/bin/gfortran-12 /usr/local/bin/gfortran
 echo $PASSWD | sudo -S ln -sf /usr/local/bin/python3.10 /usr/local/bin/python3

 export CC=gcc
 export CXX=g++
 export FC=gfortran
 export F77=gfortran
 export CFLAGS="-fPIC -fPIE -Wno-implicit-function-declaration -Wall"

 echo " "

 #IF statement for GNU compiler issue
 export GCC_VERSION=$($CC -dumpfullversion | awk '{print$1}')
 export GFORTRAN_VERSION=$($FC -dumpfullversion | awk '{print$1}')
 export GPLUSPLUS_VERSION=$($CXX -dumpfullversion | awk '{print$1}')

 export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
 export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
 export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

 export version_10="10"

 if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
 	export fallow_argument=-fallow-argument-mismatch
 	export boz_argument=-fallow-invalid-boz
 else
 	export fallow_argument=
 	export boz_argument=
 fi

 export FFLAGS="$fallow_argument -m64"
 export FCFLAGS="$fallow_argument -m64"

 echo "##########################################"
 echo "FFLAGS = $FFLAGS"
 echo "FCFLAGS = $FCFLAGS"
 echo "##########################################"

 echo " "

 #############################zlib############################
 #Uncalling compilers due to comfigure issue with zlib1.2.12
 #With CC & CXX definied ./configure uses different compiler Flags

 cd ${WRF_FOLDER}/Downloads
 tar -xvzf v$Zlib_Version.tar.gz
 cd zlib-$Zlib_Version/
 autoreconf -i -f 2>&1 | tee autoreconf.log
 CC=$CC CXX=$CXX FC=$FC F77=$F77 ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
 automake -a -f 2>&1 | tee automake.log
 make -j $CPU_HALF_EVEN 2>&1 | tee make.log
 make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
 #make check

 echo " "

 ##############################MPICH############################
 cd ${WRF_FOLDER}/Downloads
 tar -xvzf mpich-$Mpich_Version.tar.gz
 cd mpich-$Mpich_Version/
 autoreconf -i -f 2>&1 | tee autoreconf.log
 F90= ./configure --prefix=$DIR/MPICH --with-device=ch3 FFLAGS="$fallow_argument -m64" FCFLAGS="$fallow_argument -m64" 2>&1 | tee configure.log
 automake -a -f 2>&1 | tee automake.log
 make -j $CPU_HALF_EVEN 2>&1 | tee install.log
 make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
 #make check

 export PATH=$DIR/MPICH/bin:$PATH
 export MPIFC=$DIR/MPICH/bin/mpifort
 export MPIF77=$DIR/MPICH/bin/mpifort
 export MPIF90=$DIR/MPICH/bin/mpifort
 export MPICC=$DIR/MPICH/bin/mpicc
 export MPICXX=$DIR/MPICH/bin/mpicxx

 echo " "

 read -r -t 3 -p
 #############################libpng############################
 cd ${WRF_FOLDER}/Downloads
 export LDFLAGS=-L$DIR/grib2/lib
 export CPPFLAGS=-I$DIR/grib2/include
 tar -xvzf libpng-$Libpng_Version.tar.gz
 cd libpng-$Libpng_Version/
 autoreconf -i -f 2>&1 | tee autoreconf.log
 CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
 automake -a -f 2>&1 | tee automake.log
 make -j $CPU_HALF_EVEN 2>&1 | tee make.log
 make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
 #make check

 echo " "
 #############################JasPer############################

 cd ${WRF_FOLDER}/Downloads
 unzip jasper-$Jasper_Version.zip
 cd jasper-$Jasper_Version/
 autoreconf -i -f 2>&1 | tee autoreconf.log
 CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
 automake -a -f 2>&1 | tee automake.log
 make -j $CPU_HALF_EVEN 2>&1 | tee make.log
 make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
 export JASPERLIB=$DIR/grib2/lib
 export JASPERINC=$DIR/grib2/include

 echo " "
 read -r -t 3 -p
 #############################hdf5 library for netcdf4 functionality############################

 cd ${WRF_FOLDER}/Downloads
 tar -xvzf hdf5-$HDF5_Version.tar.gz
 cd hdf5-hdf5-$HDF5_Version
 autoreconf -i -f 2>&1 | tee autoreconf.log
 CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX ./configure --prefix=$DIR/grib2 --with-zlib=$DIR/grib2 --enable-hl --enable-fortran --enable-parallel 2>&1 | tee configure.log
 automake -a -f 2>&1 | tee automake.log
 make -j $CPU_HALF_EVEN 2>&1 | tee make.log
 make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
 #make check

 export HDF5=$DIR/grib2
 export PHDF5=$DIR/grib2
 export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH

 echo " "
 read -r -t 3 -p
 #############################Install Parallel-netCDF##############################
 #Make file created with half of available cpu cores
 #Hard path for MPI added
 ##################################################################################
 cd ${WRF_FOLDER}/Downloads
 tar -xvzf pnetcdf-$Pnetcdf_Version.tar.gz
 cd pnetcdf-$Pnetcdf_Version
 export MPIFC=$DIR/MPICH/bin/mpifort
 export MPIF77=$DIR/MPICH/bin/mpifort
 export MPIF90=$DIR/MPICH/bin/mpifort
 export MPICC=$DIR/MPICH/bin/mpicc
 export MPICXX=$DIR/MPICH/bin/mpicxx
 autoreconf -i -f 2>&1 | tee autoreconf.log
 ./configure --prefix=$DIR/grib2 --enable-shared --enable-static 2>&1 | tee configure.log
 automake -a -f 2>&1 | tee automake.log
 make -j $CPU_HALF_EVEN 2>&1 | tee make.log
 make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
 #make check

 export PNETCDF=$DIR/grib2

 echo " "

 read -r -t 3 -p
 ##############################Install NETCDF C Library############################
 cd ${WRF_FOLDER}/Downloads
 tar -xzvf v$Netcdf_C_Version.tar.gz
 cd netcdf-c-$Netcdf_C_Version/
 export CPPFLAGS=-I$DIR/grib2/include
 export LDFLAGS=-L$DIR/grib2/lib
 export LIBS="-lhdf5_hl -lhdf5 -lz -lcurl -lgfortran -lgcc -lm -ldl -lpnetcdf"
 autoreconf -i -f 2>&1 | tee autoreconf.log
 CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 ./configure --prefix=$DIR/NETCDF --disable-dap --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-pnetcdf --enable-cdf5 --enable-parallel-tests 2>&1 | tee configure.log
 automake -a -f 2>&1 | tee automake.log
 make -j $CPU_HALF_EVEN 2>&1 | tee make.log
 make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
 #make check

 export PATH=$DIR/NETCDF/bin:$PATH
 export NETCDF=$DIR/NETCDF
 echo " "
 read -r -t 3 -p
 ##############################NetCDF fortran library############################
 cd ${WRF_FOLDER}/Downloads
 tar -xvzf v$Netcdf_Fortran_Version.tar.gz
 cd netcdf-fortran-$Netcdf_Fortran_Version/
 export LD_LIBRARY_PATH=$DIR/NETCDF/lib:$LD_LIBRARY_PATH
 export CPPFLAGS="-I$DIR/NETCDF/include -I$DIR/grib2/include"
 export LDFLAGS="-L$DIR/NETCDF/lib -L$DIR/grib2/lib"
 export LIBS="-lnetcdf -lpnetcdf -lcurl -lhdf5_hl -lhdf5 -lz -lm -ldl -lgcc -lgfortran"
 autoreconf -i -f 2>&1 | tee autoreconf.log
 CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 ./configure --prefix=$DIR/NETCDF --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-parallel-tests --enable-hdf5 2>&1 | tee configure.log
 automake -a -f 2>&1 | tee automake.log
 make -j $CPU_HALF_EVEN 2>&1 | tee make.log
 make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
 #make check

 echo " "
 read -r -t 3 -p
 ############################# Convert Geo Tiff #################################

 cd ${WRF_FOLDER}/Downloads
 tar -xzvf convert_geotiff-0.1.0.tar.gz
 cd convert_geotiff-0.1.0

 # Adjust CPP flags for Geo Tiff

 export TIFF_LIB=$(echo /usr/local/Cellar/libtiff/*/lib)
 export TIFF_INC=$(echo /usr/local/Cellar/libtiff/*/include)
 export GEOTIFF_LIB=$(echo /usr/local/Cellar/libgeotiff/*/lib)
 export GEOTIFF_INC=$(echo /usr/local/Cellar/libgeotiff/*/include)

 export CPPFLAGS="-I$DIR/NETCDF/include -I$DIR/grib2/include -I$GEOTIFF_INC -I$TIFF_INC"
 export LDFLAGS="-L$DIR/NETCDF/lib -L$DIR/grib2/lib -L$GEOTIFF_LIB -L$TIFF_LIB"
 autoreconf -i -f 2>&1 | tee autoreconf.log
 CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 ./configure -exec-prefix=$DIR/grib2 --prefix=$DIR/grib2 2>&1 | tee configure.log
 automake -a -f 2>&1 | tee automake.log
 make -j $CPU_HALF_EVEN 2>&1 | tee make.log
 make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log

 # Changes flags back to netcdf only
 export CPPFLAGS="-I$DIR/NETCDF/include -I$DIR/grib2/include"
 export LDFLAGS="-L$DIR/NETCDF/lib -L$DIR/grib2/lib"
 export LIBS="-lnetcdf -lpnetcdf -lcurl -lhdf5_hl -lhdf5 -lz -lm -ldl -lgcc -lgfortran"

 read -r -t 3 -p
 #################################### System Environment Tests ##############
 mkdir -p ${WRF_FOLDER}/Tests/Environment
 mkdir -p ${WRF_FOLDER}/Tests/Compatibility

 cd ${WRF_FOLDER}/Downloads
 wget -c -4 https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_NETCDF_MPI_tests.tar
 wget -c -4 https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_tests.tar

 tar -xvf Fortran_C_tests.tar -C ${WRF_FOLDER}/Tests/Environment
 tar -xvf Fortran_C_NETCDF_MPI_tests.tar -C ${WRF_FOLDER}/Tests/Compatibility
 export one="1"
 echo " "
 ############## Testing Environment #####

 cd ${WRF_FOLDER}/Tests/Environment

 echo " "
 echo " "
 echo "Environment Testing "
 echo "Test 1"
 gfortran-12 TEST_1_fortran_only_fixed.f
 ./a.out | tee env_test1.txt
 export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test1.txt | awk '{print$1}')
 if [ $TEST_PASS -ge 1 ]; then
 	echo "Enviroment Test 1 Passed"
 else
 	echo "Environment Compiler Test 1 Failed"
 	exit
 fi
 read -r -t 3 -p "I am going to wait for 3 seconds only ..."

 echo " "
 echo "Test 2"
 gfortran-12 TEST_2_fortran_only_free.f90
 ./a.out | tee env_test2.txt
 export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test2.txt | awk '{print$1}')
 if [ $TEST_PASS -ge 1 ]; then
 	echo "Enviroment Test 2 Passed"
 else
 	echo "Environment Compiler Test 2 Failed"
 	exit
 fi
 echo " "
 read -r -t 3 -p "I am going to wait for 3 seconds only ..."

 echo " "
 echo "Test 3"
 gcc-12 TEST_3_c_only.c
 ./a.out | tee env_test3.txt
 export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test3.txt | awk '{print$1}')
 if [ $TEST_PASS -ge 1 ]; then
 	echo "Enviroment Test 3 Passed"
 else
 	echo "Environment Compiler Test 3 Failed"
 	exit
 fi
 echo " "
 read -r -t 3 -p "I am going to wait for 3 seconds only ..."

 echo " "
 echo "Test 4"
 gcc-12 -c -m64 TEST_4_fortran+c_c.c
 gfortran-12 -c -m64 TEST_4_fortran+c_f.f90
 gfortran-12 -m64 TEST_4_fortran+c_f.o TEST_4_fortran+c_c.o
 ./a.out | tee env_test4.txt
 export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test4.txt | awk '{print$1}')
 if [ $TEST_PASS -ge 1 ]; then
 	echo "Enviroment Test 4 Passed"
 else
 	echo "Environment Compiler Test 4 Failed"
 	exit
 fi
 echo " "
 read -r -t 3 -p "I am going to wait for 3 seconds only ..."

 echo " "
 ############## Testing Environment #####

 cd ${WRF_FOLDER}/Tests/Compatibility

 cp ${NETCDF}/include/netcdf.inc .

 echo " "
 echo " "
 echo "Library Compatibility Tests "
 echo "Test 1"
 gfortran-12 -c 01_fortran+c+netcdf_f.f
 $CC -c 01_fortran+c+netcdf_c.c
 gfortran-12 01_fortran+c+netcdf_f.o 01_fortran+c+netcdf_c.o \
 	-L${NETCDF}/lib -lnetcdff -lnetcdf

 ./a.out | tee comp_test1.txt
 export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test1.txt | awk '{print$1}')
 if [ $TEST_PASS -ge 1 ]; then
 	echo "Compatibility Test 1 Passed"
 else
 	echo "Compatibility Compiler Test 1 Failed"
 	exit
 fi
 echo " "
 read -r -t 3 -p "I am going to wait for 3 seconds only ..."

 echo " "

 echo "Test 2"
 $MPIFC -c 02_fortran+c+netcdf+mpi_f.f
 $MPICC -c 02_fortran+c+netcdf+mpi_c.c
 $MPIFC 02_fortran+c+netcdf+mpi_f.o \
 	02_fortran+c+netcdf+mpi_c.o \
 	-L${NETCDF}/lib -lnetcdff -lnetcdf

 $DIR/MPICH/bin/mpirun ./a.out | tee comp_test2.txt
 export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test2.txt | awk '{print$1}')
 if [ $TEST_PASS -ge 1 ]; then
 	echo "Compatibility Test 2 Passed"
 else
 	echo "Compatibility Compiler Test 2 Failed"
 	exit
 fi
 echo " "
 read -r -t 3 -p "I am going to wait for 3 seconds only ..."
 echo " "

 echo " All tests completed and passed"
 echo " "
 read -r -t 3 -p
 #Installing Miniconda3 to WRF directory and updating libraries
 export Miniconda_Install_DIR=${WRF_FOLDER}/miniconda3

 mkdir -p $Miniconda_Install_DIR

 wget -c -4 https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O $Miniconda_Install_DIR/miniconda.sh
 bash $Miniconda_Install_DIR/miniconda.sh -b -u -p $Miniconda_Install_DIR

 rm -rf $Miniconda_Install_DIR/miniconda.sh

 export PATH=$WRFHYDRO_FOLDER/miniconda3/bin:$PATH

 source $Miniconda_Install_DIR/etc/profile.d/conda.sh

 $Miniconda_Install_DIR/bin/conda init bash
 $Miniconda_Install_DIR/bin/conda init zsh
 $Miniconda_Install_DIR/bin/conda init tcsh
 $Miniconda_Install_DIR/bin/conda init xonsh
 $Miniconda_Install_DIR/bin/conda init powershell

 conda config --add channels conda-forge
 conda config --set auto_activate_base false
 conda update -n root --all -y

 echo " "

 #Installing NCL via Conda
 source $Miniconda_Install_DIR/etc/profile.d/conda.sh
 conda init bash
 conda activate base
 conda create -n ncl_stable -c conda-forge ncl -y
 conda activate ncl_stable

 conda deactivate
 conda deactivate
 conda deactivate
 echo " "

 ##################### WRF Python           ##################
 ########### WRf-Python compiled via Conda  ##################
 ########### This is the preferred method by NCAR      ##################
 ##### https://wrf-python.readthedocs.io/en/latest/installation.html  ##################
 source $Miniconda_Install_DIR/etc/profile.d/conda.sh
conda env create -f $HOME/WRF-MOSIT/wrf-python-stable.yml

 ######################### Climate Data Operators ############
 ######################### CDO compiled via Conda ###########
 ####################### This is the preferred method #######
 ################### https://bairdlangenbrunner.github.io/python-for-climate-scientists/conda/setting-up-conda-environments.html #######################

 source $Miniconda_Install_DIR/etc/profile.d/conda.sh
 conda init bash
 conda activate base
 conda create --name cdo_stable -y
 source activate cdo_stable
 conda install -c conda-forge cdo -y
 conda update --all -y
 conda deactivate
 conda deactivate
 conda deactivate

 echo " "

 ################################## QGIS #####################################
 #QGIS (Quantum Geographic Information System) is a free and open-source platform that allows users to
 #analyze, view, and edit geospatial data. It supports both vector and raster layers, as well as various #web services, and is extensible through community-developed plugins. Key features include map
 #creation, spatial analysis, and data management.
 #############################################################################

 conda env create -f $HOME/WRF-MOSIT/qgis.3.28.8.yml

 echo " "

 read -r -t 3 -p
 ############################ WRF-SFIRE  #################################
 ## WRF-SFIRE
 # Cloned from openwfm
 # option 34, option 1 for gfortran and distributed memory w/basic nesting
 # large file support enable with WRFiO_NCD_LARGE_FILE_SUPPORT=1
 ########################################################################
 cd ${WRF_FOLDER}
 git clone https://github.com/openwfm/WRF-SFIRE.git

 cd ${WRF_FOLDER}/WRF-SFIRE/
 ./clean -a # Clean old configuration files

 if [ ${auto_config} -eq 1 ]; then
 	sed -i '428s/.*/  $response = "17 \\n";/g' ${WRF_FOLDER}/WRF-SFIRE/arch/Config.pl # Answer for compiler choice
 	sed -i '869s/.*/  $response = "1 \\n";/g' ${WRF_FOLDER}/WRF-SFIRE/arch/Config.pl  #Answer for basic nesting
 	./configure 2>&1 | tee configure.log
 else
 	./configure 2>&1 | tee configure.log #Option 17 gfortran compiler with distributed memory option 1 for basic nesting
 fi

 sed -i'' -e '145s/-c/-c -fPIC -fPIE -O3  -Wno-error=implicit-function-declaration/g' configure.wrf

 ./compile -j $CPU_HALF_EVEN em_real 2>&1 | tee compile.wrf1.log

 # IF statement to check that all files were created.
 cd ${WRF_FOLDER}/WRF-SFIRE/main
 n=$(ls ./*.exe | wc -l)
 if (($n >= 3)); then
 	echo "All expected files created."
 	read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
 else
 	echo "Missing one or more expected files."
 	echo "Running compiler again"
 	cd ${WRF_FOLDER}/WRF-SFIRE/
 	./compile -j $CPU_HALF_EVEN em_real 2>&1 | tee compile.wrf2.log
 	cd ${WRF_FOLDER}/WRF-SFIRE/main
 	n=$(ls ./*.exe | wc -l)
 	if (($n >= 3)); then
 		echo "All expected files created."
 		read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
 	else
 		read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
 		exit
 	fi
 fi

 echo " "

 read -r -t 3 -p
 cd ${WRF_FOLDER}/WRF-SFIRE
 ./compile -j $CPU_HALF_EVEN em_fire 2>&1 | tee compile.wrfsfire.log

 export WRF_DIR=${WRF_FOLDER}/WRF-SFIRE

 read -r -t 3 -p
 ############################WPSV4.2#####################################
 ## WPS v4.2
 ## Downloaded from git tagged releases
 # Cloned from openwfm
 #Option 3 for gfortran and distributed memory
 ########################################################################
 cd ${WRF_FOLDER}
 git clone https://github.com/openwfm/WPS.git

 cd ${WRF_FOLDER}/WPS
 ./clean -a

 cd ${WRF_FOLDER}/WPS
 if [ ${auto_config} -eq 1 ]; then
 	FFLAGS=$FFLAGS echo 19 | ./configure 2>&1 | tee configure.log #Option 19 for gfortran and distributed memory
 else
 	FFLAGS=$FFLAGS ./configure 2>&1 | tee configure.log #Option 19 gfortran compiler with distributed memory
 fi

 #sed statements for issue with GNUv10+

 if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
 	sed -i '70s/-frecord-marker=4/-frecord-marker=4 -m64 -fallow-argument-mismatch/g' ${WRF_FOLDER}/WPS/configure.wps
 	sed -i '71s/-frecord-marker=4/-frecord-marker=4 -m64 -fallow-argument-mismatch/g' ${WRF_FOLDER}/WPS/configure.wps
 fi

 ./compile 2>&1 | tee compile.wps.log

 # IF statement to check that all files were created.
 cd ${WRF_FOLDER}/WPS
 n=$(ls ./*.exe | wc -l)
 if (($n == 3)); then
 	echo "All expected files created."
 	read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
 else
 	echo "Missing one or more expected files."
 	echo "Running compiler again"

 	./compile 2>&1 | tee compile.wps2.log
 	cd ${WRF_FOLDER}/WPS
 	n=$(ls ./*.exe | wc -l)
 	if (($n == 3)); then
 		echo "All expected files created."
 		read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
 	else
 		read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
 		exit
 	fi
 fi

 echo " "

 read -r -t 3 -p
 ######################## WPS Domain Setup Tools ########################
 ## DomainWizard
 cd ${WRF_FOLDER}/Downloads
 wget -c -4 http://esrl.noaa.gov/gsd/wrfportal/domainwizard/WRFDomainWizard.zip
 mkdir ${WRF_FOLDER}/WRFDomainWizard
 unzip WRFDomainWizard.zip -d ${WRF_FOLDER}/WRFDomainWizard
 chmod +x ${WRF_FOLDER}/WRFDomainWizard/run_DomainWizard

 echo " "
 ######################## WPF Portal Setup Tools ########################
 ## WRFPortal
 cd ${WRF_FOLDER}/Downloads
 wget -c -4 https://esrl.noaa.gov/gsd/wrfportal/portal/wrf-portal.zip
 mkdir ${WRF_FOLDER}/WRFPortal
 unzip wrf-portal.zip -d ${WRF_FOLDER}/WRFPortal
 chmod +x ${WRF_FOLDER}/WRFPortal/runWRFPortal

 echo " "

 ######################## Static Geography Data inc/ Optional ####################
 # http://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
 # These files are large so if you only need certain ones comment the others off
 # All files downloaded and untarred is 200GB
 # https://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
 #################################################################################
 cd ${WRF_FOLDER}/Downloads
 mkdir ${WRF_FOLDER}/GEOG
 mkdir ${WRF_FOLDER}/GEOG/WPS_GEOG

 echo " "
 echo "Mandatory WRF Preprocessing System (WPS) Geographical Input Data Mandatory Fields Downloads"
 echo " "
 wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_high_res_mandatory.tar.gz
 tar -xvzf geog_high_res_mandatory.tar.gz -C ${WRF_FOLDER}/GEOG/

 wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_low_res_mandatory.tar.gz
 tar -xvzf geog_low_res_mandatory.tar.gz -C ${WRF_FOLDER}/GEOG/
 mv ${WRF_FOLDER}/GEOG/WPS_GEOG_LOW_RES/ ${WRF_FOLDER}/GEOG/WPS_GEOG

 if [ ${WPS_Specific_Applications} -eq 1 ]; then
 	echo " "
 	echo " WPS Geographical Input Data Mandatory for Specific Applications"
 	echo " "

 	wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_thompson28_chem.tar.gz
 	tar -xvzf geog_thompson28_chem.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

 	wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_noahmp.tar.gz
 	tar -xvzf geog_noahmp.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

 	wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/irrigation.tar.gz
 	tar -xvzf irrigation.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

 	wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_px.tar.gz
 	tar -xvzf geog_px.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

 	wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_urban.tar.gz
 	tar -xvzf geog_urban.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

 	wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_ssib.tar.gz
 	tar -xvzf geog_ssib.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

 	wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/lake_depth.tar.bz2
 	tar -xvf lake_depth.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

 	wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/topobath_30s.tar.bz2
 	tar -xvf topobath_30s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

 	wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/gsl_gwd.tar.bz2
 	tar -xvf gsl_gwd.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG
 fi

 if [ ${Optional_GEOG} -eq 1 ]; then
 	echo " "
 	echo "Optional WPS Geographical Input Data"
 	echo " "

 	wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_older_than_2000.tar.gz
 	tar -xvzf geog_older_than_2000.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

 	wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s_with_lakes.tar.gz
 	tar -xvzf modis_landuse_20class_15s_with_lakes.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

 	wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_alt_lsm.tar.gz
 	tar -xvzf geog_alt_lsm.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

 	wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/nlcd2006_ll_9s.tar.bz2
 	tar -xvf nlcd2006_ll_9s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

 	wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/updated_Iceland_LU.tar.gz
 	tar -xvf updated_Iceland_LU.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

 	wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s.tar.bz2
 	tar -xvf modis_landuse_20class_15s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

 fi
fi

if [ "$macos_64bit_GNU" = "1" ] && [ "$SFIRE_PICK" = "1" ] && [ "$MAC_CHIP" = "ARM" ]; then

	#############################basic package managment############################

brew install autoconf
sleep 1
brew install automake
sleep 1
brew install bison
sleep 1
brew install byacc
sleep 1
brew install cmake
sleep 1
brew install curl
sleep 1
brew install flex
sleep 1
brew install gcc@12
sleep 1
brew install gnu-sed
sleep 1
brew install git
sleep 1
brew install java
sleep 1
brew install jpeg
sleep 1
brew install ksh
sleep 1
brew install libgeotiff
sleep 1
brew install libtool
sleep 1
brew install libtiff
sleep 1
brew install m4
sleep 1
brew install make
sleep 1
brew install python@3.10
sleep 1
brew install tcsh
sleep 1
brew install wget
sleep 1
brew install xauth
sleep 1
brew install xorgproto
sleep 1
brew install xorgrgb


	export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
	export PATH=/usr/local/bin:$PATH

	##############################Directory Listing############################

	export HOME=$(
		cd
		pwd
	)
	mkdir $HOME/WRF_SFIRE
	export WRF_FOLDER=$HOME/WRF_SFIRE
	cd ${WRF_FOLDER}/
	mkdir Downloads
	mkdir Libs
	export DIR=${WRF_FOLDER}/Libs
	mkdir -p Libs/grib2
	mkdir -p Libs/NETCDF
	mkdir -p Tests/Environment
	mkdir -p Tests/Compatibility

	#############################Core Management####################################
	export CPU_CORE=$(sysctl -n hw.ncpu) # number of available threads on system
	export CPU_6CORE="6"
	export CPU_HALF=$(($CPU_CORE / 2))
	#1/2 of availble cores on system
	export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))
	#Forces CPU cores to even number to avoid partial core export. ie 7 cores would be 3.5 cores.

	if [ $CPU_CORE -le $CPU_6CORE ]; then #If statement for low core systems.  Forces computers to only use 1 core if there are 4 cores or less on the system.
		export CPU_HALF_EVEN="2"
	else
		export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))
	fi

	echo "##########################################"
	echo "Number of Threads being used $CPU_HALF_EVEN"
	echo "##########################################"
	echo " "

	##############################Downloading Libraries############################

	cd ${WRF_FOLDER}/Downloads
	wget -c -4 https://github.com/madler/zlib/archive/refs/tags/v$Zlib_Version.tar.gz
	wget -c -4 https://github.com/HDFGroup/hdf5/archive/refs/tags/hdf5-$HDF5_Version.tar.gz
	wget -c -4 https://github.com/Unidata/netcdf-c/archive/refs/tags/v$Netcdf_C_Version.tar.gz
	wget -c -4 https://github.com/Unidata/netcdf-fortran/archive/refs/tags/v$Netcdf_Fortran_Version.tar.gz
	wget -c -4 https://download.sourceforge.net/libpng/libpng-$Libpng_Version.tar.gz
	wget -c -4 https://www.ece.uvic.ca/~frodo/jasper/software/jasper-$Jasper_Version.zip
	wget -c -4 https://github.com/pmodels/mpich/releases/download/v$Mpich_Version/mpich-$Mpich_Version.tar.gz
	wget -c -4 https://parallel-netcdf.github.io/Release/pnetcdf-$Pnetcdf_Version.tar.gz
	wget -c -4 https://github.com/openwfm/convert_geotiff/releases/download/v0.1/convert_geotiff-0.1.0.tar.gz

	echo " "

	#############################Compilers############################

	#Symlink to avoid clang conflicts with compilers
	#default gcc path /usr/bin/gcc
	#default homebrew path /opt/homebrew/bin
	echo $PASSWD | sudo -S unlink /opt/homebrew/bin/gfortran
	echo $PASSWD | sudo -S unlink /opt/homebrew/bin/gcc
	echo $PASSWD | sudo -S unlink /opt/homebrew/bin/g++

	source ~./bashrc
	gcc --version
	g++ --version
	gfortran --version

	cd /opt/homebrew/bin

	echo $PASSWD | sudo -S ln -sf gcc-12 gcc
	echo $PASSWD | sudo -S ln -sf g++-12 g++
	echo $PASSWD | sudo -S ln -sf gfortran-12 gfortran

	cd
	source ~/.bashrc
	source ~/.bash_profile
	gcc --version
	g++ --version
	gfortran --version

	export CC=gcc
	export CXX=g++
	export FC=gfortran
	export F77=gfortran
	export CFLAGS="-fPIC -fPIE -Wno-implicit-function-declaration -Wall"

	echo " "

	#IF statement for GNU compiler issue
	export GCC_VERSION=$(gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		export fallow_argument=-fallow-argument-mismatch
		export boz_argument=-fallow-invalid-boz
	else
		export fallow_argument=
		export boz_argument=
	fi

	export FFLAGS="$fallow_argument -m64"
	export FCFLAGS="$fallow_argument -m64"

	echo "##########################################"
	echo "FFLAGS = $FFLAGS"
	echo "FCFLAGS = $FCFLAGS"
	echo "##########################################"

	echo " "

	#############################zlib############################
	#Uncalling compilers due to comfigure issue with zlib1.2.12
	#With CC & CXX definied ./configure uses different compiler Flags

	cd ${WRF_FOLDER}/Downloads
	tar -xvzf v$Zlib_Version.tar.gz
	cd zlib-$Zlib_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log
	CC=$CC CXX=$CXX FC=$FC F77=$F77 ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "

	##############################MPICH############################
	cd ${WRF_FOLDER}/Downloads
	tar -xvzf mpich-$Mpich_Version.tar.gz
	cd mpich-$Mpich_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log
	F90= ./configure --prefix=$DIR/MPICH --with-device=ch3 FFLAGS="$fallow_argument -m64" FCFLAGS="$fallow_argument -m64" 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee install.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PATH=$DIR/MPICH/bin:$PATH
	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx

	echo " "

	read -r -t 3 -p
	#############################libpng############################
	cd ${WRF_FOLDER}/Downloads
	export LDFLAGS=-L$DIR/grib2/lib
	export CPPFLAGS=-I$DIR/grib2/include
	tar -xvzf libpng-$Libpng_Version.tar.gz
	cd libpng-$Libpng_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log
	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "
	#############################JasPer############################

	cd ${WRF_FOLDER}/Downloads
	unzip jasper-$Jasper_Version.zip
	cd jasper-$Jasper_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log
	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	export JASPERLIB=$DIR/grib2/lib
	export JASPERINC=$DIR/grib2/include

	echo " "
	read -r -t 3 -p
	#############################hdf5 library for netcdf4 functionality############################

	cd ${WRF_FOLDER}/Downloads
	tar -xvzf hdf5-$HDF5_Version.tar.gz
	cd hdf5-hdf5-$HDF5_Version
	autoreconf -i -f 2>&1 | tee autoreconf.log
	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX ./configure --prefix=$DIR/grib2 --with-zlib=$DIR/grib2 --enable-hl --enable-fortran --enable-parallel 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export HDF5=$DIR/grib2
	export PHDF5=$DIR/grib2
	export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH

	echo " "
	read -r -t 3 -p
	#############################Install Parallel-netCDF##############################
	#Make file created with half of available cpu cores
	#Hard path for MPI added
	##################################################################################
	cd ${WRF_FOLDER}/Downloads
	tar -xvzf pnetcdf-$Pnetcdf_Version.tar.gz
	cd pnetcdf-$Pnetcdf_Version
	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx
	autoreconf -i -f 2>&1 | tee autoreconf.log
	./configure --prefix=$DIR/grib2 --enable-shared --enable-static 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PNETCDF=$DIR/grib2

	echo " "

	read -r -t 3 -p
	##############################Install NETCDF C Library############################
	cd ${WRF_FOLDER}/Downloads
	tar -xzvf v$Netcdf_C_Version.tar.gz
	cd netcdf-c-$Netcdf_C_Version/
	export CPPFLAGS=-I$DIR/grib2/include
	export LDFLAGS=-L$DIR/grib2/lib
	export LIBS="-lhdf5_hl -lhdf5 -lz -lcurl -lgfortran -lgcc -lm -ldl -lpnetcdf"
	autoreconf -i -f 2>&1 | tee autoreconf.log
	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 ./configure --prefix=$DIR/NETCDF --disable-dap --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-pnetcdf --enable-cdf5 --enable-parallel-tests 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PATH=$DIR/NETCDF/bin:$PATH
	export NETCDF=$DIR/NETCDF
	echo " "
	read -r -t 3 -p
	##############################NetCDF fortran library############################
	cd ${WRF_FOLDER}/Downloads
	tar -xvzf v$Netcdf_Fortran_Version.tar.gz
	cd netcdf-fortran-$Netcdf_Fortran_Version/
	export LD_LIBRARY_PATH=$DIR/NETCDF/lib:$LD_LIBRARY_PATH
	export CPPFLAGS="-I$DIR/NETCDF/include -I$DIR/grib2/include"
	export LDFLAGS="-L$DIR/NETCDF/lib -L$DIR/grib2/lib"
	export LIBS="-lnetcdf -lpnetcdf -lcurl -lhdf5_hl -lhdf5 -lz -lm -ldl -lgcc -lgfortran"
	autoreconf -i -f 2>&1 | tee autoreconf.log
	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 ./configure --prefix=$DIR/NETCDF --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-parallel-tests --enable-hdf5 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "
	read -r -t 3 -p
	############################# Convert Geo Tiff #################################

	cd ${WRF_FOLDER}/Downloads
	tar -xzvf convert_geotiff-0.1.0.tar.gz
	cd convert_geotiff-0.1.0

	# Adjust CPP flags for Geo Tiff

	export TIFF_LIB=$(echo /usr/local/Cellar/libtiff/*/lib)
	export TIFF_INC=$(echo /usr/local/Cellar/libtiff/*/include)
	export GEOTIFF_LIB=$(echo /usr/local/Cellar/libgeotiff/*/lib)
	export GEOTIFF_INC=$(echo /usr/local/Cellar/libgeotiff/*/include)

	export CPPFLAGS="-I$DIR/NETCDF/include -I$DIR/grib2/include -I$GEOTIFF_INC -I$TIFF_INC"
	export LDFLAGS="-L$DIR/NETCDF/lib -L$DIR/grib2/lib -L$GEOTIFF_LIB -L$TIFF_LIB"
	autoreconf -i -f 2>&1 | tee autoreconf.log
	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 ./configure -exec-prefix=$DIR/grib2 --prefix=$DIR/grib2 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log

	# Changes flags back to netcdf only
	export CPPFLAGS="-I$DIR/NETCDF/include -I$DIR/grib2/include"
	export LDFLAGS="-L$DIR/NETCDF/lib -L$DIR/grib2/lib"
	export LIBS="-lnetcdf -lpnetcdf -lcurl -lhdf5_hl -lhdf5 -lz -lm -ldl -lgcc -lgfortran"

	read -r -t 3 -p
	#################################### System Environment Tests ##############
	mkdir -p ${WRF_FOLDER}/Tests/Environment
	mkdir -p ${WRF_FOLDER}/Tests/Compatibility

	cd ${WRF_FOLDER}/Downloads
	wget -c -4 https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_NETCDF_MPI_tests.tar
	wget -c -4 https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_tests.tar

	tar -xvf Fortran_C_tests.tar -C ${WRF_FOLDER}/Tests/Environment
	tar -xvf Fortran_C_NETCDF_MPI_tests.tar -C ${WRF_FOLDER}/Tests/Compatibility
	export one="1"
	echo " "
	############## Testing Environment #####

	cd ${WRF_FOLDER}/Tests/Environment

	echo " "
	echo " "
	echo "Environment Testing "
	echo "Test 1"
	gfortran-12 TEST_1_fortran_only_fixed.f
	./a.out | tee env_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 1 Passed"
	else
		echo "Environment Compiler Test 1 Failed"
		exit
	fi
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 2"
	gfortran-12 TEST_2_fortran_only_free.f90
	./a.out | tee env_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 2 Passed"
	else
		echo "Environment Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 3"
	gcc-12 TEST_3_c_only.c
	./a.out | tee env_test3.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test3.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 3 Passed"
	else
		echo "Environment Compiler Test 3 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 4"
	gcc-12 -c -m64 TEST_4_fortran+c_c.c
	gfortran-12 -c -m64 TEST_4_fortran+c_f.f90
	gfortran-12 -m64 TEST_4_fortran+c_f.o TEST_4_fortran+c_c.o
	./a.out | tee env_test4.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test4.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 4 Passed"
	else
		echo "Environment Compiler Test 4 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	############## Testing Environment #####

	cd ${WRF_FOLDER}/Tests/Compatibility

	cp ${NETCDF}/include/netcdf.inc .

	echo " "
	echo " "
	echo "Library Compatibility Tests "
	echo "Test 1"
	gfortran-12 -c 01_fortran+c+netcdf_f.f
	$CC -c 01_fortran+c+netcdf_c.c
	gfortran-12 01_fortran+c+netcdf_f.o 01_fortran+c+netcdf_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	./a.out | tee comp_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 1 Passed"
	else
		echo "Compatibility Compiler Test 1 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "

	echo "Test 2"
	$MPIFC -c 02_fortran+c+netcdf+mpi_f.f
	$MPICC -c 02_fortran+c+netcdf+mpi_c.c
	$MPIFC 02_fortran+c+netcdf+mpi_f.o \
		02_fortran+c+netcdf+mpi_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	$DIR/MPICH/bin/mpirun ./a.out | tee comp_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 2 Passed"
	else
		echo "Compatibility Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."
	echo " "

	echo " All tests completed and passed"
	echo " "
	read -r -t 3 -p

	Installing Miniconda3 to WRF directory and updating libraries
	#export Miniconda_Install_DIR=${WRF_FOLDER}/miniconda3

	mkdir -p $Miniconda_Install_DIR

	wget -c -4 https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O $Miniconda_Install_DIR/miniconda.sh
	bash $Miniconda_Install_DIR/miniconda.sh -b -u -p $Miniconda_Install_DIR

	rm -rf $Miniconda_Install_DIR/miniconda.sh

	export PATH=$WRFHYDRO_FOLDER/miniconda3/bin:$PATH

	source $Miniconda_Install_DIR/etc/profile.d/conda.sh

	$Miniconda_Install_DIR/bin/conda init bash
	$Miniconda_Install_DIR/bin/conda init zsh
	$Miniconda_Install_DIR/bin/conda init tcsh
	$Miniconda_Install_DIR/bin/conda init xonsh
	$Miniconda_Install_DIR/bin/conda init powershell

	conda config --add channels conda-forge
	conda config --set auto_activate_base false
	conda update -n root --all -y

	echo " "

	#Installing NCL via Conda
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda init bash
	conda activate base
	conda create -n ncl_stable -c conda-forge ncl -y
	conda activate ncl_stable

	conda deactivate
	conda deactivate
	conda deactivate
	echo " "

	##################### WRF Python           ##################
	########### WRf-Python compiled via Conda  ##################
	########### This is the preferred method by NCAR      ##################
	##### https://wrf-python.readthedocs.io/en/latest/installation.html  ##################
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
conda env create -f $HOME/WRF-MOSIT/wrf-python-stable.yml

	######################### Climate Data Operators ############
	######################### CDO compiled via Conda ###########
	####################### This is the preferred method #######
	################### https://bairdlangenbrunner.github.io/python-for-climate-scientists/conda/setting-up-conda-environments.html #######################

	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda init bash
	conda activate base
	conda create --name cdo_stable -y
	source activate cdo_stable
	conda install -c conda-forge cdo -y
	conda update --all -y
	conda deactivate
	conda deactivate
	conda deactivate

	echo " "

	################################## QGIS #####################################
	#QGIS (Quantum Geographic Information System) is a free and open-source platform that allows users to
	#analyze, view, and edit geospatial data. It supports both vector and raster layers, as well as various #web services, and is extensible through community-developed plugins. Key features include map
	#creation, spatial analysis, and data management.
	#############################################################################

	conda env create -f $HOME/WRF-MOSIT/qgis.3.28.8.yml

	echo " "

	read -r -t 3 -p
	############################ WRF-SFIRE  #################################
	## WRF-SFIRE
	# Cloned from openwfm
	# option 34, option 1 for gfortran and distributed memory w/basic nesting
	# large file support enable with WRFiO_NCD_LARGE_FILE_SUPPORT=1
	########################################################################
	cd ${WRF_FOLDER}
	git clone https://github.com/openwfm/WRF-SFIRE.git

	cd ${WRF_FOLDER}/WRF-SFIRE/
	./clean -a # Clean old configuration files

	if [ ${auto_config} -eq 1 ]; then
		sed -i '428s/.*/  $response = "17 \\n";/g' ${WRF_FOLDER}/WRF-SFIRE/arch/Config.pl # Answer for compiler choice
		sed -i '869s/.*/  $response = "1 \\n";/g' ${WRF_FOLDER}/WRF-SFIRE/arch/Config.pl  #Answer for basic nesting
		./configure 2>&1 | tee configure.log
	else
		./configure 2>&1 | tee configure.log #Option 17 gfortran compiler with distributed memory option 1 for basic nesting
	fi

	sed -i'' -e '145s/-c/-c -fPIC -fPIE -O3  -Wno-error=implicit-function-declaration/g' configure.wrf

	./compile -j $CPU_HALF_EVEN em_real 2>&1 | tee compile.wrf1.log

	# IF statement to check that all files were created.
	cd ${WRF_FOLDER}/WRF-SFIRE/main
	n=$(ls ./*.exe | wc -l)
	if (($n >= 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		cd ${WRF_FOLDER}/WRF-SFIRE/
		./compile -j $CPU_HALF_EVEN em_real 2>&1 | tee compile.wrf2.log
		cd ${WRF_FOLDER}/WRF-SFIRE/main
		n=$(ls ./*.exe | wc -l)
		if (($n >= 3)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "

	read -r -t 3 -p
	cd ${WRF_FOLDER}/WRF-SFIRE
	./compile -j $CPU_HALF_EVEN em_fire 2>&1 | tee compile.wrfsfire.log

	export WRF_DIR=${WRF_FOLDER}/WRF-SFIRE

	read -r -t 3 -p
	############################WPSV4.2#####################################
	## WPS v4.2
	## Downloaded from git tagged releases
	# Cloned from openwfm
	#Option 3 for gfortran and distributed memory
	########################################################################
	cd ${WRF_FOLDER}
	git clone https://github.com/openwfm/WPS.git

	cd ${WRF_FOLDER}/WPS
	./clean -a

	cd ${WRF_FOLDER}/WPS
	if [ ${auto_config} -eq 1 ]; then
		FFLAGS=$FFLAGS echo 19 | ./configure 2>&1 | tee configure.log #Option 19 for gfortran and distributed memory
	else
		FFLAGS=$FFLAGS ./configure 2>&1 | tee configure.log #Option 19 gfortran compiler with distributed memory
	fi

	#sed statements for issue with GNUv10+

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		sed -i '72s/-frecord-marker=4/-frecord-marker=4 -m64 -fallow-argument-mismatch/g' ${WRF_FOLDER}/WPS/configure.wps
		sed -i '73s/-frecord-marker=4/-frecord-marker=4 -m64 -fallow-argument-mismatch/g' ${WRF_FOLDER}/WPS/configure.wps
	fi

	./compile 2>&1 | tee compile.wps.log

	# IF statement to check that all files were created.
	cd ${WRF_FOLDER}/WPS
	n=$(ls ./*.exe | wc -l)
	if (($n == 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"

		./compile 2>&1 | tee compile.wps2.log
		cd ${WRF_FOLDER}/WPS
		n=$(ls ./*.exe | wc -l)
		if (($n == 3)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "

	read -r -t 3 -p
	######################## WPS Domain Setup Tools ########################
	## DomainWizard
	cd ${WRF_FOLDER}/Downloads
	wget -c -4 http://esrl.noaa.gov/gsd/wrfportal/domainwizard/WRFDomainWizard.zip
	mkdir ${WRF_FOLDER}/WRFDomainWizard
	unzip WRFDomainWizard.zip -d ${WRF_FOLDER}/WRFDomainWizard
	chmod +x ${WRF_FOLDER}/WRFDomainWizard/run_DomainWizard

	echo " "
	######################## WPF Portal Setup Tools ########################
	# WRFPortal
	cd ${WRF_FOLDER}/Downloads
	wget -c -4 https://esrl.noaa.gov/gsd/wrfportal/portal/wrf-portal.zip
	mkdir ${WRF_FOLDER}/WRFPortal
	unzip wrf-portal.zip -d ${WRF_FOLDER}/WRFPortal
	chmod +x ${WRF_FOLDER}/WRFPortal/runWRFPortal

	echo " "

	######################## Static Geography Data inc/ Optional ####################
	# http://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	# These files are large so if you only need certain ones comment the others off
	# All files downloaded and untarred is 200GB
	# https://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	#################################################################################
	cd ${WRF_FOLDER}/Downloads
	mkdir ${WRF_FOLDER}/GEOG
	mkdir ${WRF_FOLDER}/GEOG/WPS_GEOG

	echo " "
	echo "Mandatory WRF Preprocessing System (WPS) Geographical Input Data Mandatory Fields Downloads"
	echo " "
	wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_high_res_mandatory.tar.gz
	tar -xvzf geog_high_res_mandatory.tar.gz -C ${WRF_FOLDER}/GEOG/

	wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_low_res_mandatory.tar.gz
	tar -xvzf geog_low_res_mandatory.tar.gz -C ${WRF_FOLDER}/GEOG/
	mv ${WRF_FOLDER}/GEOG/WPS_GEOG_LOW_RES/ ${WRF_FOLDER}/GEOG/WPS_GEOG

	if [ ${WPS_Specific_Applications} -eq 1 ]; then
		echo " "
		echo " WPS Geographical Input Data Mandatory for Specific Applications"
		echo " "

		wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_thompson28_chem.tar.gz
		tar -xvzf geog_thompson28_chem.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_noahmp.tar.gz
		tar -xvzf geog_noahmp.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/irrigation.tar.gz
		tar -xvzf irrigation.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_px.tar.gz
		tar -xvzf geog_px.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_urban.tar.gz
		tar -xvzf geog_urban.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_ssib.tar.gz
		tar -xvzf geog_ssib.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/lake_depth.tar.bz2
		tar -xvf lake_depth.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/topobath_30s.tar.bz2
		tar -xvf topobath_30s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/gsl_gwd.tar.bz2
		tar -xvf gsl_gwd.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG
	fi

	if [ ${Optional_GEOG} -eq 1 ]; then
		echo " "
		echo "Optional WPS Geographical Input Data"
		echo " "

		wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_older_than_2000.tar.gz
		tar -xvzf geog_older_than_2000.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s_with_lakes.tar.gz
		tar -xvzf modis_landuse_20class_15s_with_lakes.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_alt_lsm.tar.gz
		tar -xvzf geog_alt_lsm.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/nlcd2006_ll_9s.tar.bz2
		tar -xvf nlcd2006_ll_9s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/updated_Iceland_LU.tar.gz
		tar -xvf updated_Iceland_LU.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s.tar.bz2
		tar -xvf modis_landuse_20class_15s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

	fi

fi

if [ "$Ubuntu_64bit_Intel" = "1" ] && [ "$SFIRE_PICK" = "1" ]; then
	echo $PASSWD | sudo -S apt -y update
	echo $PASSWD | sudo -S apt -y upgrade && sudo -S apt -y autoremove

	# download the key to system keyring; this and the following echo command are
	# needed in order to install the Intel compilers
	wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB |
		gpg --dearmor | sudo tee /usr/share/keyrings/oneapi-archive-keyring.gpg >/dev/null

	# add signed entry to apt sources and configure the APT client to use Intel repository:
	echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list

	# this update should get the Intel package info from the Intel repository
	echo $PASSWD | sudo -S apt -y update

	# necessary binary packages (especially pkg-config and build-essential)
	echo $PASSWD | sudo -S apt -y install autoconf automake bison build-essential byacc cmake csh curl default-jdk default-jre emacs flex g++ gawk gcc gfortran git ksh libcurl4-openssl-dev libjpeg-dev libncurses6 libpixman-1-dev libpng-dev libtool libxml2 libxml2-dev m4 make  ncview okular openbox pipenv pkg-config  python3 python3-dev python3-pip python3-dateutil tcsh unzip xauth xorg time libgeotiff-dev

	# install the Intel compilers
	echo $PASSWD | sudo -S apt -y install intel-basekit
	echo $PASSWD | sudo -S apt -y install intel-hpckit
	echo $PASSWD | sudo -S apt -y install intel-oneapi-python

	echo $PASSWD | sudo -S apt -y update

	# make sure some critical packages have been installed
	which cmake pkg-config make gcc g++ gfortran

	# add the Intel compiler file paths to various environment variables
	source /opt/intel/oneapi/setvars.sh

	# some of the libraries we install below need one or more of these variables
	export CC=icc
	export CXX=icpc
	export FC=ifort
	export F77=ifort
	export F90=ifort
	export MPIFC=mpiifort
	export MPIF77=mpiifort
	export MPIF90=mpiifort
	export MPICC=mpiicc
	export MPICXX=mpiicpc
	export CFLAGS="-fPIC -fPIE -O3 -diag-disable=10441 "
	export FFLAGS="-m64"
	export FCFLAGS="-m64"
	############################# CPU Core Management ####################################

	export CPU_CORE=$(nproc) # number of available threads on system
	export CPU_6CORE="6"
	export CPU_HALF=$(($CPU_CORE / 2)) # half of availble cores on system
	# Forces CPU cores to even number to avoid partial core export. ie 7 cores would be 3.5 cores.
	export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))

	# If statement for low core systems.  Forces computers to only use 1 core if there are 4 cores or less on the system.
	if [ $CPU_CORE -le $CPU_6CORE ]; then
		export CPU_HALF_EVEN="2"
	else
		export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))
	fi

	echo "##########################################"
	echo "Number of Threads being used $CPU_HALF_EVEN"
	echo "##########################################"

	############################## Directory Listing ############################
	# makes necessary directories
	#
	############################################################################

	export HOME=$(
		cd
		pwd
	)
	export WRF_FOLDER=$HOME/WRF_SFIRE_Intel
	export DIR=${WRF_FOLDER}/Libs
	mkdir ${WRF_FOLDER}
	cd ${WRF_FOLDER}
	mkdir Downloads
	mkdir WRFPLUS
	mkdir WRFDA
	mkdir Libs
	mkdir Libs/grib2
	mkdir Libs/NETCDF
	mkdir Libs/MPICH
	mkdir -p Tests/Environment
	mkdir -p Tests/Compatibility

	echo " "
	##############################Downloading Libraries############################
	#Force use of ipv4 with -4
	cd Downloads
	wget -c -4 https://github.com/madler/zlib/archive/refs/tags/v$Zlib_Version.tar.gz
	wget -c -4 https://github.com/HDFGroup/hdf5/archive/refs/tags/hdf5-$HDF5_Version.tar.gz
	wget -c -4 https://github.com/Unidata/netcdf-c/archive/refs/tags/v$Netcdf_C_Version.tar.gz
	wget -c -4 https://github.com/Unidata/netcdf-fortran/archive/refs/tags/v$Netcdf_Fortran_Version.tar.gz
	wget -c -4 https://download.sourceforge.net/libpng/libpng-$Libpng_Version.tar.gz
	wget -c -4 https://www.ece.uvic.ca/~frodo/jasper/software/jasper-$Jasper_Version.zip
	wget -c -4 https://github.com/pmodels/mpich/releases/download/v$Mpich_Version/mpich-$Mpich_Version.tar.gz
	wget -c -4 https://parallel-netcdf.github.io/Release/pnetcdf-$Pnetcdf_Version.tar.gz
	wget -c -4 https://sourceforge.net/projects/opengrads/files/grads2/2.2.1.oga.1/Linux%20%2864%20Bits%29/opengrads-2.2.1.oga.1-bundle-x86_64-pc-linux-gnu-glibc_2.17.tar.gz
	wget -c -4 https://github.com/openwfm/convert_geotiff/releases/download/v0.1/convert_geotiff-0.1.0.tar.gz

	echo " "
	############################# ZLib ############################

	cd ${WRF_FOLDER}/Downloads
	tar -xvzf v$Zlib_Version.tar.gz
	cd zlib-$Zlib_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	# make check | tee zlib.makecheck.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log

	echo " "
	############################# LibPNG ############################

	cd ${WRF_FOLDER}/Downloads

	# other libraries below need these variables to be set
	export LDFLAGS=-L$DIR/grib2/lib
	export CPPFLAGS=-I$DIR/grib2/include

	tar -xvzf libpng-$Libpng_Version.tar.gz
	cd libpng-$Libpng_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	#make -j $CPU_HALF_EVEN check | tee libpng.makecheck.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log

	echo " "
	############################# JasPer ############################

	cd ${WRF_FOLDER}/Downloads
	unzip jasper-$Jasper_Version.zip
	cd jasper-$Jasper_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log

	# other libraries below need these variables to be set
	export JASPERLIB=$DIR/grib2/lib
	export JASPERINC=$DIR/grib2/include

	echo " "
	############################# HDF5 library for NetCDF4 & parallel functionality ############################

	cd ${WRF_FOLDER}/Downloads
	tar -xvzf hdf5-$HDF5_Version.tar.gz
	cd hdf5-hdf5-$HDF5_Version
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 --with-zlib=$DIR/grib2 --enable-hl --enable-fortran --enable-parallel 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log

	# other libraries below need these variables to be set
	export HDF5=$DIR/grib2
	export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH
	export PATH=$HDF5/bin:$PATH
	export PHDF5=$DIR/grib2

	echo " "

	#############################Install Parallel-netCDF##############################
	#Make file created with half of available cpu cores
	#Hard path for MPI added
	##################################################################################
	cd ${WRF_FOLDER}/Downloads
	tar -xzvf pnetcdf-$Pnetcdf_Version.tar.gz
	cd pnetcdf-$Pnetcdf_Version
	autoreconf -i -f 2>&1 | tee autoreconf.log
	./configure --prefix=$DIR/grib2 --enable-shared --enable-static 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PNETCDF=$DIR/grib2

	############################## Install NETCDF-C Library ############################

	cd ${WRF_FOLDER}/Downloads
	tar -xzvf v$Netcdf_C_Version.tar.gz
	cd netcdf-c-$Netcdf_C_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	# these variables need to be set for the NetCDF-C install to work
	export CPPFLAGS=-I$DIR/grib2/include
	export LDFLAGS=-L$DIR/grib2/lib
	export LIBS="-lhdf5_hl -lhdf5 -lz -lcurl -lgfortran -lgcc -lm -ldl -lpnetcdf"

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --disable-dap --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-pnetcdf --enable-cdf5 --enable-parallel-tests 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log

	# other libraries below need these variables to be set
	export PATH=$DIR/NETCDF/bin:$PATH
	export NETCDF=$DIR/NETCDF

	echo " "
	############################## NetCDF-Fortran library ############################

	cd ${WRF_FOLDER}/Downloads
	tar -xvzf v$Netcdf_Fortran_Version.tar.gz
	cd netcdf-fortran-$Netcdf_Fortran_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	# these variables need to be set for the NetCDF-Fortran install to work
	export LD_LIBRARY_PATH=$DIR/NETCDF/lib:$LD_LIBRARY_PATH
	export CPPFLAGS="-I$DIR/NETCDF/include -I$DIR/grib2/include"
	export LDFLAGS="-L$DIR/NETCDF/lib -L$DIR/grib2/lib"
	export LIBS="-lnetcdf -lpnetcdf -lcurl -lhdf5_hl -lhdf5 -lz -lm -ldl -lgcc -lgfortran"
	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --enable-netcdf-4 --enable-netcdf4 --enable-parallel-tests --enable-hdf5 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log

	echo " "

	############################# Convert Geo Tiff #################################

	cd ${WRF_FOLDER}/Downloads
	tar -xzvf convert_geotiff-0.1.0.tar.gz
	cd convert_geotiff-0.1.0
	autoreconf -i -f 2>&1 | tee autoreconf.log
	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 ./configure -exec-prefix=$DIR/grib2 --prefix=$DIR/grib2 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log

	#################################### System Environment Tests ##############

	cd ${WRF_FOLDER}/Downloads
	wget -c -4 https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_NETCDF_MPI_tests.tar
	wget -c -4 https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_tests.tar

	tar -xvf Fortran_C_tests.tar -C ${WRF_FOLDER}/Tests/Environment
	tar -xvf Fortran_C_NETCDF_MPI_tests.tar -C ${WRF_FOLDER}/Tests/Compatibility

	export one="1"
	echo " "
	############## Testing Environment #####

	cd ${WRF_FOLDER}/Tests/Environment

	cp ${NETCDF}/include/netcdf.inc .

	echo " "
	echo " "
	echo "Environment Testing "
	echo "Test 1"
	$FC TEST_1_fortran_only_fixed.f
	./a.out | tee env_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 1 Passed"
	else
		echo "Environment Compiler Test 1 Failed"
		exit
	fi
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 2"
	$FC TEST_2_fortran_only_free.f90
	./a.out | tee env_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 2 Passed"
	else
		echo "Environment Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 3"
	$CC TEST_3_c_only.c
	./a.out | tee env_test3.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test3.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 3 Passed"
	else
		echo "Environment Compiler Test 3 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 4"
	$CC -c -m64 TEST_4_fortran+c_c.c
	$FC -c -m64 TEST_4_fortran+c_f.f90
	$FC -m64 TEST_4_fortran+c_f.o TEST_4_fortran+c_c.o
	./a.out | tee env_test4.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test4.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 4 Passed"
	else
		echo "Environment Compiler Test 4 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	############## Testing Environment #####

	cd ${WRF_FOLDER}/Tests/Compatibility

	cp ${NETCDF}/include/netcdf.inc .

	echo " "
	echo " "
	echo "Library Compatibility Tests "
	echo "Test 1"
	$FC -c 01_fortran+c+netcdf_f.f
	$CC -c 01_fortran+c+netcdf_c.c
	$FC 01_fortran+c+netcdf_f.o 01_fortran+c+netcdf_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	./a.out | tee comp_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 1 Passed"
	else
		echo "Compatibility Compiler Test 1 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "

	echo "Test 2"
	$MPIFC -c 02_fortran+c+netcdf+mpi_f.f
	$MPICC -c 02_fortran+c+netcdf+mpi_c.c
	$MPIFC 02_fortran+c+netcdf+mpi_f.o \
		02_fortran+c+netcdf+mpi_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	mpirun ./a.out | tee comp_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 2 Passed"
	else
		echo "Compatibility Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."
	echo " "

	echo " All tests completed and passed"
	echo " "

	###############################NCEPlibs#####################################
	#The libraries are built and installed with
	# ./make_ncep_libs.sh -s MACHINE -c COMPILER -d NCEPLIBS_DIR -o OPENMP [-m mpi] [-a APPLICATION]
	#It is recommended to install the NCEPlibs into their own directory, which must be created before running the installer. Further information on the command line arguments can be obtained with
	# ./make_ncep_libs.sh -h

	#If iand error occurs go to https://github.com/NCAR/NCEPlibs/pull/16/files make adjustment and re-run ./make_ncep_libs.sh
	############################################################################

	cd ${WRF_FOLDER}/Downloads
	git clone https://github.com/NCAR/NCEPlibs.git
	cd NCEPlibs
	mkdir $DIR/nceplibs

	export JASPER_INC=$DIR/grib2/include
	export PNG_INC=$DIR/grib2/include
	export NETCDF=$DIR/NETCDF

	if [ ${auto_config} -eq 1 ]; then
		echo yes | ./make_ncep_libs.sh -s linux -c intel -d $DIR/nceplibs -o 0 -m 1 -a upp
	else
		./make_ncep_libs.sh -s linux -c intel -d $DIR/nceplibs -o 0 -m 1 -a upp
	fi

	export PATH=$DIR/nceplibs:$PATH

	echo " "
	################################UPPv4.1######################################
	#Previous verison of UPP
	#WRF Support page recommends UPPV4.1 due to too many changes to WRF and UPP code
	#since the WRF was written
	#Option 8 gfortran compiler with distributed memory
	#############################################################################
	cd ${WRF_FOLDER}
	git clone -b dtc_post_v4.1.0 --recurse-submodules https://github.com/NOAA-EMC/EMC_post UPPV4.1
	cd UPPV4.1
	mkdir postprd
	export NCEPLIBS_DIR=$DIR/nceplibs
	export NETCDF=$DIR/NETCDF

	if [ ${auto_config} -eq 1 ]; then
		echo 4 | ./configure #Option 4 intel compiler with distributed memory
	else
		./configure #Option 4 intel compiler with distributed memory
	fi

	sed -i '24s/ mpif90/ mpiifort/g' ${WRF_FOLDER}/UPPV4.1/configure.upp
	sed -i '25s/ mpif90/ mpiifort/g' ${WRF_FOLDER}/UPPV4.1/configure.upp
	sed -i '26s/ mpicc/ mpiicc/g' ${WRF_FOLDER}/UPPV4.1/configure.upp

	./compile
	cd ${WRF_FOLDER}/UPPV4.1/scripts
	echo $PASSWD | sudo -S cpan install XML::LibXML
	chmod +x run_unipost

	# IF statement to check that all files were created.
	cd ${WRF_FOLDER}/UPPV4.1/exec
	n=$(ls ./*.exe | wc -l)
	if (($n == 1)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing UPPV4.1. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files. Exiting the script."
		read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
		exit
	fi

	echo " "

	######################## ARWpost V3.1  ############################
	## ARWpost
	##Configure #3
	###################################################################
	cd ${WRF_FOLDER}/Downloads
	wget -c http://www2.mmm.ucar.edu/wrf/src/ARWpost_V3.tar.gz
	tar -xvzf ARWpost_V3.tar.gz -C ${WRF_FOLDER}
	cd ${WRF_FOLDER}/ARWpost
	./clean -a
	sed -i -e 's/-lnetcdf/-lnetcdff -lnetcdf/g' ${WRF_FOLDER}/ARWpost/src/Makefile
	export NETCDF=$DIR/NETCDF

	if [ ${auto_config} -eq 1 ]; then
		echo 2 | ./configure #Option 2 intel compiler with distributed memory
	else
		./configure #Option 2 intel compiler with distributed memory
	fi

	sed -i -e 's/-C -P -traditional/-P -traditional/g' ${WRF_FOLDER}/ARWpost/configure.arwp
	./compile

	export PATH=${WRF_FOLDER}/ARWpost/ARWpost.exe:$PATH

	echo " "
	################################OpenGrADS######################################
	#Verison 2.2.1 64bit of Linux
	#############################################################################
	if [[ $GRADS_PICK -eq 1 ]]; then
		cd ${WRF_FOLDER}/Downloads
		tar -xzvf opengrads-2.2.1.oga.1-bundle-x86_64-pc-linux-gnu-glibc_2.17.tar.gz -C ${WRF_FOLDER}/
		cd ${WRF_FOLDER}/
		mv ${WRF_FOLDER}/opengrads-2.2.1.oga.1 ${WRF_FOLDER}/GrADS
		cd GrADS/Contents
		wget -c https://github.com/regisgrundig/SIMOP/blob/master/g2ctl.pl
		chmod +x g2ctl.pl
		wget -c https://sourceforge.net/projects/opengrads/files/wgrib2/0.1.9.4/wgrib2-v0.1.9.4-bin-x86_64-glibc2.5-linux-gnu.tar.gz
		tar -xzvf wgrib2-v0.1.9.4-bin-x86_64-glibc2.5-linux-gnu.tar.gz
		cd wgrib2-v0.1.9.4/bin
		mv wgrib2 ${WRF_FOLDER}/GrADS/Contents
		cd ${WRF_FOLDER}/GrADS/Contents
		rm wgrib2-v0.1.9.4-bin-x86_64-glibc2.5-linux-gnu.tar.gz
		rm -r wgrib2-v0.1.9.4

		export PATH=${WRF_FOLDER}/GrADS/Contents:$PATH
	fi
	################################## GrADS ###############################
	# Version  2.2.1
	# Sublibs library instructions: http://cola.gmu.edu/grads/gadoc/supplibs2.html
	# GrADS instructions: http://cola.gmu.edu/grads/downloads.php
	########################################################################
	if [[ $GRADS_PICK -eq 2 ]]; then

		echo $PASSWD | sudo -S apt -y install grads

	fi

	##################### NCAR COMMAND LANGUAGE           ##################
	########### NCL compiled via Conda                    ##################
	########### This is the preferred method by NCAR      ##################
	########### https://www.ncl.ucar.edu/index.shtml      ##################
	echo " "
	echo " "
	#Installing Miniconda3 to WRF directory and updating libraries

	pip install --upgrade --force-reinstall zstandard
	pip install --upgrade --force-reinstall zstd
	pip3 install --upgrade --force-reinstall zstandard
	pip3 install --upgrade --force-reinstall zstd
	export Miniconda_Install_DIR=${WRF_FOLDER}/miniconda3

	mkdir -p $Miniconda_Install_DIR

	wget -c https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $Miniconda_Install_DIR/miniconda.sh
	bash $Miniconda_Install_DIR/miniconda.sh -b -u -p $Miniconda_Install_DIR

	rm -rf $Miniconda_Install_DIR/miniconda.sh

	export PATH=${WRF_FOLDER}/miniconda3/bin:$PATH

	source $Miniconda_Install_DIR/etc/profile.d/conda.sh

	$Miniconda_Install_DIR/bin/conda init bash
	$Miniconda_Install_DIR/bin/conda init zsh
	$Miniconda_Install_DIR/bin/conda init tcsh
	$Miniconda_Install_DIR/bin/conda init xonsh
	$Miniconda_Install_DIR/bin/conda init powershell

	conda config --add channels conda-forge
	conda config --set auto_activate_base false
	conda update -n root --all -y

	#Special Thanks to @_WaylonWalker for code development
	echo " "
	#Installing NCL via Conda
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda init bash
	conda activate base
	conda create -n ncl_stable -c conda-forge ncl -y
	conda activate ncl_stable

	conda deactivate
	conda deactivate
	conda deactivate

	echo " "

	##################### WRF Python           ##################
	########### WRf-Python compiled via Conda  ##################
	########### This is the preferred method by NCAR      ##################
	##### https://wrf-python.readthedocs.io/en/latest/installation.html  ##################
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
conda env create -f $HOME/WRF-MOSIT/wrf-python-stable.yml

	######################### Climate Data Operators ############
	######################### CDO compiled via Conda ###########
	####################### This is the preferred method #######
	################### https://bairdlangenbrunner.github.io/python-for-climate-scientists/conda/setting-up-conda-environments.html #######################

	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda init bash
	conda activate base
	conda create --name cdo_stable -y
	source activate cdo_stable
	conda install -c conda-forge cdo -y
	conda update --all -y
	conda deactivate
	conda deactivate
	conda deactivate

	echo " "

	################################## QGIS #####################################
	#QGIS (Quantum Geographic Information System) is a free and open-source platform that allows users to
	#analyze, view, and edit geospatial data. It supports both vector and raster layers, as well as various #web services, and is extensible through community-developed plugins. Key features include map
	#creation, spatial analysis, and data management.
	#############################################################################

	conda env create -f $HOME/WRF-MOSIT/qgis.3.28.8.yml

	echo " "


	############################ WRF-SFIRE  #################################
	## WRF-SFIRE
	# Cloned from openwfm
	# option 34, option 1 for gfortran and distributed memory w/basic nesting
	# large file support enable with WRFiO_NCD_LARGE_FILE_SUPPORT=1
	########################################################################
	cd ${WRF_FOLDER}
	git clone https://github.com/openwfm/WRF-SFIRE.git

	cd ${WRF_FOLDER}/WRF-SFIRE/
	./clean -a # Clean old configuration files

	if [ ${auto_config} -eq 1 ]; then
		sed -i '428s/.*/  $response = "15 \\n";/g' ${WRF_FOLDER}/WRF-SFIRE/arch/Config.pl # Answer for compiler choice
		sed -i '869s/.*/  $response = "1 \\n";/g' ${WRF_FOLDER}/WRF-SFIRE/arch/Config.pl  #Answer for basic nesting
		./configure 2>&1 | tee configure.log
	else
		./configure 2>&1 | tee configure.log #Option 34 gfortran compiler with distributed memory option 1 for basic nesting
	fi

	./compile -j $CPU_HALF_EVEN em_real 2>&1 | tee compile.wrf1.log
	./compile -j $CPU_HALF_EVEN em_real 2>&1 | tee compile.wrf2.log

	# IF statement to check that all files were created.
	cd ${WRF_FOLDER}/WRF-SFIRE/main
	n=$(ls ./*.exe | wc -l)
	if (($n >= 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		cd ${WRF_FOLDER}/WRF-SFIRE/
		./compile -j $CPU_HALF_EVEN em_real 2>&1 | tee compile.wrf2.log
		cd ${WRF_FOLDER}/WRF-SFIRE/main
		n=$(ls ./*.exe | wc -l)
		if (($n >= 3)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "

	cd ${WRF_FOLDER}/WRF-SFIRE
	./compile -j $CPU_HALF_EVEN em_fire 2>&1 | tee compile.wrfsfire.log

	export WRF_DIR=${WRF_FOLDER}/WRF-SFIRE

	############################WPSV4.2#####################################
	## WPS v4.2
	## Downloaded from git tagged releases
	# Cloned from openwfm
	#Option 3 for gfortran and distributed memory
	########################################################################
	cd ${WRF_FOLDER}
	git clone https://github.com/openwfm/WPS.git

	cd ${WRF_FOLDER}/WPS
	./clean -a

	cd ${WRF_FOLDER}/WPS
	if [ ${auto_config} -eq 1 ]; then
		echo 19 | ./configure 2>&1 | tee configure.log #Option 3 for gfortran and distributed memory
	else
		./configure 2>&1 | tee configure.log #Option 3 gfortran compiler with distributed memory
	fi

	sed -i '65s|mpif90|mpiifort|g' ${WRF_FOLDER}/WPS/configure.wps
	sed -i '66s|mpicc|mpiicc|g' ${WRF_FOLDER}/WPS/configure.wps

	./compile 2>&1 | tee compile.wps.log

	# IF statement to check that all files were created.
	cd ${WRF_FOLDER}/WPS
	n=$(ls ./*.exe | wc -l)
	if (($n == 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"

		./compile 2>&1 | tee compile.wps2.log
		cd ${WRF_FOLDER}/WPS
		n=$(ls ./*.exe | wc -l)
		if (($n == 3)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "

	######################## WPS Domain Setup Tools ########################
	## DomainWizard
	cd ${WRF_FOLDER}/Downloads
	wget -c -4 http://esrl.noaa.gov/gsd/wrfportal/domainwizard/WRFDomainWizard.zip
	mkdir ${WRF_FOLDER}/WRFDomainWizard
	unzip WRFDomainWizard.zip -d ${WRF_FOLDER}/WRFDomainWizard
	chmod +x ${WRF_FOLDER}/WRFDomainWizard/run_DomainWizard

	echo " "
	######################## WPF Portal Setup Tools ########################
	## WRFPortal
	cd ${WRF_FOLDER}/Downloads
	wget -c -4 https://esrl.noaa.gov/gsd/wrfportal/portal/wrf-portal.zip
	mkdir ${WRF_FOLDER}/WRFPortal
	unzip wrf-portal.zip -d ${WRF_FOLDER}/WRFPortal
	chmod +x ${WRF_FOLDER}/WRFPortal/runWRFPortal

	echo " "

	######################## Static Geography Data inc/ Optional ####################
	# http://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	# These files are large so if you only need certain ones comment the others off
	# All files downloaded and untarred is 200GB
	# https://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	#################################################################################
	cd ${WRF_FOLDER}/Downloads
	mkdir ${WRF_FOLDER}/GEOG
	mkdir ${WRF_FOLDER}/GEOG/WPS_GEOG

	echo " "
	echo "Mandatory WRF Preprocessing System (WPS) Geographical Input Data Mandatory Fields Downloads"
	echo " "
	wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_high_res_mandatory.tar.gz
	tar -xvzf geog_high_res_mandatory.tar.gz -C ${WRF_FOLDER}/GEOG/

	wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_low_res_mandatory.tar.gz
	tar -xvzf geog_low_res_mandatory.tar.gz -C ${WRF_FOLDER}/GEOG/
	mv ${WRF_FOLDER}/GEOG/WPS_GEOG_LOW_RES/ ${WRF_FOLDER}/GEOG/WPS_GEOG

	if [ ${WPS_Specific_Applications} -eq 1 ]; then
		echo " "
		echo " WPS Geographical Input Data Mandatory for Specific Applications"
		echo " "

		wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_thompson28_chem.tar.gz
		tar -xvzf geog_thompson28_chem.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_noahmp.tar.gz
		tar -xvzf geog_noahmp.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/irrigation.tar.gz
		tar -xvzf irrigation.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_px.tar.gz
		tar -xvzf geog_px.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_urban.tar.gz
		tar -xvzf geog_urban.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_ssib.tar.gz
		tar -xvzf geog_ssib.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/lake_depth.tar.bz2
		tar -xvf lake_depth.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/topobath_30s.tar.bz2
		tar -xvf topobath_30s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/gsl_gwd.tar.bz2
		tar -xvf gsl_gwd.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG
	fi

	if [ ${Optional_GEOG} -eq 1 ]; then
		echo " "
		echo "Optional WPS Geographical Input Data"
		echo " "

		wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_older_than_2000.tar.gz
		tar -xvzf geog_older_than_2000.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s_with_lakes.tar.gz
		tar -xvzf modis_landuse_20class_15s_with_lakes.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_alt_lsm.tar.gz
		tar -xvzf geog_alt_lsm.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/nlcd2006_ll_9s.tar.bz2
		tar -xvf nlcd2006_ll_9s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/updated_Iceland_LU.tar.gz
		tar -xvf updated_Iceland_LU.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s.tar.bz2
		tar -xvf modis_landuse_20class_15s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

	fi

fi

if [ "$Centos_64bit_GNU" = "1" ] && [ "$SFIRE_PICK" = "1" ]; then
	#############################basic package managment############################
	    echo $PASSWD | sudo -S yum install epel-release -y
	    echo $PASSWD | sudo -S yum install dnf -y
	    echo $PASSWD | sudo -S dnf install epel-release -y
	    echo $PASSWD | sudo -S dnf install dnf -y
	    echo $PASSWD | sudo -S dnf -y update
	    echo $PASSWD | sudo -S dnf -y upgrade
	    echo $PASSWD | sudo -S dnf -y install autoconf automake bzip2 bzip2-devel byacc cairo-devel cmake cpp curl curl-devel flex fontconfig fontconfig-devel gcc gcc-c++ gcc-gfortran git java-11-openjdk java-11-openjdk-devel ksh libjpeg libjpeg-devel libX11 libX11-devel libXaw libXaw-devel libXext-devel libXmu libXmu-devel libXrender libXrender-devel libXt libXt-devel libxml2 libxml2-devel libXmu  libXmu-devel libgeotiff libgeotiff-devel libtiff libtiff-devel m4  nfs-utils perl pkgconfig pixman  pixman-devel python3 python3-devel tcsh time unzip wget
	    echo $PASSWD | sudo -S  dnf -y groupinstall "Development Tools"
	    echo $PASSWD | sudo -S dnf -y update
	    echo $PASSWD | sudo -S dnf -y upgrade

	    echo " "

	    ##############################Directory Listing############################
	    export HOME=`cd;pwd`

	    mkdir $HOME/WRF_SFIRE
	    export WRF_FOLDER=$HOME/WRF_SFIRE
	    cd ${WRF_FOLDER}/
	    mkdir Downloads
	    mkdir Libs
	    export DIR=${WRF_FOLDER}/Libs
	    mkdir Libs/grib2
	    mkdir Libs/NETCDF
	    mkdir Libs/MPICH
	    mkdir -p Tests/Environment
	    mkdir -p Tests/Compatibility

	    echo " "
	    #############################Core Management####################################

	    export CPU_CORE=$(nproc)                                             # number of available threads on system
	    export CPU_6CORE="6"
	    export CPU_HALF=$(($CPU_CORE / 2))                                   #half of availble cores on system
	    export CPU_HALF_EVEN=$(( $CPU_HALF - ($CPU_HALF % 2) ))              #Forces CPU cores to even number to avoid partial core export. ie 7 cores would be 3.5 cores.

	    if [ $CPU_CORE -le $CPU_6CORE ]                                  #If statement for low core systems.  Forces computers to only use 1 core if there are 4 cores or less on the system.
	    then
	      export CPU_HALF_EVEN="2"
	    else
	      export CPU_HALF_EVEN=$(( $CPU_HALF - ($CPU_HALF % 2) ))
	    fi


	    echo "##########################################"
	    echo "Number of Threads being used $CPU_HALF_EVEN"
	    echo "##########################################"


	    echo " "
	    ##############################Downloading Libraries############################
	    #Force use of ipv4 with -4
	    cd Downloads
	    wget -c -4 https://github.com/madler/zlib/archive/refs/tags/v$Zlib_Version.tar.gz
	    wget -c -4 https://github.com/HDFGroup/hdf5/archive/refs/tags/hdf5-$HDF5_Version.tar.gz
	    wget -c -4 https://github.com/Unidata/netcdf-c/archive/refs/tags/v$Netcdf_C_Version.tar.gz
	    wget -c -4 https://github.com/Unidata/netcdf-fortran/archive/refs/tags/v$Netcdf_Fortran_Version.tar.gz
	    wget -c -4 https://github.com/pmodels/mpich/releases/download/v$Mpich_Version/mpich-$Mpich_Version.tar.gz
	    wget -c -4 https://download.sourceforge.net/libpng/libpng-$Libpng_Version.tar.gz
	    wget -c -4 https://src.fedoraproject.org/repo/pkgs/jasper/jasper-$Jasper_Version.zip/a342b2b4495b3e1394e161eb5d85d754/jasper-$Jasper_Version.zip
	    wget -c -4  https://parallel-netcdf.github.io/Release/pnetcdf-$Pnetcdf_Version.tar.gz
	    wget -c -4 https://sourceforge.net/projects/opengrads/files/grads2/2.2.1.oga.1/Linux%20%2864%20Bits%29/opengrads-2.2.1.oga.1-bundle-x86_64-pc-linux-gnu-glibc_2.17.tar.gz
	    wget -c -4  https://github.com/openwfm/convert_geotiff/releases/download/v0.1/convert_geotiff-0.1.0.tar.gz


	    echo " "
	    ####################################Compilers#####################################
	    export CC=gcc
	    export CXX=g++
	    export FC=gfortran
	    export F77=gfortran
	    export CFLAGS="-fPIC -fPIE -O3"



	    #IF statement for GNU compiler issue
	    export GCC_VERSION=$(gcc -dumpversion| awk '{print$1}')
	    export GFORTRAN_VERSION=$(gfortran -dumpversion| awk '{print$1}')
	    export GPLUSPLUS_VERSION=$(g++ -dumpversion| awk '{print$1}')

	    export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	    export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	    export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	    export version_10="10"

	    if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]
	      then
	        export fallow_argument=-fallow-argument-mismatch
	        export boz_argument=-fallow-invalid-boz
	      else
	        export fallow_argument=
	        export boz_argument=
	    fi


	    export FFLAGS="$fallow_argument -m64"
	    export FCFLAGS="$fallow_argument -m64"


	    echo "##########################################"
	    echo "FFLAGS = $FFLAGS"
	    echo "FCFLAGS = $FCFLAGS"
	    echo "##########################################"




	    echo " "
	    #############################zlib############################
	    #Uncalling compilers due to comfigure issue with zlib$Zlib_Version
	    #With CC & CXX definied ./configure uses different compiler Flags

	  cd ${WRF_FOLDER}/Downloads
	  tar -xvzf v$Zlib_Version.tar.gz
	  cd zlib-$Zlib_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log
	  ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	  make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	  make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	  #make check

	  echo " "
	    ##############################MPICH############################
	   #F90= due to compiler issues with mpich install
	  cd ${WRF_FOLDER}/Downloads
	  tar -xvzf mpich-$Mpich_Version.tar.gz
	  cd mpich-$Mpich_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log
	  F90= ./configure --prefix=$DIR/MPICH --with-device=ch3 FFLAGS=$fallow_argument FCFLAGS=$fallow_argument 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	  make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	  make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	  # make check



	  export PATH=$DIR/MPICH/bin:$PATH

	  export MPIFC=$DIR/MPICH/bin/mpifort
	  export MPIF77=$DIR/MPICH/bin/mpifort
	  export MPIF90=$DIR/MPICH/bin/mpifort
	  export MPICC=$DIR/MPICH/bin/mpicc
	  export MPICXX=$DIR/MPICH/bin/mpicxx


	  echo " "
	    #############################libpng############################
	  cd ${WRF_FOLDER}/Downloads
	  export LDFLAGS=-L$DIR/grib2/lib
	  export CPPFLAGS=-I$DIR/grib2/include
	  tar -xvzf libpng-$Libpng_Version.tar.gz
	  cd libpng-$Libpng_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log
	  CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX  ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	  make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	  make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	  #make check
	  echo " "k
	    echo " "
	    #############################JasPer############################
	  cd ${WRF_FOLDER}/Downloads
	  unzip jasper-$Jasper_Version.zip
	  cd jasper-$Jasper_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log
	  ./configure --prefix=$DIR/grib2
	  CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX  ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	  make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	  make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	  #make check

	  export JASPERLIB=$DIR/grib2/lib
	  export JASPERINC=$DIR/grib2/include


	  echo " "
	    #############################hdf5 library for netcdf4 functionality############################
	  cd ${WRF_FOLDER}/Downloads
	  tar -xvzf hdf5-$HDF5_Version.tar.gz
	  cd hdf5-hdf5-$HDF5_Version
	autoreconf -i -f 2>&1 | tee autoreconf.log
	  CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX  ./configure --prefix=$DIR/grib2 --with-zlib=$DIR/grib2 --enable-hl --enable-fortran --enable-parallel 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	  make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	  make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	  #make check

	  export HDF5=$DIR/grib2
	  export PHDF5=$DIR/grib2
	  export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH


	  echo " "

	    #############################Install Parallel-netCDF##############################
	    #Make file created with half of available cpu cores
	    #Hard path for MPI added
	    ##################################################################################
	  cd ${WRF_FOLDER}/Downloads
	  tar -xzvf pnetcdf-$Pnetcdf_Version.tar.gz
	  cd pnetcdf-$Pnetcdf_Version
	  export MPIFC=$DIR/MPICH/bin/mpifort
	  export MPIF77=$DIR/MPICH/bin/mpifort
	  export MPIF90=$DIR/MPICH/bin/mpifort
	  export MPICC=$DIR/MPICH/bin/mpicc
	  export MPICXX=$DIR/MPICH/bin/mpicxx
	autoreconf -i -f 2>&1 | tee autoreconf.log
	  ./configure --prefix=$DIR/grib2  --enable-shared --enable-static 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	  make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	  make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	  #make check

	  export PNETCDF=$DIR/grib2




	    ##############################Install NETCDF C Library############################
	  cd ${WRF_FOLDER}/Downloads
	  tar -xzvf v$Netcdf_C_Version.tar.gz
	  cd netcdf-c-$Netcdf_C_Version/
	  export CPPFLAGS=-I$DIR/grib2/include
	  export LDFLAGS=-L$DIR/grib2/lib
	  export LIBS="-lhdf5_hl -lhdf5 -lz -lcurl -lgfortran -lgcc -lm -ldl -lpnetcdf"
	autoreconf -i -f 2>&1 | tee autoreconf.log
	  CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 ./configure --prefix=$DIR/NETCDF --disable-dap --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-pnetcdf --enable-cdf5 --enable-parallel-tests 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	  make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	  make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	  #make check

	  export PATH=$DIR/NETCDF/bin:$PATH
	  export NETCDF=$DIR/NETCDF
	  echo " "
	    ##############################NetCDF fortran library############################
	  cd ${WRF_FOLDER}/Downloads
	  tar -xvzf v$Netcdf_Fortran_Version.tar.gz
	  cd netcdf-fortran-$Netcdf_Fortran_Version/
	  export LD_LIBRARY_PATH=$DIR/NETCDF/lib:$LD_LIBRARY_PATH
	  export CPPFLAGS="-I$DIR/NETCDF/include -I$DIR/grib2/include"
	  export LDFLAGS="-L$DIR/NETCDF/lib -L$DIR/grib2/lib"
	  export LIBS="-lnetcdf -lpnetcdf -lcurl -lhdf5_hl -lhdf5 -lz -lm -ldl -lgcc -lgfortran"
	autoreconf -i -f 2>&1 | tee autoreconf.log
	  CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 ./configure --prefix=$DIR/NETCDF --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-parallel-tests --enable-hdf5 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	  make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	  make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	  #make check

	  echo " "

	 ############################# Convert Geo Tiff #################################

	  cd ${WRF_FOLDER}/Downloads
	  tar -xzvf convert_geotiff-0.1.0.tar.gz
	  cd convert_geotiff-0.1.0
	  export CPPFLAGS="-I$DIR/NETCDF/include -I$DIR/grib2/include -I/usr/include/libgeotiff"
	  export LDFLAGS="-L$DIR/NETCDF/lib -L$DIR/grib2/lib -L/usr/lib/libgeotiff"
	  autoreconf -i -f 2>&1 | tee autoreconf.log
	  CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 ./configure -exec-prefix=$DIR/grib2 --prefix=$DIR/grib2 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	  make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	  make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log

	  export CPPFLAGS="-I$DIR/NETCDF/include -I$DIR/grib2/include"
	  export LDFLAGS="-L$DIR/NETCDF/lib -L$DIR/grib2/lib"
	  export LIBS="-lnetcdf -lpnetcdf -lcurl -lhdf5_hl -lhdf5 -lz -lm -ldl -lgcc -lgfortran"


	    #################################### System Environment Tests ##############

	    cd ${WRF_FOLDER}/Downloads
	    wget -c -4 https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_NETCDF_MPI_tests.tar
	    wget -c -4 https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_tests.tar

	    tar -xvf Fortran_C_tests.tar -C ${WRF_FOLDER}/Tests/Environment
	    tar -xvf Fortran_C_NETCDF_MPI_tests.tar -C ${WRF_FOLDER}/Tests/Compatibility

	    export one="1"
	    echo " "
	    ############## Testing Environment #####

	    cd ${WRF_FOLDER}/Tests/Environment

	    cp ${NETCDF}/include/netcdf.inc .

	    echo " "
	    echo " "
	    echo "Environment Testing "
	    echo "Test 1"
	    $FC TEST_1_fortran_only_fixed.f
	    ./a.out | tee env_test1.txt
	    export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test1.txt | awk  '{print$1}')
	     if [ $TEST_PASS -ge 1 ]
	        then
	          echo "Enviroment Test 1 Passed"
	        else
	          echo "Environment Compiler Test 1 Failed"
	          exit
	      fi
	    read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	    echo " "
	    echo "Test 2"
	    $FC TEST_2_fortran_only_free.f90
	    ./a.out | tee env_test2.txt
	    export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test2.txt | awk  '{print$1}')
	     if [ $TEST_PASS -ge 1 ]
	        then
	          echo "Enviroment Test 2 Passed"
	        else
	          echo "Environment Compiler Test 2 Failed"
	          exit
	      fi
	    echo " "
	    read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	    echo " "
	    echo "Test 3"
	    $CC TEST_3_c_only.c
	    ./a.out | tee env_test3.txt
	    export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test3.txt | awk  '{print$1}')
	     if [ $TEST_PASS -ge 1 ]
	        then
	          echo "Enviroment Test 3 Passed"
	        else
	          echo "Environment Compiler Test 3 Failed"
	          exit
	      fi
	    echo " "
	    read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	    echo " "
	    echo "Test 4"
	    $CC -c -m64 TEST_4_fortran+c_c.c
	    $FC -c -m64 TEST_4_fortran+c_f.f90
	    $FC -m64 TEST_4_fortran+c_f.o TEST_4_fortran+c_c.o
	    ./a.out | tee env_test4.txt
	    export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test4.txt | awk  '{print$1}')
	     if [ $TEST_PASS -ge 1 ]
	        then
	          echo "Enviroment Test 4 Passed"
	        else
	          echo "Environment Compiler Test 4 Failed"
	          exit
	      fi
	    echo " "
	    read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	    echo " "
	    ############## Testing Environment #####

	    cd ${WRF_FOLDER}/Tests/Compatibility

	    cp ${NETCDF}/include/netcdf.inc .

	    echo " "
	    echo " "
	    echo "Library Compatibility Tests "
	    echo "Test 1"
	    $FC -c 01_fortran+c+netcdf_f.f
	    $CC -c 01_fortran+c+netcdf_c.c
	    $FC 01_fortran+c+netcdf_f.o 01_fortran+c+netcdf_c.o \
	         -L${NETCDF}/lib -lnetcdff -lnetcdf

	         ./a.out | tee comp_test1.txt
	         export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test1.txt | awk  '{print$1}')
	          if [ $TEST_PASS -ge 1 ]
	             then
	               echo "Compatibility Test 1 Passed"
	             else
	               echo "Compatibility Compiler Test 1 Failed"
	               exit
	           fi
	         echo " "
	         read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	    echo " "

	    echo "Test 2"
	    $MPIFC -c 02_fortran+c+netcdf+mpi_f.f
	    $MPICC -c 02_fortran+c+netcdf+mpi_c.c
	    $MPIFC 02_fortran+c+netcdf+mpi_f.o \
	    02_fortran+c+netcdf+mpi_c.o \
	         -L${NETCDF}/lib -lnetcdff -lnetcdf

	    $DIR/MPICH/bin/mpirun ./a.out | tee comp_test2.txt
	    export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test2.txt | awk  '{print$1}')
	     if [ $TEST_PASS -ge 1 ]
	        then
	          echo "Compatibility Test 2 Passed"
	        else
	          echo "Compatibility Compiler Test 2 Failed"
	          exit
	      fi
	    echo " "
	    read -r -t 3 -p "I am going to wait for 3 seconds only ..."
	    echo " "

	    echo " All tests completed and passed"
	    echo " "


	    ###############################NCEPlibs#####################################
	    #The libraries are built and installed with
	    # ./make_ncep_libs.sh -s MACHINE -c COMPILER -d NCEPLIBS_DIR -o OPENMP [-m mpi] [-a APPLICATION]
	    #It is recommended to install the NCEPlibs into their own directory, which must be created before running the installer. Further information on the command line arguments can be obtained with
	    # ./make_ncep_libs.sh -h

	    #If iand error occurs go to https://github.com/NCAR/NCEPlibs/pull/16/files make adjustment and re-run ./make_ncep_libs.sh
	    ############################################################################



	    cd ${WRF_FOLDER}/Downloads
	    git clone https://github.com/NCAR/NCEPlibs.git
	    cd NCEPlibs
	    mkdir $DIR/nceplibs

	    export JASPER_INC=$DIR/grib2/include
	    export PNG_INC=$DIR/grib2/include
	    export NETCDF=$DIR/NETCDF

	    #for loop to edit linux.gnu for nceplibs to install
	    #make if statement for gcc-9 or older
	    export GCC_VERSION=$(gcc -dumpfullversion | awk '{print$1}')
	    export GFORTRAN_VERSION=$(gfortran -dumpfullversion | awk '{print$1}')
	    export GPLUSPLUS_VERSION=$(g++ -dumpfullversion | awk '{print$1}')

	    export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	    export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	    export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	    export version_10="10"

	    if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]
	    then
	      y="24 28 32 36 40 45 49 53 56 60 64 68 69 73 74 79"
	      for X in $y; do
	        sed -i "${X}s/= /= $fallow_argument $boz_argument /g" ${WRF_FOLDER}/Downloads/NCEPlibs/macros.make.linux.gnu
	      done
	    else
	      echo ""
	      echo "Loop not needed"
	    fi

	    if [ ${auto_config} -eq 1 ]
	      then
	        echo yes | ./make_ncep_libs.sh -s linux -c gnu -d $DIR/nceplibs -o 0 -m 1 -a upp | tee make.install.log
	      else
	        ./make_ncep_libs.sh -s linux -c gnu -d $DIR/nceplibs -o 0 -m 1 -a upp | tee make.install.log
	    fi

	    export PATH=$DIR/nceplibs:$PATH

	    echo " "
	    ################################UPPv4.1######################################
	    #Previous verison of UPP
	    #WRF Support page recommends UPPV4.1 due to too many changes to WRF and UPP code
	    #since the WRF was written
	    #Option 8 gfortran compiler with distributed memory
	    #############################################################################
	    cd ${WRF_FOLDER}/
	    git clone -b dtc_post_v4.1.0 --recurse-submodules https://github.com/NOAA-EMC/EMC_post UPPV4.1
	    cd UPPV4.1
	    mkdir postprd
	    export NCEPLIBS_DIR=$DIR/nceplibs
	    export NETCDF=$DIR/NETCDF

	    if [ ${auto_config} -eq 1 ]
	      then
	        echo 8 | ./configure  #Option 8 gfortran compiler with distributed memory
	      else
	        ./configure  #Option 8 gfortran compiler with distributed memory
	    fi


	    #make if statement for gcc-9 or older
	    export GCC_VERSION=$(gcc -dumpfullversion | awk '{print$1}')
	    export GFORTRAN_VERSION=$(gfortran -dumpfullversion | awk '{print$1}')
	    export GPLUSPLUS_VERSION=$(g++ -dumpfullversion | awk '{print$1}')

	    export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	    export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	    export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	    export version_10="10"

	    if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]
	      then
	        z="58 63"
	        for X in $z; do
	          sed -i "${X}s/(FOPT)/(FOPT) $fallow_argument $boz_argument  /g" ${WRF_FOLDER}/UPPV4.1/configure.upp
	        done
	      else
	        echo ""
	        echo "Loop not needed"
	    fi

	    ./compile
	    cd ${WRF_FOLDER}/UPPV4.1/scripts
	    echo $PASSWD | sudo -S cpan install XML::LibXML
	  chmod +x run_unipost

	    # IF statement to check that all files were created.
	     cd ${WRF_FOLDER}/UPPV4.1/exec
	     n=$(ls ./*.exe | wc -l)
	     if (( $n == 1 ))
	      then
	        echo "All expected files created."
	        read -r -t 5 -p "Finished installing UPPV4.1. I am going to wait for 5 seconds only ..."
	      else
	       echo "Missing one or more expected files. Exiting the script."
	       read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
	       exit
	     fi

	    echo " "



	    ######################## ARWpost V3.1  ############################
	    ## ARWpost
	    ##Configure #3
	    ###################################################################
	    cd ${WRF_FOLDER}/Downloads
	    wget -c -4 http://www2.mmm.ucar.edu/wrf/src/ARWpost_V3.tar.gz
	    tar -xvzf ARWpost_V3.tar.gz -C ${WRF_FOLDER}/
	    cd ${WRF_FOLDER}/ARWpost
	    ./clean -a
	    sed -i -e 's/-lnetcdf/-lnetcdff -lnetcdf/g' ${WRF_FOLDER}/ARWpost/src/Makefile
	    export NETCDF=$DIR/NETCDF


	    if [ ${auto_config} -eq 1 ]
	      then
	        echo 3 | ./configure  #Option 3 gfortran compiler with distributed memory
	      else
	        ./configure  #Option 3 gfortran compiler with distributed memory
	    fi


	    export GCC_VERSION=$(gcc -dumpfullversion | awk '{print$1}')
	    export GFORTRAN_VERSION=$(gfortran -dumpfullversion | awk '{print$1}')
	    export GPLUSPLUS_VERSION=$(g++ -dumpfullversion | awk '{print$1}')

	    export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	    export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	    export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	    export version_10="10"

	    if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]
	    then
	      sed -i '32s/-ffree-form -O -fno-second-underscore -fconvert=big-endian -frecord-marker=4/-ffree-form -O -fno-second-underscore -fconvert=big-endian -frecord-marker=4 ${fallow_argument} /g' configure.arwp
	    fi


	    sed -i -e 's/-C -P -traditional/-P -traditional/g' ${WRF_FOLDER}/ARWpost/configure.arwp
	    ./compile


	    export PATH=${WRF_FOLDER}/ARWpost/ARWpost.exe:$PATH

	    echo " "
	    ################################ OpenGrADS ##################################
	    #Verison 2.2.1 32bit of Linux
	    #############################################################################
	    if [[ $GRADS_PICK -eq 1 ]]; then
	      cd ${WRF_FOLDER}/Downloads
	      tar -xzvf opengrads-2.2.1.oga.1-bundle-x86_64-pc-linux-gnu-glibc_2.17.tar.gz -C ${WRF_FOLDER}/
	      cd ${WRF_FOLDER}/
	      mv ${WRF_FOLDER}/opengrads-2.2.1.oga.1  ${WRF_FOLDER}/GrADS
	      cd GrADS/Contents
	      wget -c -4 https://github.com/regisgrundig/SIMOP/blob/master/g2ctl.pl
	      chmod +x g2ctl.pl
	      wget -c -4 https://sourceforge.net/projects/opengrads/files/wgrib2/0.1.9.4/wgrib2-v0.1.9.4-bin-i686-glib2.5-linux-gnu.tar.gz
	      tar -xzvf wgrib2-v0.1.9.4-bin-i686-glib2.5-linux-gnu.tar.gz
	      cd wgrib2-v0.1.9.4/bin
	      mv wgrib2 ${WRF_FOLDER}/GrADS/Contents
	      cd ${WRF_FOLDER}/GrADS/Contents
	      rm wgrib2-v0.1.9.4-bin-i686-glib2.5-linux-gnu.tar.gz
	      rm -r wgrib2-v0.1.9.4


	      export PATH=${WRF_FOLDER}/GrADS/Contents:$PATH


	    echo " "
	    fi
	    ################################## GrADS ###############################
	    # Version  2.2.1
	    # Sublibs library instructions: http://cola.gmu.edu/grads/gadoc/supplibs2.html
	    # GrADS instructions: http://cola.gmu.edu/grads/downloads.php
	    ########################################################################
	    if [[ $GRADS_PICK -eq 2 ]]; then
	       cd ${WRF_FOLDER}/Downloads
	       wget -c -4 ftp://cola.gmu.edu/grads/2.2/grads-2.2.1-bin-centos7.4-x86_64.tar.gz
	       tar -xzvf grads-2.2.1-bin-centos7.4-x86_64.tar.gz -C ${WRF_FOLDER}
	       cd ${WRF_FOLDER}/grads-2.2.1/bin
	       chmod 775 *

	    fi


	      ##################### NCAR COMMAND LANGUAGE           ##################
	      ########### NCL compiled via Conda                    ##################
	      ########### This is the preferred method by NCAR      ##################
	      ########### https://www.ncl.ucar.edu/index.shtml      ##################
	      #Installing Miniconda3 to WRF-Hydro directory and updating libraries

	      export Miniconda_Install_DIR=${WRF_FOLDER}/miniconda3

	      mkdir -p $Miniconda_Install_DIR

	      wget -c -4 https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $Miniconda_Install_DIR/miniconda.sh
	      bash $Miniconda_Install_DIR/miniconda.sh -b -u -p $Miniconda_Install_DIR

	      rm -rf $Miniconda_Install_DIR/miniconda.sh

	      export PATH=${WRF_FOLDER}/miniconda3/bin:$PATH

	      source $Miniconda_Install_DIR/etc/profile.d/conda.sh

	      $Miniconda_Install_DIR/bin/conda init bash
	      $Miniconda_Install_DIR/bin/conda init zsh
	      $Miniconda_Install_DIR/bin/conda init tcsh
	      $Miniconda_Install_DIR/bin/conda init xonsh
	      $Miniconda_Install_DIR/bin/conda init powershell

	      conda config --add channels conda-forge
	      conda config --set auto_activate_base false
	      conda update -n root --all -y


	      echo " "





	      echo " "
	      #Installing NCL via Conda
	      source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	      conda init bash
	      conda activate base
	      conda create -n ncl_stable -c conda-forge ncl -y
	      conda activate ncl_stable

	      conda deactivate
	      conda deactivate
	      conda deactivate

	      echo " "

	    ############################## RIP4 #####################################
	    mkdir ${WRF_FOLDER}/RIP4
	    cd ${WRF_FOLDER}/Downloads
	    wget -c -4 https://www2.mmm.ucar.edu/wrf/src/RIP_47.tar.gz
	    tar -xvzf RIP_47.tar.gz -C ${WRF_FOLDER}/RIP4
	    cd ${WRF_FOLDER}/RIP4/RIP_47
	    mv * ..
	    cd ${WRF_FOLDER}/RIP4
	    rm -rd RIP_47
	    source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	    conda activate ncl_stable
	    conda install -c conda-forge c-compiler fortran-compiler cxx-compiler -y


	    export RIP_ROOT=${WRF_FOLDER}/RIP4
	    export NETCDF=$DIR/NETCDF
	    export NCARG_ROOT=${WRF_FOLDER}/anaconda3/envs/ncl_stable


	    sed -i '349s|-L${NETCDF}/lib -lnetcdf $NETCDFF|-L${NETCDF}/lib $NETCDFF -lnetcdff -lnetcdf -lnetcdf -lnetcdff_C -lhdf5 |g' ${WRF_FOLDER}/RIP4/configure

	    sed -i '27s|NETCDFLIB	= -L${NETCDF}/lib -lnetcdf CONFIGURE_NETCDFF_LIB|NETCDFLIB	= -L</usr/lib/x86_64-linux-gnu/libm.a> -lm -L${NETCDF}/lib CONFIGURE_NETCDFF_LIB -lnetcdf -lhdf5 -lhdf5_hl -lgfortran -lgcc -lz |g' ${WRF_FOLDER}/RIP4/arch/preamble

	    sed -i '31s|-L${NCARG_ROOT}/lib -lncarg -lncarg_gks -lncarg_c -lX11 -lXext -lpng -lz CONFIGURE_NCARG_LIB| -L${NCARG_ROOT}/lib -lncarg -lncarg_gks -lncarg_c -lX11 -lXext -lpng -lz -lcairo -lfontconfig -lpixman-1 -lfreetype -lexpat -lpthread -lbz2 -lXrender -lgfortran -lgcc -L</usr/lib/x86_64-linux-gnu/> -lm -lhdf5 -lhdf5_hl |g' ${WRF_FOLDER}/RIP4/arch/preamble

	    sed -i '33s| -O|-fallow-argument-mismatch -O |g' ${WRF_FOLDER}/RIP4/arch/configure.defaults

	    sed -i '35s|=|= -L${WRF_FOLDER}/LIBS/grib2/lib -lhdf5 -lhdf5_hl |g' ${WRF_FOLDER}/RIP4/arch/configure.defaults


	    if [ ${auto_config} -eq 1 ]
	      then
	        echo 3 | ./configure  #Option 3 gfortran compiler with distributed memory
	      else
	        ./configure  #Option 3 gfortran compiler with distributed memory
	    fi

	    ./compile

	    conda deactivate
	    conda deactivate
	    conda deactivate




	    echo " "
	    ##################### WRF Python           ##################
	    ########### WRf-Python compiled via Conda  ##################
	    ########### This is the preferred method by NCAR      ##################
	    ##### https://wrf-python.readthedocs.io/en/latest/installation.html  ##################
	    source $Miniconda_Install_DIR/etc/profile.d/conda.sh
conda env create -f $HOME/WRF-MOSIT/wrf-python-stable.yml

	    echo " "

	  ######################### Climate Data Operators ############
	  ######################### CDO compiled via Conda ###########
	  ####################### This is the preferred method #######
	  ################### https://bairdlangenbrunner.github.io/python-for-climate-scientists/conda/setting-up-conda-environments.html #######################

	  source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	  conda init bash
	  conda activate base
	  conda create --name cdo_stable -y
	  source activate cdo_stable
	  conda install -c conda-forge cdo -y
	  conda update --all -y
	  conda deactivate
	  conda deactivate
	  conda deactivate

	  echo " "


	  ################################## QGIS #####################################
	#QGIS (Quantum Geographic Information System) is a free and open-source platform that allows users to
	#analyze, view, and edit geospatial data. It supports both vector and raster layers, as well as various #web services, and is extensible through community-developed plugins. Key features include map
	#creation, spatial analysis, and data management.
	#############################################################################

	  conda env create -f $HOME/WRF-MOSIT/qgis.3.28.8.yml

	  echo " "




	  ############################ WRF-SFIRE  #################################
	  ## WRF-SFIRE
	  # Cloned from openwfm
	  # option 34, option 1 for gfortran and distributed memory w/basic nesting
	  # large file support enable with WRFiO_NCD_LARGE_FILE_SUPPORT=1
	  ########################################################################
	  cd ${WRF_FOLDER}
	  git clone https://github.com/openwfm/WRF-SFIRE.git

	  cd ${WRF_FOLDER}/WRF-SFIRE/
	  ./clean -a                      # Clean old configuration files

	   if [ ${auto_config} -eq 1 ]
	    then
	        sed -i '428s/.*/  $response = "34 \\n";/g' ${WRF_FOLDER}/WRF-SFIRE/arch/Config.pl # Answer for compiler choice
	        sed -i '869s/.*/  $response = "1 \\n";/g' ${WRF_FOLDER}/WRF-SFIRE/arch/Config.pl  #Answer for basic nesting
	        ./configure 2>&1 | tee configure.log
	    else
	      ./configure 2>&1 | tee configure.log  #Option 34 gfortran compiler with distributed memory option 1 for basic nesting
	  fi

	 ./compile -j $CPU_HALF_EVEN em_real 2>&1 | tee compile.wrf1.log
	 ./compile -j $CPU_HALF_EVEN em_real 2>&1 | tee compile.wrf2.log

	   # IF statement to check that all files were created.
	    cd ${WRF_FOLDER}/WRF-SFIRE/main
	    n=$(ls ./*.exe | wc -l)
	    if (($n >= 3)); then
	      echo "All expected files created."
	      read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
	    else
	      echo "Missing one or more expected files."
	      echo "Running compiler again"
	      cd ${WRF_FOLDER}/WRF-SFIRE/
	      ./compile -j $CPU_HALF_EVEN em_real 2>&1 | tee compile.wrf2.log
	      cd ${WRF_FOLDER}/WRF-SFIRE/main
	      n=$(ls ./*.exe | wc -l)
	      if (($n >= 3)); then
	        echo "All expected files created."
	        read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
	      else
	        read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
	        exit
	      fi
	    fi

	    echo " "

	  cd ${WRF_FOLDER}/WRF-SFIRE
	 ./compile -j $CPU_HALF_EVEN em_fire 2>&1 | tee compile.wrfsfire.log

	  export WRF_DIR=${WRF_FOLDER}/WRF-SFIRE



	  ############################WPSV4.2#####################################
	  ## WPS v4.2
	  ## Downloaded from git tagged releases
	  # Cloned from openwfm
	  #Option 3 for gfortran and distributed memory
	  ########################################################################
	  cd ${WRF_FOLDER}
	  git clone https://github.com/openwfm/WPS.git

	  cd ${WRF_FOLDER}/WPS
	  ./clean -a

	  cd ${WRF_FOLDER}/WPS
	  if [ ${auto_config} -eq 1 ]
	    then
	      FFLAGS=$FFLAGS  echo 3 | ./configure 2>&1 | tee configure.log #Option 3 for gfortran and distributed memory
	      else
	      FFLAGS=$FFLAGS  ./configure 2>&1 | tee configure.log  #Option 3 gfortran compiler with distributed memory
	  fi

	  #sed statements for issue with GNUv10+

	  if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]
	    then
	  sed -i '70s/-frecord-marker=4/-frecord-marker=4 -m64 -fallow-argument-mismatch/g' ${WRF_FOLDER}/WPS/configure.wps
	  sed -i '71s/-frecord-marker=4/-frecord-marker=4 -m64 -fallow-argument-mismatch/g' ${WRF_FOLDER}/WPS/configure.wps
	  fi

	  ./compile 2>&1 | tee compile.wps.log


	  # IF statement to check that all files were created.
	  cd ${WRF_FOLDER}/WPS
	  n=$(ls ./*.exe | wc -l)
	  if (($n == 3)); then
	    echo "All expected files created."
	    read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
	  else
	    echo "Missing one or more expected files."
	    echo "Running compiler again"

	    ./compile 2>&1 | tee compile.wps2.log
	    cd ${WRF_FOLDER}/WPS
	    n=$(ls ./*.exe | wc -l)
	    if (($n == 3)); then
	      echo "All expected files created."
	      read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
	    else
	      read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
	      exit
	    fi
	  fi

	  echo " "




	  ######################## WPS Domain Setup Tools ########################
	  ## DomainWizard
	  cd ${WRF_FOLDER}/Downloads
	  wget -c -4 http://esrl.noaa.gov/gsd/wrfportal/domainwizard/WRFDomainWizard.zip
	  mkdir ${WRF_FOLDER}/WRFDomainWizard
	  unzip WRFDomainWizard.zip -d ${WRF_FOLDER}/WRFDomainWizard
	  chmod +x ${WRF_FOLDER}/WRFDomainWizard/run_DomainWizard

	  echo " "
	  ######################## WPF Portal Setup Tools ########################
	  ## WRFPortal
	  cd ${WRF_FOLDER}/Downloads
	  wget -c -4 https://esrl.noaa.gov/gsd/wrfportal/portal/wrf-portal.zip
	  mkdir ${WRF_FOLDER}/WRFPortal
	  unzip wrf-portal.zip -d ${WRF_FOLDER}/WRFPortal
	  chmod +x ${WRF_FOLDER}/WRFPortal/runWRFPortal


	  echo " "

	  ######################## Static Geography Data inc/ Optional ####################
	  # http://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	  # These files are large so if you only need certain ones comment the others off
	  # All files downloaded and untarred is 200GB
	  # https://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	  #################################################################################
	  cd ${WRF_FOLDER}/Downloads
	  mkdir ${WRF_FOLDER}/GEOG
	  mkdir ${WRF_FOLDER}/GEOG/WPS_GEOG

	  echo " "
	  echo "Mandatory WRF Preprocessing System (WPS) Geographical Input Data Mandatory Fields Downloads"
	  echo " "
	  wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_high_res_mandatory.tar.gz
	  tar -xvzf geog_high_res_mandatory.tar.gz -C ${WRF_FOLDER}/GEOG/

	  wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_low_res_mandatory.tar.gz
	  tar -xvzf geog_low_res_mandatory.tar.gz -C ${WRF_FOLDER}/GEOG/
	  mv ${WRF_FOLDER}/GEOG/WPS_GEOG_LOW_RES/ ${WRF_FOLDER}/GEOG/WPS_GEOG


	  if [ ${WPS_Specific_Applications} -eq 1 ]
	    then
	      echo " "
	      echo " WPS Geographical Input Data Mandatory for Specific Applications"
	      echo " "

	      wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_thompson28_chem.tar.gz
	      tar -xvzf geog_thompson28_chem.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

	      wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_noahmp.tar.gz
	      tar -xvzf geog_noahmp.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

	      wget -c -4  https://www2.mmm.ucar.edu/wrf/src/wps_files/irrigation.tar.gz
	      tar -xvzf irrigation.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

	      wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_px.tar.gz
	      tar -xvzf geog_px.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

	      wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_urban.tar.gz
	      tar -xvzf geog_urban.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

	      wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_ssib.tar.gz
	      tar -xvzf geog_ssib.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

	      wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/lake_depth.tar.bz2
	      tar -xvf lake_depth.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

	      wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/topobath_30s.tar.bz2
	      tar -xvf topobath_30s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

	      wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/gsl_gwd.tar.bz2
	      tar -xvf gsl_gwd.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG
	  fi


	  if [ ${Optional_GEOG} -eq 1 ]
	    then
	      echo " "
	      echo "Optional WPS Geographical Input Data"
	      echo " "


	      wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_older_than_2000.tar.gz
	      tar -xvzf geog_older_than_2000.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

	      wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s_with_lakes.tar.gz
	      tar -xvzf modis_landuse_20class_15s_with_lakes.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

	      wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_alt_lsm.tar.gz
	      tar -xvzf geog_alt_lsm.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

	      wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/nlcd2006_ll_9s.tar.bz2
	      tar -xvf nlcd2006_ll_9s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

	      wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/updated_Iceland_LU.tar.gz
	      tar -xvf updated_Iceland_LU.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

	      wget -c -4 https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s.tar.bz2
	      tar -xvf modis_landuse_20class_15s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG


	  fi


fi

if [ "$Centos_64bit_GNU" = "2" ] && [ "$SFIRE_PICK" = "1" ]; then
	#############################basic package managment############################
    echo "old version of GNU detected"
    echo $PASSWD | sudo -S yum install epel-release -y
    echo $PASSWD | sudo -S yum install centos-release-scl -y
    echo $PASSWD | sudo -S yum clean all
    echo $PASSWD | sudo -S yum remove devtoolset-11*
    echo $PASSWD | sudo -S yum install devtoolset-11
    echo $PASSWD | sudo -S yum install devtoolset-11-\* -y
    echo $PASSWD | sudo -S yum -y update
    echo $PASSWD | sudo -S yum -y upgrade

    source /opt/rh/devtoolset-11/enable
    gcc --version
    echo $PASSWD | sudo -S yum install epel-release -y
    echo $PASSWD | sudo -S yum install dnf -y
    echo $PASSWD | sudo -S dnf install epel-release -y
    echo $PASSWD | sudo -S dnf install dnf -y
    echo $PASSWD | sudo -S dnf -y update
    echo $PASSWD | sudo -S dnf -y upgrade
    echo $PASSWD | sudo -S dnf -y install autoconf automake bzip2 bzip2-devel byacc cairo-devel cmake cpp curl curl-devel flex fontconfig fontconfig-devel gcc gcc-c++ gcc-gfortran git java-11-openjdk java-11-openjdk-devel ksh libjpeg libjpeg-deve libX11 libX11-devel libXaw libXaw-devel libXext-devel libXmu libXmu-devel libXrender libXrender-devel libXt libXt-devel libxml2 libxml2-devel libXmu  libXmu-devel libgeotiff libgeotiff-devel libtiff libtiff-devel m4  nfs-utils perl pkgconfig pixman  pixman-devel python3 python3-devel tcsh time unzip wget
    echo $PASSWD | sudo -S  dnf -y groupinstall "Development Tools"
    echo $PASSWD | sudo -S dnf -y update
    echo $PASSWD | sudo -S dnf -y upgrade
    source /opt/rh/devtoolset-11/enable
    echo " "

    ##############################Directory Listing############################
    export HOME=`cd;pwd`

    mkdir $HOME/WRF_SFIRE
    export WRF_FOLDER=$HOME/WRF_SFIRE
    cd ${WRF_FOLDER}/
    mkdir Downloads
    mkdir Libs
    export DIR=${WRF_FOLDER}/Libs
    mkdir Libs/grib2
    mkdir Libs/NETCDF
    mkdir Libs/MPICH
    mkdir -p Tests/Environment
    mkdir -p Tests/Compatibility

    echo " "
    #############################Core Management####################################

    export CPU_CORE=$(nproc)                                             # number of available threads on system
    export CPU_6CORE="6"
    export CPU_HALF=$(($CPU_CORE / 2))                                   #half of availble cores on system
    export CPU_HALF_EVEN=$(( $CPU_HALF - ($CPU_HALF % 2) ))              #Forces CPU cores to even number to avoid partial core export. ie 7 cores would be 3.5 cores.

    if [ $CPU_CORE -le $CPU_6CORE ]                                  #If statement for low core systems.  Forces computers to only use 1 core if there are 4 cores or less on the system.
    then
      export CPU_HALF_EVEN="2"
    else
      export CPU_HALF_EVEN=$(( $CPU_HALF - ($CPU_HALF % 2) ))
    fi


    echo "##########################################"
    echo "Number of Threads being used $CPU_HALF_EVEN"
    echo "##########################################"


    echo " "
    ##############################Downloading Libraries############################
    #Force use of ipv4 with -4
    cd Downloads
    wget -c https://github.com/madler/zlib/archive/refs/tags/v$Zlib_Version.tar.gz
    wget -c https://github.com/HDFGroup/hdf5/archive/refs/tags/hdf5-$HDF5_Version.tar.gz
    wget -c https://github.com/Unidata/netcdf-c/archive/refs/tags/v$Netcdf_C_Version.tar.gz
    wget -c https://github.com/Unidata/netcdf-fortran/archive/refs/tags/v$Netcdf_Fortran_Version.tar.gz
    wget -c https://github.com/pmodels/mpich/releases/download/v$Mpich_Version/mpich-$Mpich_Version.tar.gz
    wget -c https://download.sourceforge.net/libpng/libpng-$Libpng_Version.tar.gz
    wget -c https://src.fedoraproject.org/repo/pkgs/jasper/jasper-$Jasper_Version.zip/a342b2b4495b3e1394e161eb5d85d754/jasper-$Jasper_Version.zip
    wget -c  https://parallel-netcdf.github.io/Release/pnetcdf-$Pnetcdf_Version.tar.gz
    wget -c https://sourceforge.net/projects/opengrads/files/grads2/2.2.1.oga.1/Linux%20%2864%20Bits%29/opengrads-2.2.1.oga.1-bundle-x86_64-pc-linux-gnu-glibc_2.17.tar.gz
    wget -c  https://github.com/openwfm/convert_geotiff/releases/download/v0.1/convert_geotiff-0.1.0.tar.gz


    echo " "
    ####################################Compilers#####################################
    export CC=gcc
    export CXX=g++
    export FC=gfortran
    export F77=gfortran
    export CFLAGS="-fPIC -fPIE -O3"



    #IF statement for GNU compiler issue
    export GCC_VERSION=$(gcc -dumpversion| awk '{print$1}')
    export GFORTRAN_VERSION=$(gfortran -dumpversion| awk '{print$1}')
    export GPLUSPLUS_VERSION=$(g++ -dumpversion| awk '{print$1}')

    export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
    export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
    export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

    export version_10="10"

    if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]
      then
        export fallow_argument=-fallow-argument-mismatch
        export boz_argument=-fallow-invalid-boz
      else
        export fallow_argument=
        export boz_argument=
    fi


    export FFLAGS="$fallow_argument -m64"
    export FCFLAGS="$fallow_argument -m64"


    echo "##########################################"
    echo "FFLAGS = $FFLAGS"
    echo "FCFLAGS = $FCFLAGS"
    echo "##########################################"




    echo " "
    #############################zlib############################
    #Uncalling compilers due to comfigure issue with zlib$Zlib_Version
    #With CC & CXX definied ./configure uses different compiler Flags

  cd ${WRF_FOLDER}/Downloads
  tar -xvzf v$Zlib_Version.tar.gz
  cd zlib-$Zlib_Version/
autoreconf -i -f 2>&1 | tee autoreconf.log
  ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
automake -a -f 2>&1 | tee automake.log
  make -j $CPU_HALF_EVEN 2>&1 | tee make.log
  make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
  #make check

  echo " "
    ##############################MPICH############################
   #F90= due to compiler issues with mpich install
  cd ${WRF_FOLDER}/Downloads
  tar -xvzf mpich-$Mpich_Version.tar.gz
  cd mpich-$Mpich_Version/
autoreconf -i -f 2>&1 | tee autoreconf.log
  F90= ./configure --prefix=$DIR/MPICH --with-device=ch3 FFLAGS=$fallow_argument FCFLAGS=$fallow_argument 2>&1 | tee configure.log
automake -a -f 2>&1 | tee automake.log
  make -j $CPU_HALF_EVEN 2>&1 | tee make.log
  make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
  # make check



  export PATH=$DIR/MPICH/bin:$PATH

  export MPIFC=$DIR/MPICH/bin/mpifort
  export MPIF77=$DIR/MPICH/bin/mpifort
  export MPIF90=$DIR/MPICH/bin/mpifort
  export MPICC=$DIR/MPICH/bin/mpicc
  export MPICXX=$DIR/MPICH/bin/mpicxx


  echo " "
    #############################libpng############################
  cd ${WRF_FOLDER}/Downloads
  export LDFLAGS=-L$DIR/grib2/lib
  export CPPFLAGS=-I$DIR/grib2/include
  tar -xvzf libpng-$Libpng_Version.tar.gz
  cd libpng-$Libpng_Version/
autoreconf -i -f 2>&1 | tee autoreconf.log
  CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS  ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
automake -a -f 2>&1 | tee automake.log
  make -j $CPU_HALF_EVEN 2>&1 | tee make.log
  make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
  #make check
  echo " "

    #############################JasPer############################
  cd ${WRF_FOLDER}/Downloads
  unzip jasper-$Jasper_Version.zip
  cd jasper-$Jasper_Version/
autoreconf -i -f 2>&1 | tee autoreconf.log
  ./configure --prefix=$DIR/grib2
  CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS  ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
automake -a -f 2>&1 | tee automake.log
  make -j $CPU_HALF_EVEN 2>&1 | tee make.log
  make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
  #make check

  export JASPERLIB=$DIR/grib2/lib
  export JASPERINC=$DIR/grib2/include


  echo " "
    #############################hdf5 library for netcdf4 functionality############################
  cd ${WRF_FOLDER}/Downloads
  tar -xvzf hdf5-$HDF5_Version.tar.gz
  cd hdf5-hdf5-$HDF5_Version
autoreconf -i -f 2>&1 | tee autoreconf.log
  CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS  ./configure --prefix=$DIR/grib2 --with-zlib=$DIR/grib2 --enable-hl --enable-fortran --enable-parallel 2>&1 | tee configure.log
automake -a -f 2>&1 | tee automake.log
  make -j $CPU_HALF_EVEN 2>&1 | tee make.log
  make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
  #make check

  export HDF5=$DIR/grib2
  export PHDF5=$DIR/grib2
  export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH


  echo " "

    #############################Install Parallel-netCDF##############################
    #Make file created with half of available cpu cores
    #Hard path for MPI added
    ##################################################################################
  cd ${WRF_FOLDER}/Downloads
  tar -xzvf pnetcdf-$Pnetcdf_Version.tar.gz
  cd pnetcdf-$Pnetcdf_Version
  export MPIFC=$DIR/MPICH/bin/mpifort
  export MPIF77=$DIR/MPICH/bin/mpifort
  export MPIF90=$DIR/MPICH/bin/mpifort
  export MPICC=$DIR/MPICH/bin/mpicc
  export MPICXX=$DIR/MPICH/bin/mpicxx
autoreconf -i -f 2>&1 | tee autoreconf.log
  ./configure --prefix=$DIR/grib2  --enable-shared --enable-static 2>&1 | tee configure.log
automake -a -f 2>&1 | tee automake.log
  make -j $CPU_HALF_EVEN 2>&1 | tee make.log
  make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
  #make check

  export PNETCDF=$DIR/grib2




    ##############################Install NETCDF C Library############################
  cd ${WRF_FOLDER}/Downloads
  tar -xzvf v$Netcdf_C_Version.tar.gz
  cd netcdf-c-$Netcdf_C_Version/
  export CPPFLAGS=-I$DIR/grib2/include
  export LDFLAGS=-L$DIR/grib2/lib
  export LIBS="-lhdf5_hl -lhdf5 -lz -lcurl -lgfortran -lgcc -lm -ldl -lpnetcdf"
autoreconf -i -f 2>&1 | tee autoreconf.log
  CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 ./configure --prefix=$DIR/NETCDF --disable-dap --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-pnetcdf --enable-cdf5 --enable-parallel-tests 2>&1 | tee configure.log
automake -a -f 2>&1 | tee automake.log
  make -j $CPU_HALF_EVEN 2>&1 | tee make.log
  make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
  #make check

  export PATH=$DIR/NETCDF/bin:$PATH
  export NETCDF=$DIR/NETCDF
  echo " "
    ##############################NetCDF fortran library############################
  cd ${WRF_FOLDER}/Downloads
  tar -xvzf v$Netcdf_Fortran_Version.tar.gz
  cd netcdf-fortran-$Netcdf_Fortran_Version/
  export LD_LIBRARY_PATH=$DIR/NETCDF/lib:$LD_LIBRARY_PATH
  export CPPFLAGS="-I$DIR/NETCDF/include -I$DIR/grib2/include"
  export LDFLAGS="-L$DIR/NETCDF/lib -L$DIR/grib2/lib"
  export LIBS="-lnetcdf -lpnetcdf -lcurl -lhdf5_hl -lhdf5 -lz -lm -ldl -lgcc -lgfortran"
autoreconf -i -f 2>&1 | tee autoreconf.log
  CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 ./configure --prefix=$DIR/NETCDF --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-parallel-tests --enable-hdf5 2>&1 | tee configure.log
automake -a -f 2>&1 | tee automake.log
  make -j $CPU_HALF_EVEN 2>&1 | tee make.log
  make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
  #make check

  echo " "

 ############################# Convert Geo Tiff #################################

  cd ${WRF_FOLDER}/Downloads
  tar -xzvf convert_geotiff-0.1.0.tar.gz
  cd convert_geotiff-0.1.0
  export CPPFLAGS="-I$DIR/NETCDF/include -I$DIR/grib2/include -I/usr/include/libgeotiff"
  export LDFLAGS="-L$DIR/NETCDF/lib -L$DIR/grib2/lib -L/usr/lib/libgeotiff"
  autoreconf -i -f 2>&1 | tee autoreconf.log
  CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 ./configure -exec-prefix=$DIR/grib2 --prefix=$DIR/grib2 2>&1 | tee configure.log
automake -a -f 2>&1 | tee automake.log
  make -j $CPU_HALF_EVEN 2>&1 | tee make.log
  make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log

  export CPPFLAGS="-I$DIR/NETCDF/include -I$DIR/grib2/include"
  export LDFLAGS="-L$DIR/NETCDF/lib -L$DIR/grib2/lib"
  export LIBS="-lnetcdf -lpnetcdf -lcurl -lhdf5_hl -lhdf5 -lz -lm -ldl -lgcc -lgfortran"


    #################################### System Environment Tests ##############

    cd ${WRF_FOLDER}/Downloads
    wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_NETCDF_MPI_tests.tar
    wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_tests.tar

    tar -xvf Fortran_C_tests.tar -C ${WRF_FOLDER}/Tests/Environment
    tar -xvf Fortran_C_NETCDF_MPI_tests.tar -C ${WRF_FOLDER}/Tests/Compatibility

    export one="1"
    echo " "
    ############## Testing Environment #####

    cd ${WRF_FOLDER}/Tests/Environment

    cp ${NETCDF}/include/netcdf.inc .

    echo " "
    echo " "
    echo "Environment Testing "
    echo "Test 1"
    $FC TEST_1_fortran_only_fixed.f
    ./a.out | tee env_test1.txt
    export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test1.txt | awk  '{print$1}')
     if [ $TEST_PASS -ge 1 ]
        then
          echo "Enviroment Test 1 Passed"
        else
          echo "Environment Compiler Test 1 Failed"
          exit
      fi
    read -r -t 3 -p "I am going to wait for 3 seconds only ..."

    echo " "
    echo "Test 2"
    $FC TEST_2_fortran_only_free.f90
    ./a.out | tee env_test2.txt
    export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test2.txt | awk  '{print$1}')
     if [ $TEST_PASS -ge 1 ]
        then
          echo "Enviroment Test 2 Passed"
        else
          echo "Environment Compiler Test 2 Failed"
          exit
      fi
    echo " "
    read -r -t 3 -p "I am going to wait for 3 seconds only ..."

    echo " "
    echo "Test 3"
    $CC TEST_3_c_only.c
    ./a.out | tee env_test3.txt
    export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test3.txt | awk  '{print$1}')
     if [ $TEST_PASS -ge 1 ]
        then
          echo "Enviroment Test 3 Passed"
        else
          echo "Environment Compiler Test 3 Failed"
          exit
      fi
    echo " "
    read -r -t 3 -p "I am going to wait for 3 seconds only ..."

    echo " "
    echo "Test 4"
    $CC -c -m64 TEST_4_fortran+c_c.c
    $FC -c -m64 TEST_4_fortran+c_f.f90
    $FC -m64 TEST_4_fortran+c_f.o TEST_4_fortran+c_c.o
    ./a.out | tee env_test4.txt
    export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test4.txt | awk  '{print$1}')
     if [ $TEST_PASS -ge 1 ]
        then
          echo "Enviroment Test 4 Passed"
        else
          echo "Environment Compiler Test 4 Failed"
          exit
      fi
    echo " "
    read -r -t 3 -p "I am going to wait for 3 seconds only ..."

    echo " "
    ############## Testing Environment #####

    cd ${WRF_FOLDER}/Tests/Compatibility

    cp ${NETCDF}/include/netcdf.inc .

    echo " "
    echo " "
    echo "Library Compatibility Tests "
    echo "Test 1"
    $FC -c 01_fortran+c+netcdf_f.f
    $CC -c 01_fortran+c+netcdf_c.c
    $FC 01_fortran+c+netcdf_f.o 01_fortran+c+netcdf_c.o \
         -L${NETCDF}/lib -lnetcdff -lnetcdf

         ./a.out | tee comp_test1.txt
         export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test1.txt | awk  '{print$1}')
          if [ $TEST_PASS -ge 1 ]
             then
               echo "Compatibility Test 1 Passed"
             else
               echo "Compatibility Compiler Test 1 Failed"
               exit
           fi
         echo " "
         read -r -t 3 -p "I am going to wait for 3 seconds only ..."

    echo " "

    echo "Test 2"
    $MPIFC -c 02_fortran+c+netcdf+mpi_f.f
    $MPICC -c 02_fortran+c+netcdf+mpi_c.c
    $MPIFC 02_fortran+c+netcdf+mpi_f.o \
    02_fortran+c+netcdf+mpi_c.o \
         -L${NETCDF}/lib -lnetcdff -lnetcdf

    $DIR/MPICH/bin/mpirun ./a.out | tee comp_test2.txt
    export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test2.txt | awk  '{print$1}')
     if [ $TEST_PASS -ge 1 ]
        then
          echo "Compatibility Test 2 Passed"
        else
          echo "Compatibility Compiler Test 2 Failed"
          exit
      fi
    echo " "
    read -r -t 3 -p "I am going to wait for 3 seconds only ..."
    echo " "

    echo " All tests completed and passed"
    echo " "


    ###############################NCEPlibs#####################################
    #The libraries are built and installed with
    # ./make_ncep_libs.sh -s MACHINE -c COMPILER -d NCEPLIBS_DIR -o OPENMP [-m mpi] [-a APPLICATION]
    #It is recommended to install the NCEPlibs into their own directory, which must be created before running the installer. Further information on the command line arguments can be obtained with
    # ./make_ncep_libs.sh -h

    #If iand error occurs go to https://github.com/NCAR/NCEPlibs/pull/16/files make adjustment and re-run ./make_ncep_libs.sh
    ############################################################################



    cd ${WRF_FOLDER}/Downloads
    git clone https://github.com/NCAR/NCEPlibs.git
    cd NCEPlibs
    mkdir $DIR/nceplibs

    export JASPER_INC=$DIR/grib2/include
    export PNG_INC=$DIR/grib2/include
    export NETCDF=$DIR/NETCDF

    #for loop to edit linux.gnu for nceplibs to install
    #make if statement for gcc-9 or older
    export GCC_VERSION=$(gcc -dumpfullversion | awk '{print$1}')
    export GFORTRAN_VERSION=$(gfortran -dumpfullversion | awk '{print$1}')
    export GPLUSPLUS_VERSION=$(g++ -dumpfullversion | awk '{print$1}')

    export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
    export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
    export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

    export version_10="10"

    if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]
    then
      y="24 28 32 36 40 45 49 53 56 60 64 68 69 73 74 79"
      for X in $y; do
        sed -i "${X}s/= /= $fallow_argument $boz_argument /g" ${WRF_FOLDER}/Downloads/NCEPlibs/macros.make.linux.gnu
      done
    else
      echo ""
      echo "Loop not needed"
    fi

    if [ ${auto_config} -eq 1 ]
      then
        echo yes | ./make_ncep_libs.sh -s linux -c gnu -d $DIR/nceplibs -o 0 -m 1 -a upp | tee make.install.log
      else
        ./make_ncep_libs.sh -s linux -c gnu -d $DIR/nceplibs -o 0 -m 1 -a upp | tee make.install.log
    fi

    export PATH=$DIR/nceplibs:$PATH

    echo " "
    ################################UPPv$Mpich_Version######################################
    #Previous verison of UPP
    #WRF Support page recommends UPPV$Mpich_Version due to too many changes to WRF and UPP code
    #since the WRF was written
    #Option 8 gfortran compiler with distributed memory
    #############################################################################
    cd ${WRF_FOLDER}/
    git clone -b dtc_post_v$Mpich_Version.0 --recurse-submodules https://github.com/NOAA-EMC/EMC_post UPPV$Mpich_Version
    cd UPPV$Mpich_Version
    mkdir postprd
    export NCEPLIBS_DIR=$DIR/nceplibs
    export NETCDF=$DIR/NETCDF

    if [ ${auto_config} -eq 1 ]
      then
        echo 8 | ./configure  #Option 8 gfortran compiler with distributed memory
      else
        ./configure  #Option 8 gfortran compiler with distributed memory
    fi


    #make if statement for gcc-9 or older
    export GCC_VERSION=$(gcc -dumpfullversion | awk '{print$1}')
    export GFORTRAN_VERSION=$(gfortran -dumpfullversion | awk '{print$1}')
    export GPLUSPLUS_VERSION=$(g++ -dumpfullversion | awk '{print$1}')

    export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
    export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
    export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

    export version_10="10"

    if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]
      then
        z="58 63"
        for X in $z; do
          sed -i "${X}s/(FOPT)/(FOPT) $fallow_argument $boz_argument  /g" ${WRF_FOLDER}/UPPV$Mpich_Version/configure.upp
        done
      else
        echo ""
        echo "Loop not needed"
    fi

    ./compile
    cd ${WRF_FOLDER}/UPPV$Mpich_Version/scripts
    echo $PASSWD | sudo -S cpan install XML::LibXML
  chmod +x run_unipost

    # IF statement to check that all files were created.
     cd ${WRF_FOLDER}/UPPV$Mpich_Version/exec
     n=$(ls ./*.exe | wc -l)
     if (( $n == 1 ))
      then
        echo "All expected files created."
        read -r -t 5 -p "Finished installing UPPV$Mpich_Version. I am going to wait for 5 seconds only ..."
      else
       echo "Missing one or more expected files. Exiting the script."
       read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
       exit
     fi

    echo " "



    ######################## ARWpost V3.1  ############################
    ## ARWpost
    ##Configure #3
    ###################################################################
    cd ${WRF_FOLDER}/Downloads
    wget -c http://www2.mmm.ucar.edu/wrf/src/ARWpost_V3.tar.gz
    tar -xvzf ARWpost_V3.tar.gz -C ${WRF_FOLDER}/
    cd ${WRF_FOLDER}/ARWpost
    ./clean -a
    sed -i -e 's/-lnetcdf/-lnetcdff -lnetcdf/g' ${WRF_FOLDER}/ARWpost/src/Makefile
    export NETCDF=$DIR/NETCDF


    if [ ${auto_config} -eq 1 ]
      then
        echo 3 | ./configure  #Option 3 gfortran compiler with distributed memory
      else
        ./configure  #Option 3 gfortran compiler with distributed memory
    fi


    export GCC_VERSION=$(gcc -dumpfullversion | awk '{print$1}')
    export GFORTRAN_VERSION=$(gfortran -dumpfullversion | awk '{print$1}')
    export GPLUSPLUS_VERSION=$(g++ -dumpfullversion | awk '{print$1}')

    export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
    export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
    export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

    export version_10="10"

    if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]
    then
      sed -i '32s/-ffree-form -O -fno-second-underscore -fconvert=big-endian -frecord-marker=4/-ffree-form -O -fno-second-underscore -fconvert=big-endian -frecord-marker=4 ${fallow_argument} /g' configure.arwp
    fi


    sed -i -e 's/-C -P -traditional/-P -traditional/g' ${WRF_FOLDER}/ARWpost/configure.arwp
    ./compile


    export PATH=${WRF_FOLDER}/ARWpost/ARWpost.exe:$PATH

    echo " "
    ################################ OpenGrADS ##################################
    #Verison 2.2.1 32bit of Linux
    #############################################################################
    if [[ $GRADS_PICK -eq 1 ]]; then
      cd ${WRF_FOLDER}/Downloads
      tar -xzvf opengrads-2.2.1.oga.1-bundle-x86_64-pc-linux-gnu-glibc_2.17.tar.gz -C ${WRF_FOLDER}/
      cd ${WRF_FOLDER}/
      mv ${WRF_FOLDER}/opengrads-2.2.1.oga.1  ${WRF_FOLDER}/GrADS
      cd GrADS/Contents
      wget -c https://github.com/regisgrundig/SIMOP/blob/master/g2ctl.pl
      chmod +x g2ctl.pl
      wget -c https://sourceforge.net/projects/opengrads/files/wgrib2/0.1.9.4/wgrib2-v0.1.9.4-bin-i686-glib2.5-linux-gnu.tar.gz
      tar -xzvf wgrib2-v0.1.9.4-bin-i686-glib2.5-linux-gnu.tar.gz
      cd wgrib2-v0.1.9.4/bin
      mv wgrib2 ${WRF_FOLDER}/GrADS/Contents
      cd ${WRF_FOLDER}/GrADS/Contents
      rm wgrib2-v0.1.9.4-bin-i686-glib2.5-linux-gnu.tar.gz
      rm -r wgrib2-v0.1.9.4


      export PATH=${WRF_FOLDER}/GrADS/Contents:$PATH


    echo " "
    fi
    ################################## GrADS ###############################
    # Version  2.2.1
    # Sublibs library instructions: http://cola.gmu.edu/grads/gadoc/supplibs2.html
    # GrADS instructions: http://cola.gmu.edu/grads/downloads.php
    ########################################################################
    if [[ $GRADS_PICK -eq 2 ]]; then
       cd ${WRF_FOLDER}/Downloads
       wget -c ftp://cola.gmu.edu/grads/2.2/grads-2.2.1-bin-centos7.4-x86_64.tar.gz
       tar -xzvf grads-2.2.1-bin-centos7.4-x86_64.tar.gz -C ${WRF_FOLDER}
       cd ${WRF_FOLDER}/grads-2.2.1/bin
       chmod 775 *

    fi


      ##################### NCAR COMMAND LANGUAGE           ##################
      ########### NCL compiled via Conda                    ##################
      ########### This is the preferred method by NCAR      ##################
      ########### https://www.ncl.ucar.edu/index.shtml      ##################
      #Installing Miniconda3 to WRF-Hydro directory and updating libraries

      export Miniconda_Install_DIR=${WRF_FOLDER}/miniconda3

      mkdir -p $Miniconda_Install_DIR

      wget -c https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $Miniconda_Install_DIR/miniconda.sh
      bash $Miniconda_Install_DIR/miniconda.sh -b -u -p $Miniconda_Install_DIR

      rm -rf $Miniconda_Install_DIR/miniconda.sh

      export PATH=${WRF_FOLDER}/miniconda3/bin:$PATH

      source $Miniconda_Install_DIR/etc/profile.d/conda.sh

      $Miniconda_Install_DIR/bin/conda init bash
      $Miniconda_Install_DIR/bin/conda init zsh
      $Miniconda_Install_DIR/bin/conda init tcsh
      $Miniconda_Install_DIR/bin/conda init xonsh
      $Miniconda_Install_DIR/bin/conda init powershell

      conda config --add channels conda-forge
      conda config --set auto_activate_base false
      conda update -n root --all -y


      echo " "





      echo " "
      #Installing NCL via Conda
      source $Miniconda_Install_DIR/etc/profile.d/conda.sh
      conda init bash
      conda activate base
      conda create -n ncl_stable -c conda-forge ncl -y
      conda activate ncl_stable

      conda deactivate
      conda deactivate
      conda deactivate

      echo " "

    ############################## RIP4 #####################################
    mkdir ${WRF_FOLDER}/RIP4
    cd ${WRF_FOLDER}/Downloads
    wget -c https://www2.mmm.ucar.edu/wrf/src/RIP_47.tar.gz
    tar -xvzf RIP_47.tar.gz -C ${WRF_FOLDER}/RIP4
    cd ${WRF_FOLDER}/RIP4/RIP_47
    mv * ..
    cd ${WRF_FOLDER}/RIP4
    rm -rd RIP_47
    source $Miniconda_Install_DIR/etc/profile.d/conda.sh
    conda activate ncl_stable
    conda install -c conda-forge c-compiler fortran-compiler cxx-compiler -y


    export RIP_ROOT=${WRF_FOLDER}/RIP4
    export NETCDF=$DIR/NETCDF
    export NCARG_ROOT=${WRF_FOLDER}/anaconda3/envs/ncl_stable


    sed -i '349s|-L${NETCDF}/lib -lnetcdf $NETCDFF|-L${NETCDF}/lib $NETCDFF -lnetcdff -lnetcdf -lnetcdf -lnetcdff_C -lhdf5 |g' ${WRF_FOLDER}/RIP4/configure

    sed -i '27s|NETCDFLIB	= -L${NETCDF}/lib -lnetcdf CONFIGURE_NETCDFF_LIB|NETCDFLIB	= -L</usr/lib/x86_64-linux-gnu/libm.a> -lm -L${NETCDF}/lib CONFIGURE_NETCDFF_LIB -lnetcdf -lhdf5 -lhdf5_hl -lgfortran -lgcc -lz |g' ${WRF_FOLDER}/RIP4/arch/preamble

    sed -i '31s|-L${NCARG_ROOT}/lib -lncarg -lncarg_gks -lncarg_c -lX11 -lXext -lpng -lz CONFIGURE_NCARG_LIB| -L${NCARG_ROOT}/lib -lncarg -lncarg_gks -lncarg_c -lX11 -lXext -lpng -lz -lcairo -lfontconfig -lpixman-1 -lfreetype -lexpat -lpthread -lbz2 -lXrender -lgfortran -lgcc -L</usr/lib/x86_64-linux-gnu/> -lm -lhdf5 -lhdf5_hl |g' ${WRF_FOLDER}/RIP4/arch/preamble

    sed -i '33s| -O|-fallow-argument-mismatch -O |g' ${WRF_FOLDER}/RIP4/arch/configure.defaults

    sed -i '35s|=|= -L${WRF_FOLDER}/LIBS/grib2/lib -lhdf5 -lhdf5_hl |g' ${WRF_FOLDER}/RIP4/arch/configure.defaults


    if [ ${auto_config} -eq 1 ]
      then
        echo 3 | ./configure  #Option 3 gfortran compiler with distributed memory
      else
        ./configure  #Option 3 gfortran compiler with distributed memory
    fi

    ./compile

    conda deactivate
    conda deactivate
    conda deactivate




    echo " "
    ##################### WRF Python           ##################
    ########### WRf-Python compiled via Conda  ##################
    ########### This is the preferred method by NCAR      ##################
    ##### https://wrf-python.readthedocs.io/en/latest/installation.html  ##################
    source $Miniconda_Install_DIR/etc/profile.d/conda.sh
conda env create -f $HOME/WRF-MOSIT/wrf-python-stable.yml

    echo " "

  ######################### Climate Data Operators ############
  ######################### CDO compiled via Conda ###########
  ####################### This is the preferred method #######
  ################### https://bairdlangenbrunner.github.io/python-for-climate-scientists/conda/setting-up-conda-environments.html #######################

  source $Miniconda_Install_DIR/etc/profile.d/conda.sh
  conda init bash
  conda activate base
  conda create --name cdo_stable -y
  source activate cdo_stable
  conda install -c conda-forge cdo -y
  conda update --all -y
  conda deactivate
  conda deactivate
  conda deactivate

  echo " "


  ################################## QGIS #####################################
#QGIS (Quantum Geographic Information System) is a free and open-source platform that allows users to
#analyze, view, and edit geospatial data. It supports both vector and raster layers, as well as various #web services, and is extensible through community-developed plugins. Key features include map
#creation, spatial analysis, and data management.
#############################################################################

  conda env create -f $HOME/WRF-MOSIT/qgis.3.28.8.yml

  echo " "




  ############################ WRF-SFIRE  #################################
  ## WRF-SFIRE
  # Cloned from openwfm
  # option 34, option 1 for gfortran and distributed memory w/basic nesting
  # large file support enable with WRFiO_NCD_LARGE_FILE_SUPPORT=1
  ########################################################################
  cd ${WRF_FOLDER}
  git clone https://github.com/openwfm/WRF-SFIRE.git

  cd ${WRF_FOLDER}/WRF-SFIRE/
  ./clean -a                      # Clean old configuration files

   if [ ${auto_config} -eq 1 ]
    then
        sed -i '428s/.*/  $response = "34 \\n";/g' ${WRF_FOLDER}/WRF-SFIRE/arch/Config.pl # Answer for compiler choice
        sed -i '869s/.*/  $response = "1 \\n";/g' ${WRF_FOLDER}/WRF-SFIRE/arch/Config.pl  #Answer for basic nesting
        ./configure 2>&1 | tee configure.log
    else
      ./configure 2>&1 | tee configure.log  #Option 34 gfortran compiler with distributed memory option 1 for basic nesting
  fi

 ./compile -j $CPU_HALF_EVEN em_real 2>&1 | tee compile.wrf1.log

   # IF statement to check that all files were created.
    cd ${WRF_FOLDER}/WRF-SFIRE/main
    n=$(ls ./*.exe | wc -l)
    if (($n >= 3)); then
      echo "All expected files created."
      read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
    else
      echo "Missing one or more expected files."
      echo "Running compiler again"
      cd ${WRF_FOLDER}/WRF-SFIRE/
      ./compile -j $CPU_HALF_EVEN em_real 2>&1 | tee compile.wrf2.log
      cd ${WRF_FOLDER}/WRF-SFIRE/main
      n=$(ls ./*.exe | wc -l)
      if (($n >= 3)); then
        echo "All expected files created."
        read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
      else
        read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
        exit
      fi
    fi

    echo " "

  cd ${WRF_FOLDER}/WRF-SFIRE


  export WRF_DIR=${WRF_FOLDER}/WRF-SFIRE



  ############################WPSV4.2#####################################
  ## WPS v4.2
  ## Downloaded from git tagged releases
  # Cloned from openwfm
  #Option 3 for gfortran and distributed memory
  ########################################################################
  cd ${WRF_FOLDER}
  git clone https://github.com/openwfm/WPS.git

  cd ${WRF_FOLDER}/WPS
  ./clean -a

  cd ${WRF_FOLDER}/WPS

  if [ ${auto_config} -eq 1 ]
    then
      FFLAGS=$FFLAGS  echo 3 | ./configure 2>&1 | tee configure.log #Option 3 for gfortran and distributed memory
      else
      FFLAGS=$FFLAGS  ./configure 2>&1 | tee configure.log  #Option 3 gfortran compiler with distributed memory
  fi

  #sed statements for issue with GNUv10+

  if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]
    then
  sed -i '70s/-frecord-marker=4/-frecord-marker=4 -m64 -fallow-argument-mismatch/g' ${WRF_FOLDER}/WPS/configure.wps
  sed -i '71s/-frecord-marker=4/-frecord-marker=4 -m64 -fallow-argument-mismatch/g' ${WRF_FOLDER}/WPS/configure.wps
  fi

  ./compile 2>&1 | tee compile.wps.log


  # IF statement to check that all files were created.
  cd ${WRF_FOLDER}/WPS
  n=$(ls ./*.exe | wc -l)
  if (($n == 3)); then
    echo "All expected files created."
    read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
  else
    echo "Missing one or more expected files."
    echo "Running compiler again"

    ./compile 2>&1 | tee compile.wps2.log
    cd ${WRF_FOLDER}/WPS
    n=$(ls ./*.exe | wc -l)
    if (($n == 3)); then
      echo "All expected files created."
      read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
    else
      read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
      exit
    fi
  fi

  echo " "




  ######################## WPS Domain Setup Tools ########################
  ## DomainWizard
  cd ${WRF_FOLDER}/Downloads
  wget -c http://esrl.noaa.gov/gsd/wrfportal/domainwizard/WRFDomainWizard.zip
  mkdir ${WRF_FOLDER}/WRFDomainWizard
  unzip WRFDomainWizard.zip -d ${WRF_FOLDER}/WRFDomainWizard
  chmod +x ${WRF_FOLDER}/WRFDomainWizard/run_DomainWizard

  echo " "
  ######################## WPF Portal Setup Tools ########################
  ## WRFPortal
  cd ${WRF_FOLDER}/Downloads
  wget -c https://esrl.noaa.gov/gsd/wrfportal/portal/wrf-portal.zip
  mkdir ${WRF_FOLDER}/WRFPortal
  unzip wrf-portal.zip -d ${WRF_FOLDER}/WRFPortal
  chmod +x ${WRF_FOLDER}/WRFPortal/runWRFPortal


  echo " "

  ######################## Static Geography Data inc/ Optional ####################
  # http://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
  # These files are large so if you only need certain ones comment the others off
  # All files downloaded and untarred is 200GB
  # https://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
  #################################################################################
  cd ${WRF_FOLDER}/Downloads
  mkdir ${WRF_FOLDER}/GEOG
  mkdir ${WRF_FOLDER}/GEOG/WPS_GEOG

  echo " "
  echo "Mandatory WRF Preprocessing System (WPS) Geographical Input Data Mandatory Fields Downloads"
  echo " "
  wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_high_res_mandatory.tar.gz
  tar -xvzf geog_high_res_mandatory.tar.gz -C ${WRF_FOLDER}/GEOG/

  wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_low_res_mandatory.tar.gz
  tar -xvzf geog_low_res_mandatory.tar.gz -C ${WRF_FOLDER}/GEOG/
  mv ${WRF_FOLDER}/GEOG/WPS_GEOG_LOW_RES/ ${WRF_FOLDER}/GEOG/WPS_GEOG


  if [ ${WPS_Specific_Applications} -eq 1 ]
    then
      echo " "
      echo " WPS Geographical Input Data Mandatory for Specific Applications"
      echo " "

      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_thompson28_chem.tar.gz
      tar -xvzf geog_thompson28_chem.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_noahmp.tar.gz
      tar -xvzf geog_noahmp.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

      wget -c  https://www2.mmm.ucar.edu/wrf/src/wps_files/irrigation.tar.gz
      tar -xvzf irrigation.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_px.tar.gz
      tar -xvzf geog_px.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_urban.tar.gz
      tar -xvzf geog_urban.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_ssib.tar.gz
      tar -xvzf geog_ssib.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/lake_depth.tar.bz2
      tar -xvf lake_depth.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/topobath_30s.tar.bz2
      tar -xvf topobath_30s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/gsl_gwd.tar.bz2
      tar -xvf gsl_gwd.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG
  fi


  if [ ${Optional_GEOG} -eq 1 ]
    then
      echo " "
      echo "Optional WPS Geographical Input Data"
      echo " "


      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_older_than_2000.tar.gz
      tar -xvzf geog_older_than_2000.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s_with_lakes.tar.gz
      tar -xvzf modis_landuse_20class_15s_with_lakes.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_alt_lsm.tar.gz
      tar -xvzf geog_alt_lsm.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/nlcd2006_ll_9s.tar.bz2
      tar -xvf nlcd2006_ll_9s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/updated_Iceland_LU.tar.gz
      tar -xvf updated_Iceland_LU.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

      wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s.tar.bz2
      tar -xvf modis_landuse_20class_15s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG


  fi

fi
############################################# WRF Hydro Standalone #################################
## WRFHYDRO Standalone installation with parallel process.
# Download and install required library and data files for WRFHYDRO.
# Tested in Ubuntu 20.0${WPS_VERSION} LTS & Ubuntu 22.04, Rocky Linux 9 & MacOS Ventura 64bit
# Built in 64-bit system
# Built with Intel or GNU compilers
# Tested with current available libraries on 10/10/2023
# If newer libraries exist edit script paths for changes
#Estimated Run Time ~ 30 - 60 Minutes with 10mb/s downloadspeed.
# Special thanks to:
# Youtube's meteoadriatic, GitHub user jamal919.
# University of Manchester's  Doug L
# University of Tunis El Manar's Hosni
# GSL's Jordan S.
# NCAR's Mary B., Christine W., & Carl D.
# DTC's Julie P., Tara J., George M., & John H.
# UCAR's Katelyn F., Jim B., Jordan P., Kevin M.,
##############################################################

if [ "$Ubuntu_64bit_GNU" = "1" ] && [ "$WRFHYDRO_STANDALONE_PICK" = "1" ]; then

	#############################basic package managment############################
	echo $PASSWD | sudo -S apt -y update
	echo $PASSWD | sudo -S apt -y upgrade && sudo -S apt -y autoremove
	echo $PASSWD | sudo -S apt -y install autoconf automake bison build-essential byacc cmake csh curl default-jdk default-jre emacs flex g++ gawk gcc gfortran git ksh libcurl4-openssl-dev libjpeg-dev libncurses6 libpixman-1-dev libpng-dev libtool libxml2 libxml2-dev m4 make  ncview okular openbox pipenv pkg-config  python3 python3-dev python3-pip python3-dateutil tcsh unzip xauth xorg time
	echo " "
	##############################Directory Listing############################
	export HOME=$(
		cd
		pwd
	)
	mkdir $HOME/WRFHYDRO_STANDALONE
	export WRFHYDRO_FOLDER=$HOME/WRFHYDRO_STANDALONE
	export DIR=$WRFHYDRO_FOLDER/Libs
	cd $WRFHYDRO_FOLDER/
	mkdir Downloads
	mkdir $WRFHYDRO_FOLDER/Hydro-Basecode
	mkdir Libs
	export DIR=$WRFHYDRO_FOLDER/Libs
	mkdir Libs/grib2
	mkdir Libs/NETCDF
	mkdir Libs/MPICH
	mkdir -p Tests/Environment
	mkdir -p Tests/Compatibility

	echo " "
	#############################Core Management####################################

	export CPU_CORE=$(nproc) # number of available threads on system
	export CPU_6CORE="6"
	export CPU_HALF=$(($CPU_CORE / 2))                    #half of availble cores on system
	export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2))) #Forces CPU cores to even number to avoid partial core export. ie 7 cores would be 3.5 cores.

	if [ $CPU_CORE -le $CPU_6CORE ]; then #If statement for low core systems.  Forces computers to only use 1 core if there are 4 cores or less on the system.
		export CPU_HALF_EVEN="2"
	else
		export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))
	fi

	echo "##########################################"
	echo "Number of Threads being used $CPU_HALF_EVEN"
	echo "##########################################"

	echo " "
	##############################Downloading Libraries############################
	cd Downloads
	wget -c https://github.com/madler/zlib/archive/refs/tags/v$Zlib_Version.tar.gz
	wget -c https://github.com/HDFGroup/hdf5/archive/refs/tags/hdf5-$HDF5_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-c/archive/refs/tags/v$Netcdf_C_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-fortran/archive/refs/tags/v$Netcdf_Fortran_Version.tar.gz
	wget -c https://download.sourceforge.net/libpng/libpng-$Libpng_Version.tar.gz
	wget -c https://www.ece.uvic.ca/~frodo/jasper/software/jasper-$Jasper_Version.zip
	wget -c https://github.com/pmodels/mpich/releases/download/v$Mpich_Version/mpich-$Mpich_Version.tar.gz
	wget -c https://parallel-netcdf.github.io/Release/pnetcdf-$Pnetcdf_Version.tar.gz
	wget -c https://sourceforge.net/projects/opengrads/files/grads2/2.2.1.oga.1/Linux%20%2864%20Bits%29/opengrads-2.2.1.oga.1-bundle-x86_64-pc-linux-gnu-glibc_2.17.tar.gz

	echo " "
	#############################Compilers############################
	export CC=gcc
	export CXX=g++
	export FC=gfortran
	export F77=gfortran
	export CFLAGS="-fPIC -fPIE -O3"

	#IF statement for GNU compiler issue
	export GCC_VERSION=$(/usr/bin/gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(/usr/bin/gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(/usr/bin/g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		export fallow_argument=-fallow-argument-mismatch
		export boz_argument=-fallow-invalid-boz
	else
		export fallow_argument=
		export boz_argument=
	fi

	export FFLAGS="$fallow_argument -m64"
	export FCFLAGS="$fallow_argument -m64"

	echo "##########################################"
	echo "FFLAGS = $FFLAGS"
	echo "FCFLAGS = $FCFLAGS"
	echo "CFLAGS = $CFLAGS"
	echo "##########################################"

	echo " "
	#############################zlib############################
	#Uncalling compilers due to comfigure issue with zlib$Zlib_Version
	#With CC & CXX definied ./configure uses different compiler Flags

	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf v$Zlib_Version.tar.gz
	cd zlib-$Zlib_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log
	./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "
	##############################MPICH############################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf mpich-$Mpich_Version.tar.gz
	cd mpich-$Mpich_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	F90= ./configure --prefix=$DIR/MPICH --with-device=ch3 FFLAGS="$fallow_argument -m64" FCFLAGS="$fallow_argument -m64" 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PATH=$DIR/MPICH/bin:$PATH
	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx

	echo " "
	#############################libpng############################
	cd $WRFHYDRO_FOLDER/Downloads
	export LDFLAGS=-L$DIR/grib2/lib
	export CPPFLAGS=-I$DIR/grib2/include
	tar -xvzf libpng-$Libpng_Version.tar.gz
	cd libpng-$Libpng_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check
	echo " "
	#############################JasPer############################
	cd $WRFHYDRO_FOLDER/Downloads
	unzip jasper-$Jasper_Version.zip
	cd jasper-$Jasper_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export JASPERLIB=$DIR/grib2/lib
	export JASPERINC=$DIR/grib2/include

	echo " "
	#############################hdf5 library for netcdf4 functionality############################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf hdf5-$HDF5_Version.tar.gz
	cd hdf5-hdf5-$HDF5_Version
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 --with-zlib=$DIR/grib2 --enable-hl --enable-fortran --enable-parallel 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export HDF5=$DIR/grib2
	export PHDF5=$DIR/grib2
	export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH

	#############################Install Parallel-netCDF##############################
	#Make file created with half of available cpu cores
	#Hard path for MPI added
	##################################################################################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf pnetcdf-$Pnetcdf_Version.tar.gz
	cd pnetcdf-$Pnetcdf_Version

	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx
	autoreconf -i -f 2>&1 | tee autoreconf.log
	./configure --prefix=$DIR/grib2 --enable-shared --enable-static 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PNETCDF=$DIR/grib2

	echo " "

	##############################Install NETCDF C Library############################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xzvf v$Netcdf_C_Version.tar.gz
	cd netcdf-c-$Netcdf_C_Version/
	export CPPFLAGS=-I$DIR/grib2/include
	export LDFLAGS=-L$DIR/grib2/lib
	export LIBS="-lhdf5_hl -lhdf5 -lz -lcurl -lgfortran -lgcc -lm -ldl -lpnetcdf"
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --disable-dap --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-pnetcdf --enable-cdf5 --enable-parallel-tests 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PATH=$DIR/NETCDF/bin:$PATH
	export NETCDF=$DIR/NETCDF
	echo " "
	##############################NetCDF fortran library############################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf v$Netcdf_Fortran_Version.tar.gz
	cd netcdf-fortran-$Netcdf_Fortran_Version/
	export LD_LIBRARY_PATH=$DIR/NETCDF/lib:$LD_LIBRARY_PATH
	export CPPFLAGS="-I$DIR/NETCDF/include -I$DIR/grib2/include"
	export LDFLAGS="-L$DIR/NETCDF/lib -L$DIR/grib2/lib"
	export LIBS="-lnetcdf -lpnetcdf -lcurl -lhdf5_hl -lhdf5 -lz -lm -ldl -lgcc -lgfortran"
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-parallel-tests --enable-hdf5 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "


	#################################### System Environment Tests ##############
	mkdir -p $WRFHYDRO_FOLDER/Tests/Environment
	mkdir -p $WRFHYDRO_FOLDER/Tests/Compatibility

	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_NETCDF_MPI_tests.tar
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_tests.tar

	tar -xvf Fortran_C_tests.tar -C $WRFHYDRO_FOLDER/Tests/Environment
	tar -xvf Fortran_C_NETCDF_MPI_tests.tar -C $WRFHYDRO_FOLDER/Tests/Compatibility
	export one="1"
	echo " "
	############## Testing Environment #####

	cd $WRFHYDRO_FOLDER/Tests/Environment

	echo " "
	echo " "
	echo "Environment Testing "
	echo "Test 1"
	$FC TEST_1_fortran_only_fixed.f
	./a.out | tee env_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 1 Passed"
	else
		echo "Environment Compiler Test 1 Failed"
		exit
	fi
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 2"
	$FC TEST_2_fortran_only_free.f90
	./a.out | tee env_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 2 Passed"
	else
		echo "Environment Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 3"
	$CC TEST_3_c_only.c
	./a.out | tee env_test3.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test3.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 3 Passed"
	else
		echo "Environment Compiler Test 3 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 4"
	$CC -c -m64 TEST_4_fortran+c_c.c
	$FC -c -m64 TEST_4_fortran+c_f.f90
	$FC -m64 TEST_4_fortran+c_f.o TEST_4_fortran+c_c.o
	./a.out | tee env_test4.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test4.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 4 Passed"
	else
		echo "Environment Compiler Test 4 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	############## Testing Environment #####

	cd $WRFHYDRO_FOLDER/Tests/Compatibility

	cp ${NETCDF}/include/netcdf.inc .

	echo " "
	echo " "
	echo "Library Compatibility Tests "
	echo "Test 1"
	$FC -c 01_fortran+c+netcdf_f.f
	$CC -c 01_fortran+c+netcdf_c.c
	$FC 01_fortran+c+netcdf_f.o 01_fortran+c+netcdf_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	./a.out | tee comp_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 1 Passed"
	else
		echo "Compatibility Compiler Test 1 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "

	echo "Test 2"
	$MPIFC -c 02_fortran+c+netcdf+mpi_f.f
	$MPICC -c 02_fortran+c+netcdf+mpi_c.c
	$MPIFC 02_fortran+c+netcdf+mpi_f.o \
		02_fortran+c+netcdf+mpi_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	$DIR/MPICH/bin/mpirun ./a.out | tee comp_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 2 Passed"
	else
		echo "Compatibility Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."
	echo " "

	echo " All tests completed and passed"
	echo " "

	############################# WRF HYDRO V5.2.0 #################################
	# Version 5.2.0
	# Standalone mode
	# GNU
	################################################################################

	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://github.com/NCAR/wrf_hydro_nwm_public/archive/refs/tags/v5.2.0.tar.gz -O WRFHYDRO.5.2.tar.gz
	tar -xvzf WRFHYDRO.5.2.tar.gz -C $WRFHYDRO_FOLDER/

	#Modifying WRF-HYDRO Environment
	#Echo commands use due to lack of knowledge
	cd $WRFHYDRO_FOLDER/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS/template

	sed -i 's/SPATIAL_SOIL=0/SPATIAL_SOIL=1/g' setEnvar.sh
	echo " " >>setEnvar.sh
	echo "# Large netcdf file support: 0=Off, 1=On." >>setEnvar.sh
	echo "export WRFIO_NCD_LARGE_FILE_SUPPORT=1" >>setEnvar.sh
	ln setEnvar.sh $WRFHYDRO_FOLDER/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS

	#Configure & Compile WRF HYDRO in Standalone Mode
	#Compile WRF-Hydro offline with the NoahMP
	cd $WRFHYDRO_FOLDER/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS
	source setEnvar.sh
	echo 2 | ./configure 2>&1 | tee configure.log # Gfortran
	./compile_offline_NoahMP.sh setEnvar.sh 2>&1 | tee compile_offline_NoahMP.log

	ls -lah Run/*.exe #Test to see if .exe files have compiled

	echo " "
	######################### Testing WRF HYDRO Compliation #########################
	cd $WRFHYDRO_FOLDER/
	mkdir -p $WRFHYDRO_FOLDER/domain/NWM

	#Copy the *.TBL files to the NWM directory.
	cp wrf_hydro_nwm_public*/trunk/NDHMS/Run/*.TBL domain/NWM
	#Copy the wrf_hydro.exe file to the NWM directory.
	cp wrf_hydro_nwm_public*/trunk/NDHMS/Run/wrf_hydro.exe domain/NWM

	#Download test case for WRF HYDRO and move to NWM
	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://github.com/NCAR/wrf_hydro_nwm_public/releases/download/v5.2.0/croton_NY_training_example_v5.2.tar.gz
	tar -xzvf croton_NY_training_example_v5.2.tar.gz

	cp -r example_case/FORCING $WRFHYDRO_FOLDER/domain/NWM
	cp -r example_case/NWM/DOMAIN $WRFHYDRO_FOLDER/domain/NWM
	cp -r example_case/NWM/RESTART $WRFHYDRO_FOLDER/domain/NWM
	cp -r example_case/NWM/nudgingTimeSliceObs $WRFHYDRO_FOLDER/domain/NWM
	cp -r example_case/NWM/referenceSim $WRFHYDRO_FOLDER/domain/NWM
	cp example_case/NWM/namelist.hrldas $WRFHYDRO_FOLDER/domain/NWM
	cp example_case/NWM/hydro.namelist $WRFHYDRO_FOLDER/domain/NWM

	#Run Croton NY Test Case
	cd $WRFHYDRO_FOLDER/domain/NWM
	./wrf_hydro.exe
	ls -lah HYDRO_RST*
	echo "IF HYDRO_RST files exist and have data then wrf_hydro.exe sucessful"
	echo " "

	########################### Test script for output data  ###################################

	#Installing Miniconda3 to WRF directory and updating libraries
	pip install --upgrade --force-reinstall zstandard
	pip install --upgrade --force-reinstall zstd
	pip3 install --upgrade --force-reinstall zstandard
	pip3 install --upgrade --force-reinstall zstd
	export Miniconda_Install_DIR=$WRFHYDRO_FOLDER/miniconda3

	mkdir -p $Miniconda_Install_DIR

	if [ "$Ubuntu_32bit_GNU" = "1" ]; then
		wget -c https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86.sh -O $Miniconda_Install_DIR/miniconda.sh
	else
		wget -c https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $Miniconda_Install_DIR/miniconda.sh
	fi

	bash $Miniconda_Install_DIR/miniconda.sh -b -u -p $Miniconda_Install_DIR

	rm -rf $Miniconda_Install_DIR/miniconda.sh

	export PATH=$WRFHYDRO_FOLDER/miniconda3/bin:$PATH

	source $Miniconda_Install_DIR/etc/profile.d/conda.sh

	$Miniconda_Install_DIR/bin/conda init bash
	$Miniconda_Install_DIR/bin/conda init zsh
	$Miniconda_Install_DIR/bin/conda init tcsh
	$Miniconda_Install_DIR/bin/conda init xonsh
	$Miniconda_Install_DIR/bin/conda init powershell

	conda config --add channels conda-forge
	conda config --set auto_activate_base false
	conda update -n root --all -y

	##################### WRF Python           ##################
	########### WRf-Python compiled via Conda  ##################
	########### This is the preferred method by NCAR      ##################
	##### https://wrf-python.readthedocs.io/en/latest/installation.html  ##################
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
conda env create -f $HOME/WRF-MOSIT/wrf-python-stable.yml

	######################### Climate Data Operators ############
	######################### CDO compiled via Conda ###########
	####################### This is the preferred method #######
	################### https://bairdlangenbrunner.github.io/python-for-climate-scientists/conda/setting-up-conda-environments.html #######################

	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda init bash
	conda activate base
	conda create --name cdo_stable -y
	source activate cdo_stable
	conda install -c conda-forge cdo -y
	conda update --all -y
	conda deactivate
	conda deactivate
	conda deactivate

	echo " "

	################################## QGIS #####################################
	#QGIS (Quantum Geographic Information System) is a free and open-source platform that allows users to
	#analyze, view, and edit geospatial data. It supports both vector and raster layers, as well as various #web services, and is extensible through community-developed plugins. Key features include map
	#creation, spatial analysis, and data management.
	#############################################################################

	conda env create -f $HOME/WRF-MOSIT/qgis.3.28.8.yml

	echo " "

	################ NEEDS TO BE IN Master folder #######################
	cp $HOME/WRF-MOSIT/SurfaceRunoff.py $WRFHYDRO_FOLDER/domain/NWM

	cd $WRFHYDRO_FOLDER/domain/NWM

	python3 SurfaceRunoff.py

	okular SurfaceRunoff.pdf

	echo " "
	#####################################BASH Script Finished##############################
	echo "WRF HYDRO Standalone sucessfully configured and compiled"
	read -r -t 5 -p "Congratulations! You've successfully installed all required files to run the Weather Research Forecast Model HYDRO verison 5.2."

	##########################  Export PATH and LD_LIBRARY_PATH ################################
	cd $HOME

fi

if [ "$macos_64bit_GNU" = "1" ] && [ "$WRFHYDRO_STANDALONE_PICK" = "1" ] && [ "$MAC_CHIP" = "Intel" ]; then

	## WRF installation with parallel process.
	# Download and install required library and data files for WRF.
	# Tested in macOS Ventura 13.4.1
	# Tested in 64-bit
	# Tested with current available libraries on 01/01/2023
	# If newer libraries exist edit script paths for changes
	#Estimated Run Time ~ 90 - 150 Minutes with 10mb/s downloadspeed.
	#Special thanks to  Youtube's meteoadriatic and GitHub user jamal919.

	#############################basic package managment############################

sleep 1
brew install autoconf
sleep 1
brew install bison
sleep 1
brew install byacc
sleep 1
brew install cmake
sleep 1
brew install curl
sleep 1
brew install flex
sleep 1
brew install gdal
sleep 1
brew install gedit
sleep 1
brew install git
sleep 1
brew install gnu-sed
sleep 1
brew install imagemagick
sleep 1
brew install java
sleep 1
brew install ksh
sleep 1
brew install libtool
sleep 1
brew install m4
sleep 1
brew install make
sleep 1
brew install python@3.10
sleep 1
brew install tcsh
sleep 1
brew install wget
sleep 1
brew install xauth
sleep 1
brew install xorgproto
sleep 1
brew install xorgrgb
sleep 1
brew install xquartz

export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
export PATH=/usr/local/bin:$PATH
	##############################Directory Listing############################

	export HOME=$(
		cd
		pwd
	)

	mkdir $HOME/WRFHYDRO
	export WRFHYDRO_FOLDER=$HOME/WRFHYDRO_STANDALONE
	cd $WRFHYDRO_FOLDER/
	mkdir Downloads
	mkdir Libs
	export DIR=$WRFHYDRO_FOLDER/Libs
	mkdir Libs/grib2
	mkdir Libs/NETCDF

	echo " "
	#############################Core Management####################################
	export CPU_CORE=$(sysctl -n hw.ncpu) # number of available threads on system
	export CPU_6CORE="6"
	export CPU_HALF=$(($CPU_CORE / 2))
	#1/2 of availble cores on system
	export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))
	#Forces CPU cores to even number to avoid partial core export. ie 7 cores would be 3.5 cores.

	if [ $CPU_CORE -le $CPU_6CORE ]; then #If statement for low core systems.  Forces computers to only use 1 core if there are 4 cores or less on the system.
		export CPU_HALF_EVEN="2"
	else
		export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))
	fi

	echo "##########################################"
	echo "Number of Threads being used $CPU_HALF_EVEN"
	echo "##########################################"
	echo " "

	##############################Downloading Libraries############################

	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://github.com/madler/zlib/archive/refs/tags/v$Zlib_Version.tar.gz
	wget -c https://github.com/HDFGroup/hdf5/archive/refs/tags/hdf5-$HDF5_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-c/archive/refs/tags/v$Netcdf_C_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-fortran/archive/refs/tags/v$Netcdf_Fortran_Version.tar.gz
	wget -c https://download.sourceforge.net/libpng/libpng-$Libpng_Version.tar.gz
	wget -c https://www.ece.uvic.ca/~frodo/jasper/software/jasper-$Jasper_Version.zip
	wget -c https://github.com/pmodels/mpich/releases/download/v$Mpich_Version/mpich-$Mpich_Version.tar.gz
	wget -c https://parallel-netcdf.github.io/Release/pnetcdf-$Pnetcdf_Version.tar.gz


	echo " "

	#############################Compilers############################

	#Symlink to avoid clang conflicts with compilers
	#default gcc path /usr/bin/gcc
	#default homebrew path /usr/local/bin

	echo $PASSWD | sudo -S ln -sf /usr/local/bin/gcc-12 /usr/local/bin/gcc
	echo $PASSWD | sudo -S ln -sf /usr/local/bin/g-12 /usr/local/bin/g++
	echo $PASSWD | sudo -S ln -sf /usr/local/bin/gfortran-12 /usr/local/bin/gfortran
	echo $PASSWD | sudo -S ln -sf /usr/local/bin/python3.10 /usr/local/bin/python3

	export CC=gcc
	export CXX=g++
	export FC=gfortran
	export F77=gfortran
	export CFLAGS="-fPIC -fPIE -Wno-implicit-function-declaration -Wall"

	echo " "

	#IF statement for GNU compiler issue
	export GCC_VERSION=$(gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		export fallow_argument=-fallow-argument-mismatch
		export boz_argument=-fallow-invalid-boz
	else
		export fallow_argument=
		export boz_argument=
	fi

	export FFLAGS="$fallow_argument -m64"
	export FCFLAGS="$fallow_argument -m64"

	echo "##########################################"
	echo "FFLAGS = $FFLAGS"
	echo "FCFLAGS = $FCFLAGS"
	echo "CFLAGS = $CFLAGS"
	echo "##########################################"

	echo " "

	#############################zlib############################
	#Uncalling compilers due to comfigure issue with zlib1.2.12
	#With CC & CXX definied ./configure uses different compiler Flags

	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf v$Zlib_Version.tar.gz
	cd zlib-$Zlib_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log
	./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "

	##############################MPICH############################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf mpich-$Mpich_Version.tar.gz
	cd mpich-$Mpich_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	F90= ./configure --prefix=$DIR/MPICH --with-device=ch3 FFLAGS="$fallow_argument -m64" FCFLAGS="$fallow_argument -m64" 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PATH=$DIR/MPICH/bin:$PATH

	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx

	echo " "

	#############################libpng############################
	cd $WRFHYDRO_FOLDER/Downloads
	export LDFLAGS=-L$DIR/grib2/lib
	export CPPFLAGS=-I$DIR/grib2/include
	tar -xvzf libpng-$Libpng_Version.tar.gz
	cd libpng-$Libpng_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check
	#make check

	echo " "
	#############################JasPer############################

	cd $WRFHYDRO_FOLDER/Downloads
	unzip jasper-$Jasper_Version.zip
	cd jasper-$Jasper_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	export JASPERLIB=$DIR/grib2/lib
	export JASPERINC=$DIR/grib2/include

	echo " "
	#############################hdf5 library for netcdf4 functionality############################

	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf hdf5-$HDF5_Version.tar.gz
	cd hdf5-hdf5-$HDF5_Version
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 --with-zlib=$DIR/grib2 --enable-hl --enable-fortran --enable-parallel 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export HDF5=$DIR/grib2
	export PHDF5=$DIR/grib2
	export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH

	echo " "

	#############################Install Parallel-netCDF##############################
	#Make file created with half of available cpu cores
	#Hard path for MPI added
	##################################################################################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf pnetcdf-$Pnetcdf_Version.tar.gz
	cd pnetcdf-$Pnetcdf_Version
	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx
	autoreconf -i -f 2>&1 | tee autoreconf.log
	./configure --prefix=$DIR/grib2 --enable-shared --enable-static 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PNETCDF=$DIR/grib2

	echo " "

	##############################Install NETCDF C Library############################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xzvf v$Netcdf_C_Version.tar.gz
	cd netcdf-c-$Netcdf_C_Version/
	export CPPFLAGS=-I$DIR/grib2/include
	export LDFLAGS=-L$DIR/grib2/lib
	export LIBS="-lhdf5_hl -lhdf5 -lz -lcurl -lgfortran -lgcc -lm -ldl -lpnetcdf"
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --disable-dap --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-pnetcdf --enable-cdf5 --enable-parallel-tests 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PATH=$DIR/NETCDF/bin:$PATH
	export NETCDF=$DIR/NETCDF
	echo " "

	##############################NetCDF fortran library############################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf v$Netcdf_Fortran_Version.tar.gz
	cd netcdf-fortran-$Netcdf_Fortran_Version/
	export LD_LIBRARY_PATH=$DIR/NETCDF/lib:$LD_LIBRARY_PATH
	export CPPFLAGS="-I$DIR/NETCDF/include -I$DIR/grib2/include"
	export LDFLAGS="-L$DIR/NETCDF/lib -L$DIR/grib2/lib"
	export LIBS="-lnetcdf -lpnetcdf -lcurl -lhdf5_hl -lhdf5 -lz -lm -ldl -lgcc -lgfortran"
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-parallel-tests --enable-hdf5 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "

	#################################### System Environment Tests ##############
	mkdir -p $WRFHYDRO_FOLDER/Tests/Environment
	mkdir -p $WRFHYDRO_FOLDER/Tests/Compatibility

	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_NETCDF_MPI_tests.tar
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_tests.tar

	tar -xvf Fortran_C_tests.tar -C $WRFHYDRO_FOLDER/Tests/Environment
	tar -xvf Fortran_C_NETCDF_MPI_tests.tar -C $WRFHYDRO_FOLDER/Tests/Compatibility
	export one="1"
	echo " "
	############## Testing Environment #####

	cd $WRFHYDRO_FOLDER/Tests/Environment

	echo " "
	echo " "
	echo "Environment Testing "
	echo "Test 1"
	$FC TEST_1_fortran_only_fixed.f
	./a.out | tee env_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 1 Passed"
	else
		echo "Environment Compiler Test 1 Failed"
		exit
	fi
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 2"
	$FC TEST_2_fortran_only_free.f90
	./a.out | tee env_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 2 Passed"
	else
		echo "Environment Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 3"
	$CC TEST_3_c_only.c
	./a.out | tee env_test3.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test3.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 3 Passed"
	else
		echo "Environment Compiler Test 3 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 4"
	$CC -c -m64 TEST_4_fortran+c_c.c
	$FC -c -m64 TEST_4_fortran+c_f.f90
	$FC -m64 TEST_4_fortran+c_f.o TEST_4_fortran+c_c.o
	./a.out | tee env_test4.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test4.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 4 Passed"
	else
		echo "Environment Compiler Test 4 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	############## Testing Environment #####

	cd $WRFHYDRO_FOLDER/Tests/Compatibility

	cp ${NETCDF}/include/netcdf.inc .

	echo " "
	echo " "
	echo "Library Compatibility Tests "
	echo "Test 1"
	$FC -c 01_fortran+c+netcdf_f.f
	$CC -c 01_fortran+c+netcdf_c.c
	$FC 01_fortran+c+netcdf_f.o 01_fortran+c+netcdf_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	./a.out | tee comp_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 1 Passed"
	else
		echo "Compatibility Compiler Test 1 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "

	echo "Test 2"
	$MPIFC -c 02_fortran+c+netcdf+mpi_f.f
	$MPICC -c 02_fortran+c+netcdf+mpi_c.c
	$MPIFC 02_fortran+c+netcdf+mpi_f.o \
		02_fortran+c+netcdf+mpi_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	$DIR/MPICH/bin/mpirun ./a.out | tee comp_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 2 Passed"
	else
		echo "Compatibility Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."
	echo " "

	echo " All tests completed and passed"
	echo " "

	echo " "
	############################# WRF HYDRO V5.2.0 #################################
	# Version 5.2.0
	# Standalone mode
	################################################################################

	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://github.com/NCAR/wrf_hydro_nwm_public/archive/refs/tags/v5.2.0.tar.gz -O WRFHYDRO.5.2.tar.gz
	tar -xvzf WRFHYDRO.5.2.tar.gz -C $WRFHYDRO_FOLDER/

	#Modifying WRF-HYDRO Environment
	#Echo commands use due to lack of knowledge
	cd $WRFHYDRO_FOLDER/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS/template

	sed -i 's/SPATIAL_SOIL=0/SPATIAL_SOIL=1/g' setEnvar.sh
	echo " " >>setEnvar.sh
	echo "# Large netcdf file support: 0=Off, 1=On." >>setEnvar.sh
	echo "export WRFIO_NCD_LARGE_FILE_SUPPORT=1" >>setEnvar.sh
	ln setEnvar.sh $WRFHYDRO_FOLDER/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS

	#Configure & Compile WRF HYDRO in Standalone Mode
	#Compile WRF-Hydro offline with the NoahMP
	cd $WRFHYDRO_FOLDER/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS

	echo 2 | ./configure 2>&1 | tee configure.log # Option 2
	./compile_offline_NoahMP.sh setEnvar.sh 2>&1 | tee compile_offline_NoahMP.log

	ls -lah RUN/*.exe #Test to see if .exe files have compiled

	echo " "
	######################### Testing WRF HYDRO Compliation #########################
	cd $WRFHYDRO_FOLDER/
	mkdir -p $WRFHYDRO_FOLDER/domain/NWM

	#Copy the *.TBL files to the NWM directory.
	cp wrf_hydro_nwm_public*/trunk/NDHMS/Run/*.TBL domain/NWM
	#Copy the wrf_hydro.exe file to the NWM directory.
	cp wrf_hydro_nwm_public*/trunk/NDHMS/Run/wrf_hydro.exe domain/NWM

	#Download test case for WRF HYDRO and move to NWM
	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://github.com/NCAR/wrf_hydro_nwm_public/releases/download/v5.2.0/croton_NY_training_example_v5.2.tar.gz
	tar -xzvf croton_NY_training_example_v5.2.tar.gz

	cp -r example_case/FORCING $WRFHYDRO_FOLDER/domain/NWM
	cp -r example_case/NWM/DOMAIN $WRFHYDRO_FOLDER/domain/NWM
	cp -r example_case/NWM/RESTART $WRFHYDRO_FOLDER/domain/NWM
	cp -r example_case/NWM/nudgingTimeSliceObs $WRFHYDRO_FOLDER/domain/NWM
	cp -r example_case/NWM/referenceSim $WRFHYDRO_FOLDER/domain/NWM
	cp example_case/NWM/namelist.hrldas $WRFHYDRO_FOLDER/domain/NWM
	cp example_case/NWM/hydro.namelist $WRFHYDRO_FOLDER/domain/NWM

	#Run Croton NY Test Case
	cd $WRFHYDRO_FOLDER/domain/NWM
	mpirun -np 6 ./wrf_hydro.exe
	ls -lah HYDRO_RST*
	echo "IF HYDRO_RST files exist and have data then wrf_hydro.exe sucessful"
	echo " "

	echo " "
	########################### Test script for output data  ###################################

	#Installing Miniconda3 to WRF directory and updating libraries
	pip install --upgrade --force-reinstall zstandard
	pip install --upgrade --force-reinstall zstd
	pip3 install --upgrade --force-reinstall zstandard
	pip3 install --upgrade --force-reinstall zstd
	export Miniconda_Install_DIR=$WRFHYDRO_FOLDER/miniconda3

	mkdir -p $Miniconda_Install_DIR

	wget -c https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O $Miniconda_Install_DIR/miniconda.sh
	bash $Miniconda_Install_DIR/miniconda.sh -b -u -p $Miniconda_Install_DIR

	rm -rf $Miniconda_Install_DIR/miniconda.sh

	export PATH=$WRFHYDRO_FOLDER/miniconda3/bin:$PATH

	source $Miniconda_Install_DIR/etc/profile.d/conda.sh

	$Miniconda_Install_DIR/bin/conda init bash
	$Miniconda_Install_DIR/bin/conda init zsh
	$Miniconda_Install_DIR/bin/conda init tcsh
	$Miniconda_Install_DIR/bin/conda init xonsh
	$Miniconda_Install_DIR/bin/conda init powershell

	conda config --add channels conda-forge
	conda config --set auto_activate_base false
	conda update -n root --all -y

	##################### WRF Python           ##################
	########### WRf-Python compiled via Conda  ##################
	########### This is the preferred method by NCAR      ##################
	##### https://wrf-python.readthedocs.io/en/latest/installation.html  ##################
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
conda env create -f $HOME/WRF-MOSIT/wrf-python-stable.yml
	echo " "

	cp $HOME/WRF-MOSIT/SurfaceRunoff.py $WRFHYDRO_FOLDER/domain/NWM

	cd $WRFHYDRO_FOLDER/domain/NWM

	python3 SurfaceRunoff.py

	open SurfaceRunoff.pdf

	echo " "
	echo "WRF HYDRO Standalone sucessfully configured and compiled"
	echo "Congratulations! You've successfully installed all required files to run the Weather Research Forecast Model HYDRO verison 5.2."
	echo "Thank you for using this script"

fi

if [ "$macos_64bit_GNU" = "1" ] && [ "$WRFHYDRO_STANDALONE_PICK" = "1" ] && [ "$MAC_CHIP" = "ARM" ]; then

	## WRF installation with parallel process.
	# Download and install required library and data files for WRF.
	# Tested in macOS Ventura 13.4.1
	# Tested in 64-bit
	# Tested with current available libraries on 01/01/2023
	# If newer libraries exist edit script paths for changes
	#Estimated Run Time ~ 90 - 150 Minutes with 10mb/s downloadspeed.
	#Special thanks to  Youtube's meteoadriatic and GitHub user jamal919.

	#############################basic package managment############################
sleep 1
brew install autoconf
sleep 1
brew install bison
sleep 1
brew install byacc
sleep 1
brew install cmake
sleep 1
brew install curl
sleep 1
brew install flex
sleep 1
brew install gdal
sleep 1
brew install gedit
sleep 1
brew install git
sleep 1
brew install gnu-sed
sleep 1
brew install imagemagick
sleep 1
brew install java
sleep 1
brew install ksh
sleep 1
brew install libtool
sleep 1
brew install m4
sleep 1
brew install make
sleep 1
brew install python@3.10
sleep 1
brew install tcsh
sleep 1
brew install wget
sleep 1
brew install xauth
sleep 1
brew install xorgproto
sleep 1
brew install xorgrgb
sleep 1
brew install xquartz



export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
export PATH=/usr/local/bin:$PATH

	##############################Directory Listing############################

	export HOME=$(
		cd
		pwd
	)

	mkdir $HOME/WRFHYDRO
	export WRFHYDRO_FOLDER=$HOME/WRFHYDRO_STANDALONE
	cd $WRFHYDRO_FOLDER/
	mkdir Downloads
	mkdir Libs
	export DIR=$WRFHYDRO_FOLDER/Libs
	mkdir Libs/grib2
	mkdir Libs/NETCDF

	echo " "
	#############################Core Management####################################
	export CPU_CORE=$(sysctl -n hw.ncpu) # number of available threads on system
	export CPU_6CORE="6"
	export CPU_HALF=$(($CPU_CORE / 2))
	#1/2 of availble cores on system
	export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))
	#Forces CPU cores to even number to avoid partial core export. ie 7 cores would be 3.5 cores.

	if [ $CPU_CORE -le $CPU_6CORE ]; then #If statement for low core systems.  Forces computers to only use 1 core if there are 4 cores or less on the system.
		export CPU_HALF_EVEN="2"
	else
		export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))
	fi

	echo "##########################################"
	echo "Number of Threads being used $CPU_HALF_EVEN"
	echo "##########################################"
	echo " "

	##############################Downloading Libraries############################

	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://github.com/madler/zlib/archive/refs/tags/v$Zlib_Version.tar.gz
	wget -c https://github.com/HDFGroup/hdf5/archive/refs/tags/hdf5-$HDF5_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-c/archive/refs/tags/v$Netcdf_C_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-fortran/archive/refs/tags/v$Netcdf_Fortran_Version.tar.gz
	wget -c https://download.sourceforge.net/libpng/libpng-$Libpng_Version.tar.gz
	wget -c https://www.ece.uvic.ca/~frodo/jasper/software/jasper-$Jasper_Version.zip
	wget -c https://github.com/pmodels/mpich/releases/download/v$Mpich_Version/mpich-$Mpich_Version.tar.gz
	wget -c https://parallel-netcdf.github.io/Release/pnetcdf-$Pnetcdf_Version.tar.gz

	echo " "

	#############################Compilers############################

	#Symlink to avoid clang conflicts with compilers
	#default gcc path /usr/bin/gcc
	#default homebrew path /usr/local/bin
	echo $PASSWD | sudo -S unlink /opt/homebrew/bin/gfortran
	echo $PASSWD | sudo -S unlink /opt/homebrew/bin/gcc
	echo $PASSWD | sudo -S unlink /opt/homebrew/bin/g++

	source ~./bashrc
	gcc --version
	g++ --version
	gfortran --version

	cd /opt/homebrew/bin

	echo $PASSWD | sudo -S ln -sf gcc-12 gcc
	echo $PASSWD | sudo -S ln -sf g++-12 g++
	echo $PASSWD | sudo -S ln -sf gfortran-12 gfortran

	cd
	source ~/.bashrc
	source ~/.bash_profile
	gcc --version
	g++ --version
	gfortran --version

	export CC=gcc
	export CXX=g++
	export FC=gfortran
	export F77=gfortran
	export CFLAGS="-fPIC -fPIE -Wno-implicit-function-declaration -Wall"

	echo " "

	#IF statement for GNU compiler issue
	export GCC_VERSION=$(gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		export fallow_argument=-fallow-argument-mismatch
		export boz_argument=-fallow-invalid-boz
	else
		export fallow_argument=
		export boz_argument=
	fi

	export FFLAGS="$fallow_argument -m64"
	export FCFLAGS="$fallow_argument -m64"

	echo "##########################################"
	echo "FFLAGS = $FFLAGS"
	echo "FCFLAGS = $FCFLAGS"
	echo "CFLAGS = $CFLAGS"
	echo "##########################################"

	echo " "

	#############################zlib############################
	#Uncalling compilers due to comfigure issue with zlib1.2.12
	#With CC & CXX definied ./configure uses different compiler Flags

	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf v$Zlib_Version.tar.gz
	cd zlib-$Zlib_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log
	./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "

	##############################MPICH############################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf mpich-$Mpich_Version.tar.gz
	cd mpich-$Mpich_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	F90= ./configure --prefix=$DIR/MPICH --with-device=ch3 FFLAGS="$fallow_argument -m64" FCFLAGS="$fallow_argument -m64" 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PATH=$DIR/MPICH/bin:$PATH

	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx

	echo " "

	#############################libpng############################
	cd $WRFHYDRO_FOLDER/Downloads
	export LDFLAGS=-L$DIR/grib2/lib
	export CPPFLAGS=-I$DIR/grib2/include
	tar -xvzf libpng-$Libpng_Version.tar.gz
	cd libpng-$Libpng_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check
	#make check

	echo " "
	#############################JasPer############################

	cd $WRFHYDRO_FOLDER/Downloads
	unzip jasper-$Jasper_Version.zip
	cd jasper-$Jasper_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	export JASPERLIB=$DIR/grib2/lib
	export JASPERINC=$DIR/grib2/include

	echo " "
	#############################hdf5 library for netcdf4 functionality############################

	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf hdf5-$HDF5_Version.tar.gz
	cd hdf5-hdf5-$HDF5_Version
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 --with-zlib=$DIR/grib2 --enable-hl --enable-fortran --enable-parallel 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export HDF5=$DIR/grib2
	export PHDF5=$DIR/grib2
	export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH

	echo " "

	#############################Install Parallel-netCDF##############################
	#Make file created with half of available cpu cores
	#Hard path for MPI added
	##################################################################################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf pnetcdf-$Pnetcdf_Version.tar.gz
	cd pnetcdf-$Pnetcdf_Version
	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx
	autoreconf -i -f 2>&1 | tee autoreconf.log
	./configure --prefix=$DIR/grib2 --enable-shared --enable-static 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PNETCDF=$DIR/grib2

	echo " "

	##############################Install NETCDF C Library############################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xzvf v$Netcdf_C_Version.tar.gz
	cd netcdf-c-$Netcdf_C_Version/
	export CPPFLAGS=-I$DIR/grib2/include
	export LDFLAGS=-L$DIR/grib2/lib
	export LIBS="-lhdf5_hl -lhdf5 -lz -lcurl -lgfortran -lgcc -lm -ldl -lpnetcdf"
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --disable-dap --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-pnetcdf --enable-cdf5 --enable-parallel-tests 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PATH=$DIR/NETCDF/bin:$PATH
	export NETCDF=$DIR/NETCDF
	echo " "

	##############################NetCDF fortran library############################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf v$Netcdf_Fortran_Version.tar.gz
	cd netcdf-fortran-$Netcdf_Fortran_Version/
	export LD_LIBRARY_PATH=$DIR/NETCDF/lib:$LD_LIBRARY_PATH
	export CPPFLAGS="-I$DIR/NETCDF/include -I$DIR/grib2/include"
	export LDFLAGS="-L$DIR/NETCDF/lib -L$DIR/grib2/lib"
	export LIBS="-lnetcdf -lpnetcdf -lcurl -lhdf5_hl -lhdf5 -lz -lm -ldl -lgcc -lgfortran"
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-parallel-tests --enable-hdf5 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "

	#################################### System Environment Tests ##############
	mkdir -p $WRFHYDRO_FOLDER/Tests/Environment
	mkdir -p $WRFHYDRO_FOLDER/Tests/Compatibility

	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_NETCDF_MPI_tests.tar
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_tests.tar

	tar -xvf Fortran_C_tests.tar -C $WRFHYDRO_FOLDER/Tests/Environment
	tar -xvf Fortran_C_NETCDF_MPI_tests.tar -C $WRFHYDRO_FOLDER/Tests/Compatibility
	export one="1"
	echo " "
	############## Testing Environment #####

	cd $WRFHYDRO_FOLDER/Tests/Environment

	echo " "
	echo " "
	echo "Environment Testing "
	echo "Test 1"
	$FC TEST_1_fortran_only_fixed.f
	./a.out | tee env_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 1 Passed"
	else
		echo "Environment Compiler Test 1 Failed"
		exit
	fi
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 2"
	$FC TEST_2_fortran_only_free.f90
	./a.out | tee env_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 2 Passed"
	else
		echo "Environment Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 3"
	$CC TEST_3_c_only.c
	./a.out | tee env_test3.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test3.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 3 Passed"
	else
		echo "Environment Compiler Test 3 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 4"
	$CC -c -m64 TEST_4_fortran+c_c.c
	$FC -c -m64 TEST_4_fortran+c_f.f90
	$FC -m64 TEST_4_fortran+c_f.o TEST_4_fortran+c_c.o
	./a.out | tee env_test4.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test4.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 4 Passed"
	else
		echo "Environment Compiler Test 4 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	############## Testing Environment #####

	cd $WRFHYDRO_FOLDER/Tests/Compatibility

	cp ${NETCDF}/include/netcdf.inc .

	echo " "
	echo " "
	echo "Library Compatibility Tests "
	echo "Test 1"
	$FC -c 01_fortran+c+netcdf_f.f
	$CC -c 01_fortran+c+netcdf_c.c
	$FC 01_fortran+c+netcdf_f.o 01_fortran+c+netcdf_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	./a.out | tee comp_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 1 Passed"
	else
		echo "Compatibility Compiler Test 1 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "

	echo "Test 2"
	$MPIFC -c 02_fortran+c+netcdf+mpi_f.f
	$MPICC -c 02_fortran+c+netcdf+mpi_c.c
	$MPIFC 02_fortran+c+netcdf+mpi_f.o \
		02_fortran+c+netcdf+mpi_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	$DIR/MPICH/bin/mpirun ./a.out | tee comp_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 2 Passed"
	else
		echo "Compatibility Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."
	echo " "

	echo " All tests completed and passed"
	echo " "

	echo " "
	############################# WRF HYDRO V5.2.0 #################################
	# Version 5.2.0
	# Standalone mode
	################################################################################

	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://github.com/NCAR/wrf_hydro_nwm_public/archive/refs/tags/v5.2.0.tar.gz -O WRFHYDRO.5.2.tar.gz
	tar -xvzf WRFHYDRO.5.2.tar.gz -C $WRFHYDRO_FOLDER/

	#Modifying WRF-HYDRO Environment
	#Echo commands use due to lack of knowledge
	cd $WRFHYDRO_FOLDER/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS/template

	sed -i 's/SPATIAL_SOIL=0/SPATIAL_SOIL=1/g' setEnvar.sh
	echo " " >>setEnvar.sh
	echo "# Large netcdf file support: 0=Off, 1=On." >>setEnvar.sh
	echo "export WRFIO_NCD_LARGE_FILE_SUPPORT=1" >>setEnvar.sh
	ln setEnvar.sh $WRFHYDRO_FOLDER/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS

	#Configure & Compile WRF HYDRO in Standalone Mode
	#Compile WRF-Hydro offline with the NoahMP
	cd $WRFHYDRO_FOLDER/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS

	echo 2 | ./configure 2>&1 | tee configure.log # Option 2
	./compile_offline_NoahMP.sh setEnvar.sh 2>&1 | tee compile_offline_NoahMP.log

	ls -lah RUN/*.exe #Test to see if .exe files have compiled

	echo " "
	######################### Testing WRF HYDRO Compliation #########################
	cd $WRFHYDRO_FOLDER/
	mkdir -p $WRFHYDRO_FOLDER/domain/NWM

	#Copy the *.TBL files to the NWM directory.
	cp wrf_hydro_nwm_public*/trunk/NDHMS/Run/*.TBL domain/NWM
	#Copy the wrf_hydro.exe file to the NWM directory.
	cp wrf_hydro_nwm_public*/trunk/NDHMS/Run/wrf_hydro.exe domain/NWM

	#Download test case for WRF HYDRO and move to NWM
	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://github.com/NCAR/wrf_hydro_nwm_public/releases/download/v5.2.0/croton_NY_training_example_v5.2.tar.gz
	tar -xzvf croton_NY_training_example_v5.2.tar.gz

	cp -r example_case/FORCING $WRFHYDRO_FOLDER/domain/NWM
	cp -r example_case/NWM/DOMAIN $WRFHYDRO_FOLDER/domain/NWM
	cp -r example_case/NWM/RESTART $WRFHYDRO_FOLDER/domain/NWM
	cp -r example_case/NWM/nudgingTimeSliceObs $WRFHYDRO_FOLDER/domain/NWM
	cp -r example_case/NWM/referenceSim $WRFHYDRO_FOLDER/domain/NWM
	cp example_case/NWM/namelist.hrldas $WRFHYDRO_FOLDER/domain/NWM
	cp example_case/NWM/hydro.namelist $WRFHYDRO_FOLDER/domain/NWM

	#Run Croton NY Test Case
	cd $WRFHYDRO_FOLDER/domain/NWM
	mpirun -np 6 ./wrf_hydro.exe
	ls -lah HYDRO_RST*
	echo "IF HYDRO_RST files exist and have data then wrf_hydro.exe sucessful"
	echo " "

	echo " "
	########################### Test script for output data  ###################################

	#Installing Miniconda3 to WRF directory and updating libraries
	pip install --upgrade --force-reinstall zstandard
	pip install --upgrade --force-reinstall zstd
	pip3 install --upgrade --force-reinstall zstandard
	pip3 install --upgrade --force-reinstall zstd
	export Miniconda_Install_DIR=$WRFHYDRO_FOLDER/miniconda3

	mkdir -p $Miniconda_Install_DIR

	wget -c https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O $Miniconda_Install_DIR/miniconda.sh
	bash $Miniconda_Install_DIR/miniconda.sh -b -u -p $Miniconda_Install_DIR

	rm -rf $Miniconda_Install_DIR/miniconda.sh

	export PATH=$WRFHYDRO_FOLDER/miniconda3/bin:$PATH

	source $Miniconda_Install_DIR/etc/profile.d/conda.sh

	$Miniconda_Install_DIR/bin/conda init bash
	$Miniconda_Install_DIR/bin/conda init zsh
	$Miniconda_Install_DIR/bin/conda init tcsh
	$Miniconda_Install_DIR/bin/conda init xonsh
	$Miniconda_Install_DIR/bin/conda init powershell

	conda config --add channels conda-forge
	conda config --set auto_activate_base false
	conda update -n root --all -y

	##################### WRF Python           ##################
	########### WRf-Python compiled via Conda  ##################
	########### This is the preferred method by NCAR      ##################
	##### https://wrf-python.readthedocs.io/en/latest/installation.html  ##################
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
conda env create -f $HOME/WRF-MOSIT/wrf-python-stable.yml
	echo " "

	cp $HOME/WRF-MOSIT/SurfaceRunoff.py $WRFHYDRO_FOLDER/domain/NWM

	cd $WRFHYDRO_FOLDER/domain/NWM

	python3 SurfaceRunoff.py

	open SurfaceRunoff.pdf

	echo " "
	echo "WRF HYDRO Standalone sucessfully configured and compiled"
	echo "Congratulations! You've successfully installed all required files to run the Weather Research Forecast Model HYDRO verison 5.2."
	echo "Thank you for using this script"

fi

if [ "$Ubuntu_64bit_Intel" = "1" ] && [ "$WRFHYDRO_STANDALONE_PICK" = "1" ]; then

	############################# Basic package managment ############################

	echo $PASSWD | sudo -S apt -y update
	echo $PASSWD | sudo -S apt -y upgrade && sudo -S apt -y autoremove

	# download the key to system keyring; this and the following echo command are
	# needed in order to install the Intel compilers
	wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB |
		gpg --dearmor | sudo tee /usr/share/keyrings/oneapi-archive-keyring.gpg >/dev/null

	# add signed entry to apt sources and configure the APT client to use Intel repository:
	echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list

	# this update should get the Intel package info from the Intel repository
	echo $PASSWD | sudo -S apt -y update

	# necessary binary packages (especially pkg-config and build-essential)
	echo $PASSWD | sudo -S apt -y install autoconf automake bison build-essential byacc cmake csh curl default-jdk default-jre emacs flex g++ gawk gcc gfortran git ksh libcurl4-openssl-dev libjpeg-dev libncurses6 libpixman-1-dev libpng-dev libtool libxml2 libxml2-dev m4 make  ncview okular openbox pipenv pkg-config  python3 python3-dev python3-pip python3-dateutil tcsh unzip xauth xorg time

	# install the Intel compilers
	echo $PASSWD | sudo -S apt -y install intel-basekit
	echo $PASSWD | sudo -S apt -y install intel-hpckit
	echo $PASSWD | sudo -S apt -y install intel-oneapi-python

	echo $PASSWD | sudo -S apt -y update

	# make sure some critical packages have been installed
	which cmake pkg-config make gcc g++ gfortran

	# add the Intel compiler file paths to various environment variables
	source /opt/intel/oneapi/setvars.sh

	# some of the libraries we install below need one or more of these variables
	export CC=icc
	export CXX=icpc
	export FC=ifort
	export F77=ifort
	export F90=ifort
	export MPIFC=mpiifort
	export MPIF77=mpiifort
	export MPIF90=mpiifort
	export MPICC=mpiicc
	export MPICXX=mpiicpc
	export CFLAGS="-fPIC -fPIE -O3  -diag-disable=10441"
	############################# CPU Core Management ####################################

	export CPU_CORE=$(nproc) # number of available threads on system
	export CPU_6CORE="6"
	export CPU_HALF=$(($CPU_CORE / 2)) # half of availble cores on system
	# Forces CPU cores to even number to avoid partial core export. ie 7 cores would be 3.5 cores.
	export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))

	# If statement for low core systems.  Forces computers to only use 1 core if there are 4 cores or less on the system.
	if [ $CPU_CORE -le $CPU_6CORE ]; then
		export CPU_HALF_EVEN="2"
	else
		export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))
	fi

	echo "##########################################"
	echo "Number of Threads being used $CPU_HALF_EVEN"
	echo "##########################################"

	echo " "
	##############################Directory Listing############################
	export HOME=$(
		cd
		pwd
	)

	mkdir $HOME/WRFHYDRO_STANDALONE_INTEL
	export WRFHYDRO_FOLDER=$HOME/WRFHYDRO_STANDALONE_INTEL
	cd $WRFHYDRO_FOLDER/
	mkdir Downloads
	mkdir Libs
	export DIR=$WRFHYDRO_FOLDER/Libs
	mkdir Libs/grib2
	mkdir Libs/NETCDF
	mkdir Libs/MPICH
	echo " "
	##############################Downloading Libraries############################
	cd Downloads
	wget -c https://github.com/madler/zlib/archive/refs/tags/v$Zlib_Version.tar.gz
	wget -c https://github.com/HDFGroup/hdf5/archive/refs/tags/hdf5-$HDF5_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-c/archive/refs/tags/v$Netcdf_C_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-fortran/archive/refs/tags/v$Netcdf_Fortran_Version.tar.gz
	wget -c https://download.sourceforge.net/libpng/libpng-$Libpng_Version.tar.gz
	wget -c https://www.ece.uvic.ca/~frodo/jasper/software/jasper-$Jasper_Version.zip
	wget -c https://parallel-netcdf.github.io/Release/pnetcdf-$Pnetcdf_Version.tar.gz
	wget -c https://sourceforge.net/projects/opengrads/files/grads2/2.2.1.oga.1/Linux%20%2864%20Bits%29/opengrads-2.2.1.oga.1-bundle-x86_64-pc-linux-gnu-glibc_2.17.tar.gz

	echo " "

	#############################zlib############################
	#Uncalling compilers due to comfigure issue with zlib1.2.12
	#With CC & CXX definied ./configure uses different compiler Flags

	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf v$Zlib_Version.tar.gz
	cd zlib-$Zlib_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log
	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2
	2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "
	#############################libpng############################
	cd $WRFHYDRO_FOLDER/Downloads
	export LDFLAGS=-L$DIR/grib2/lib
	export CPPFLAGS=-I$DIR/grib2/include
	tar -xvzf libpng-$Libpng_Version.tar.gz
	cd libpng-$Libpng_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check
	echo " "
	#############################JasPer############################
	cd $WRFHYDRO_FOLDER/Downloads
	unzip jasper-$Jasper_Version.zip
	cd jasper-$Jasper_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check
	export JASPERLIB=$DIR/grib2/lib
	export JASPERINC=$DIR/grib2/include

	echo " "

	#############################hdf5 library for netcdf4 functionality############################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf hdf5-$HDF5_Version.tar.gz
	cd hdf5-hdf5-$HDF5_Version
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 --with-zlib=$DIR/grib2 --enable-hl --enable-fortran --enable-parallel 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export HDF5=$DIR/grib2
	export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH
	export PHDF5=$DIR/grib2
	echo " "

	#############################Install Parallel-netCDF##############################
	#Make file created with half of available cpu cores
	#Hard path for MPI added
	##################################################################################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf pnetcdf-$Pnetcdf_Version.tar.gz
	cd pnetcdf-$Pnetcdf_Version
	autoreconf -i -f 2>&1 | tee autoreconf.log
	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 --enable-shared --enable-static 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PNETCDF=$DIR/grib2

	echo " "

	##############################Install NETCDF C Library############################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xzvf v$Netcdf_C_Version.tar.gz
	cd netcdf-c-$Netcdf_C_Version/
	export CPPFLAGS=-I$DIR/grib2/include
	export LDFLAGS=-L$DIR/grib2/lib
	export LIBS="-lhdf5_hl -lhdf5 -lz -lcurl -lgfortran -lgcc -lm -ldl -lpnetcdf"
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --with-zlib=$DIR/grib2 --disable-dap --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-pnetcdf --enable-cdf5 --enable-parallel-tests 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PATH=$DIR/NETCDF/bin:$PATH
	export NETCDF=$DIR/NETCDF

	echo " "
	##############################NetCDF fortran library############################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf v$Netcdf_Fortran_Version.tar.gz
	cd netcdf-fortran-$Netcdf_Fortran_Version/
	export LD_LIBRARY_PATH=$DIR/NETCDF/lib:$LD_LIBRARY_PATH
	export CPPFLAGS="-I$DIR/NETCDF/include -I$DIR/grib2/include"
	export LDFLAGS="-L$DIR/NETCDF/lib -L$DIR/grib2/lib"
	export LIBS="-lnetcdf -lpnetcdf -lm -lcurl -lhdf5_hl -lhdf5 -lz -ldl"

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-parallel-tests --enable-hdf5 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "

	#################################### System Environment Tests ##############
	mkdir -p $WRFHYDRO_FOLDER/Tests/Environment
	mkdir -p $WRFHYDRO_FOLDER/Tests/Compatibility

	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_NETCDF_MPI_tests.tar
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_tests.tar

	tar -xvf Fortran_C_tests.tar -C $WRFHYDRO_FOLDER/Tests/Environment
	tar -xvf Fortran_C_NETCDF_MPI_tests.tar -C $WRFHYDRO_FOLDER/Tests/Compatibility
	export one="1"
	echo " "
	############## Testing Environment #####

	cd $WRFHYDRO_FOLDER/Tests/Environment

	echo " "
	echo " "
	echo "Environment Testing "
	echo "Test 1"
	$FC TEST_1_fortran_only_fixed.f
	./a.out | tee env_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 1 Passed"
	else
		echo "Environment Compiler Test 1 Failed"
		exit
	fi
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 2"
	$FC TEST_2_fortran_only_free.f90
	./a.out | tee env_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 2 Passed"
	else
		echo "Environment Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 3"
	$CC TEST_3_c_only.c
	./a.out | tee env_test3.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test3.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 3 Passed"
	else
		echo "Environment Compiler Test 3 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 4"
	$CC -c -m64 TEST_4_fortran+c_c.c
	$FC -c -m64 TEST_4_fortran+c_f.f90
	$FC -m64 TEST_4_fortran+c_f.o TEST_4_fortran+c_c.o
	./a.out | tee env_test4.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test4.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 4 Passed"
	else
		echo "Environment Compiler Test 4 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	############## Testing Environment #####

	cd $WRFHYDRO_FOLDER/Tests/Compatibility

	cp ${NETCDF}/include/netcdf.inc .

	echo " "
	echo " "
	echo "Library Compatibility Tests "
	echo "Test 1"
	$FC -c 01_fortran+c+netcdf_f.f
	$CC -c 01_fortran+c+netcdf_c.c
	$FC 01_fortran+c+netcdf_f.o 01_fortran+c+netcdf_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	./a.out | tee comp_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 1 Passed"
	else
		echo "Compatibility Compiler Test 1 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "

	echo "Test 2"
	$MPIFC -c 02_fortran+c+netcdf+mpi_f.f
	$MPICC -c 02_fortran+c+netcdf+mpi_c.c
	$MPIFC 02_fortran+c+netcdf+mpi_f.o \
		02_fortran+c+netcdf+mpi_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	mpirun ./a.out | tee comp_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 2 Passed"
	else
		echo "Compatibility Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."
	echo " "

	echo " All tests completed and passed"
	echo " "

	############################# WRF HYDRO V5.2.0 #################################
	# Version 5.2.0
	# Standalone mode
	# GNU
	################################################################################

	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://github.com/NCAR/wrf_hydro_nwm_public/archive/refs/tags/v5.2.0.tar.gz -O WRFHYDRO.5.2.tar.gz
	tar -xvzf WRFHYDRO.5.2.tar.gz -C $WRFHYDRO_FOLDER/

	#Modifying WRF-HYDRO Environment
	#Echo commands use due to lack of knowledge
	cd $WRFHYDRO_FOLDER/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS/template

	sed -i 's/SPATIAL_SOIL=0/SPATIAL_SOIL=1/g' setEnvar.sh
	echo " " >>setEnvar.sh
	echo "# Large netcdf file support: 0=Off, 1=On." >>setEnvar.sh
	echo "export WRFIO_NCD_LARGE_FILE_SUPPORT=1" >>setEnvar.sh
	ln setEnvar.sh $WRFHYDRO_FOLDER/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS

	#Configure & Compile WRF HYDRO in Standalone Mode
	#Compile WRF-Hydro offline with the NoahMP
	cd $WRFHYDRO_FOLDER/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS
	source setEnvar.sh

	echo 3 | ./configure 2>&1 | tee configure.log

	sed -i '63s/mpif90/mpiifort/g' $WRFHYDRO_FOLDER/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS/macros

	./compile_offline_NoahMP.sh setEnvar.sh 2>&1 | tee compile_offline_NoahMP.log

	ls -lah Run/*.exe #Test to see if .exe files have compiled

	echo " "
	######################### Testing WRF HYDRO Compliation #########################
	cd $WRFHYDRO_FOLDER/
	mkdir -p $WRFHYDRO_FOLDER/domain/NWM

	#Copy the *.TBL files to the NWM directory.
	cp wrf_hydro_nwm_public*/trunk/NDHMS/Run/*.TBL domain/NWM
	#Copy the wrf_hydro.exe file to the NWM directory.
	cp wrf_hydro_nwm_public*/trunk/NDHMS/Run/wrf_hydro.exe domain/NWM

	#Download test case for WRF HYDRO and move to NWM
	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://github.com/NCAR/wrf_hydro_nwm_public/releases/download/v5.2.0/croton_NY_training_example_v5.2.tar.gz
	tar -xzvf croton_NY_training_example_v5.2.tar.gz

	cp -r example_case/FORCING $WRFHYDRO_FOLDER/domain/NWM
	cp -r example_case/NWM/DOMAIN $WRFHYDRO_FOLDER/domain/NWM
	cp -r example_case/NWM/RESTART $WRFHYDRO_FOLDER/domain/NWM
	cp -r example_case/NWM/nudgingTimeSliceObs $WRFHYDRO_FOLDER/domain/NWM
	cp -r example_case/NWM/referenceSim $WRFHYDRO_FOLDER/domain/NWM
	cp example_case/NWM/namelist.hrldas $WRFHYDRO_FOLDER/domain/NWM
	cp example_case/NWM/hydro.namelist $WRFHYDRO_FOLDER/domain/NWM

	#Run Croton NY Test Case
	cd $WRFHYDRO_FOLDER/domain/NWM
	./wrf_hydro.exe
	ls -lah HYDRO_RST*
	echo "IF HYDRO_RST files exist and have data then wrf_hydro.exe sucessful"
	echo " "

	########################### Test script for output data  ###################################

	#Installing Miniconda3 to WRF directory and updating libraries
	pip install --upgrade --force-reinstall zstandard
	pip install --upgrade --force-reinstall zstd
	pip3 install --upgrade --force-reinstall zstandard
	pip3 install --upgrade --force-reinstall zstd
	export Miniconda_Install_DIR=$WRFHYDRO_FOLDER/miniconda3

	mkdir -p $Miniconda_Install_DIR

	wget -c https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $Miniconda_Install_DIR/miniconda.sh

	bash $Miniconda_Install_DIR/miniconda.sh -b -u -p $Miniconda_Install_DIR

	rm -rf $Miniconda_Install_DIR/miniconda.sh

	export PATH=$WRFHYDRO_FOLDER/miniconda3/bin:$PATH

	source $Miniconda_Install_DIR/etc/profile.d/conda.sh

	$Miniconda_Install_DIR/bin/conda init bash
	$Miniconda_Install_DIR/bin/conda init zsh
	$Miniconda_Install_DIR/bin/conda init tcsh
	$Miniconda_Install_DIR/bin/conda init xonsh
	$Miniconda_Install_DIR/bin/conda init powershell

	conda config --add channels conda-forge
	conda config --set auto_activate_base false
	conda update -n root --all -y

	##################### WRF Python           ##################
	########### WRf-Python compiled via Conda  ##################
	########### This is the preferred method by NCAR      ##################
	##### https://wrf-python.readthedocs.io/en/latest/installation.html  ##################
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
conda env create -f $HOME/WRF-MOSIT/wrf-python-stable.yml
	echo " "

	################ NEEDS TO BE IN Master folder #######################
	cp $HOME/WRF-MOSIT/SurfaceRunoff.py $WRFHYDRO_FOLDER/domain/NWM

	cd $WRFHYDRO_FOLDER/domain/NWM

	python3 SurfaceRunoff.py

	okular SurfaceRunoff.pdf

	echo " "
	#####################################BASH Script Finished##############################
	echo "WRF HYDRO Standalone sucessfully configured and compiled"
	read -r -t 5 -p "Congratulations! You've successfully installed all required files to run the Weather Research Forecast Model HYDRO verison 5.2."

	##########################  Export PATH and LD_LIBRARY_PATH ################################
	cd $HOME

fi

if [ "$Centos_64bit_GNU" = "1" ] && [ "$WRFHYDRO_STANDALONE_PICK" = "1" ]; then
	#############################basic package managment############################
	echo $PASSWD | sudo -S yum install epel-release -y
	echo $PASSWD | sudo -S yum install dnf -y
	echo $PASSWD | sudo -S dnf install epel-release -y
	echo $PASSWD | sudo -S dnf install dnf -y
	echo $PASSWD | sudo -S dnf -y update
	echo $PASSWD | sudo -S dnf -y upgrade
	echo $PASSWD | sudo -S dnf -y install autoconf automake bzip2 bzip2-devel byacc cairo-devel cmake cpp curl curl-devel flex  fontconfig-devel fontconfig-devel.x86_64 gcc gcc-c++ gcc-gfortran git java-11-openjdk java-11-openjdk-devel ksh libX11-devel libX11-devel.x86_64 libXaw libXaw-devel libXext-devel libXext-devel.x86_64 libXmu-devel libXrender-devel libXrender-devel.x86_64 libstdc++ libstdc++-devel  libxml2 libxml2-devel m4  .x86_64 nfs-utils perl pkgconfig  pixman-devel python3 python3-devel tcsh time unzip wget
	echo $PASSWD | sudo -S dnf -y groupinstall "Development Tools"
	echo $PASSWD | sudo -S dnf -y update
	echo $PASSWD | sudo -S dnf -y upgrade

	echo " "
	##############################Directory Listing############################
	export HOME=$(
		cd
		pwd
	)

	mkdir $HOME/WRFHYDRO_STANDALONE
	export WRFHYDRO_FOLDER=$HOME/WRFHYDRO_STANDALONE
	cd $WRFHYDRO_FOLDER/
	mkdir Downloads
	mkdir WRFPLUS
	mkdir WRFDA
	mkdir Libs
	export DIR=$WRFHYDRO_FOLDER/Libs
	mkdir Libs/grib2
	mkdir Libs/NETCDF
	mkdir Libs/MPICH
	mkdir -p Tests/Environment
	mkdir -p Tests/Compatibility

	echo " "
	#############################Core Management####################################

	export CPU_CORE=$(nproc) # number of available threads on system
	export CPU_6CORE="6"
	export CPU_HALF=$(($CPU_CORE / 2))                    #half of availble cores on system
	export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2))) #Forces CPU cores to even number to avoid partial core export. ie 7 cores would be 3.5 cores.

	if [ $CPU_CORE -le $CPU_6CORE ]; then #If statement for low core systems.  Forces computers to only use 1 core if there are 4 cores or less on the system.
		export CPU_HALF_EVEN="2"
	else
		export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))
	fi

	echo "##########################################"
	echo "Number of Threads being used $CPU_HALF_EVEN"
	echo "##########################################"

	echo " "
	##############################Downloading Libraries############################
	#Force use of ipv4 with -4
	cd Downloads
	wget -c https://github.com/madler/zlib/archive/refs/tags/v$Zlib_Version.tar.gz
	wget -c https://github.com/HDFGroup/hdf5/archive/refs/tags/hdf5-$HDF5_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-c/archive/refs/tags/v$Netcdf_C_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-fortran/archive/refs/tags/v$Netcdf_Fortran_Version.tar.gz
	wget -c https://github.com/pmodels/mpich/releases/download/v$Mpich_Version/mpich-$Mpich_Version.tar.gz
	wget -c https://download.sourceforge.net/libpng/libpng-$Libpng_Version.tar.gz
	wget -c https://www.ece.uvic.ca/~frodo/jasper/software/jasper-$Jasper_Version.zip
	wget -c https://parallel-netcdf.github.io/Release/pnetcdf-$Pnetcdf_Version.tar.gz
	wget -c https://sourceforge.net/projects/opengrads/files/grads2/2.2.1.oga.1/Linux%20%2864%20Bits%29/opengrads-2.2.1.oga.1-bundle-x86_64-pc-linux-gnu-glibc_2.17.tar.gz

	echo " "
	####################################Compilers#####################################
	export CC=gcc
	export CXX=g++
	export FC=gfortran
	export F77=gfortran
	export CFLAGS="-fPIC -fPIE -O3"

	#IF statement for GNU compiler issue
	export GCC_VERSION=$(gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		export fallow_argument=-fallow-argument-mismatch
		export boz_argument=-fallow-invalid-boz
	else
		export fallow_argument=
		export boz_argument=
	fi

	export FFLAGS="$fallow_argument -m64"
	export FCFLAGS="$fallow_argument -m64"

	echo "##########################################"
	echo "FFLAGS = $FFLAGS"
	echo "FCFLAGS = $FCFLAGS"
	echo "CFLAGS = $CFLAGS"
	echo "##########################################"

	echo " "
	#############################zlib############################
	#Uncalling compilers due to comfigure issue with zlib$Zlib_Version
	#With CC & CXX definied ./configure uses different compiler Flags

	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf v$Zlib_Version.tar.gz
	cd zlib-$Zlib_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log
	./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "
	##############################MPICH############################
	#F90= due to compiler issues with mpich install
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf mpich-$Mpich_Version.tar.gz
	cd mpich-$Mpich_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	F90= ./configure --prefix=$DIR/MPICH --with-device=ch3 FFLAGS=$fallow_argument FCFLAGS=$fallow_argument 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	# make check

	export PATH=$DIR/MPICH/bin:$PATH
	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx

	echo " "
	#############################libpng############################
	cd $WRFHYDRO_FOLDER/Downloads
	export LDFLAGS=-L$DIR/grib2/lib
	export CPPFLAGS=-I$DIR/grib2/include
	tar -xvzf libpng-$Libpng_Version.tar.gz
	cd libpng-$Libpng_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check
	echo " "
	#############################JasPer############################
	cd $WRFHYDRO_FOLDER/Downloads
	unzip jasper-$Jasper_Version.zip
	cd jasper-$Jasper_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	./configure --prefix=$DIR/grib2
	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export JASPERLIB=$DIR/grib2/lib
	export JASPERINC=$DIR/grib2/include

	echo " "
	#############################hdf5 library for netcdf4 functionality############################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf hdf5-$HDF5_Version.tar.gz
	cd hdf5-hdf5-$HDF5_Version
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 --with-zlib=$DIR/grib2 --enable-hl --enable-fortran --enable-parallel 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export HDF5=$DIR/grib2
	export PHDF5=$DIR/grib2
	export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH

	echo " "
	#############################Install Parallel-netCDF##############################
	#Make file created with half of available cpu cores
	#Hard path for MPI added
	##################################################################################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf pnetcdf-$Pnetcdf_Version.tar.gz
	cd pnetcdf-$Pnetcdf_Version

	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx
	autoreconf -i -f 2>&1 | tee autoreconf.log
	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 --enable-shared --enable-static 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PNETCDF=$DIR/grib2

	echo " "

	##############################Install NETCDF C Library############################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xzvf v$Netcdf_C_Version.tar.gz
	cd netcdf-c-$Netcdf_C_Version/
	export CPPFLAGS=-I$DIR/grib2/include
	export LDFLAGS=-L$DIR/grib2/lib
	export LIBS="-lhdf5_hl -lhdf5 -lz -lcurl -lgfortran -lgcc -lm -ldl -lpnetcdf"
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --disable-dap --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-pnetcdf --enable-cdf5 --enable-parallel-tests 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PATH=$DIR/NETCDF/bin:$PATH
	export NETCDF=$DIR/NETCDF
	echo " "
	##############################NetCDF fortran library############################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf v$Netcdf_Fortran_Version.tar.gz
	cd netcdf-fortran-$Netcdf_Fortran_Version/
	export LD_LIBRARY_PATH=$DIR/NETCDF/lib:$LD_LIBRARY_PATH
	export CPPFLAGS="-I$DIR/NETCDF/include -I$DIR/grib2/include"
	export LDFLAGS="-L$DIR/NETCDF/lib -L$DIR/grib2/lib"
	export LIBS="-lnetcdf -lpnetcdf -lcurl -lhdf5_hl -lhdf5 -lz -lm -ldl -lgcc -lgfortran"
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-parallel-tests --enable-hdf5 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "
	#################################### System Environment Tests ##############

	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_NETCDF_MPI_tests.tar
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_tests.tar

	tar -xvf Fortran_C_tests.tar -C $WRFHYDRO_FOLDER/Tests/Environment
	tar -xvf Fortran_C_NETCDF_MPI_tests.tar -C $WRFHYDRO_FOLDER/Tests/Compatibility

	export one="1"
	echo " "
	############## Testing Environment #####

	cd $WRFHYDRO_FOLDER/Tests/Environment

	cp ${NETCDF}/include/netcdf.inc .

	echo " "
	echo " "
	echo "Environment Testing "
	echo "Test 1"
	$FC TEST_1_fortran_only_fixed.f
	./a.out | tee env_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 1 Passed"
	else
		echo "Environment Compiler Test 1 Failed"
		exit
	fi
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 2"
	$FC TEST_2_fortran_only_free.f90
	./a.out | tee env_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 2 Passed"
	else
		echo "Environment Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 3"
	$CC TEST_3_c_only.c
	./a.out | tee env_test3.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test3.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 3 Passed"
	else
		echo "Environment Compiler Test 3 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 4"
	$CC -c -m64 TEST_4_fortran+c_c.c
	$FC -c -m64 TEST_4_fortran+c_f.f90
	$FC -m64 TEST_4_fortran+c_f.o TEST_4_fortran+c_c.o
	./a.out | tee env_test4.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test4.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 4 Passed"
	else
		echo "Environment Compiler Test 4 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	############## Testing Environment #####

	cd $WRFHYDRO_FOLDER/Tests/Compatibility

	cp ${NETCDF}/include/netcdf.inc .

	echo " "
	echo " "
	echo "Library Compatibility Tests "
	echo "Test 1"
	$FC -c 01_fortran+c+netcdf_f.f
	$CC -c 01_fortran+c+netcdf_c.c
	$FC 01_fortran+c+netcdf_f.o 01_fortran+c+netcdf_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	./a.out | tee comp_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 1 Passed"
	else
		echo "Compatibility Compiler Test 1 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "

	echo "Test 2"
	$MPIFC -c 02_fortran+c+netcdf+mpi_f.f
	$MPICC -c 02_fortran+c+netcdf+mpi_c.c
	$MPIFC 02_fortran+c+netcdf+mpi_f.o \
		02_fortran+c+netcdf+mpi_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	$DIR/MPICH/bin/mpirun ./a.out | tee comp_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 2 Passed"
	else
		echo "Compatibility Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."
	echo " "

	echo " All tests completed and passed"
	echo " "

	############################# WRF HYDRO V5.2.0 #################################
	# Version 5.2.0
	# Standalone mode
	# GNU
	################################################################################

	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://github.com/NCAR/wrf_hydro_nwm_public/archive/refs/tags/v5.2.0.tar.gz -O WRFHYDRO.5.2.tar.gz
	tar -xvzf WRFHYDRO.5.2.tar.gz -C $WRFHYDRO_FOLDER/

	#Modifying WRF-HYDRO Environment
	#Echo commands use due to lack of knowledge
	cd $WRFHYDRO_FOLDER/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS/template

	sed -i 's/SPATIAL_SOIL=0/SPATIAL_SOIL=1/g' setEnvar.sh
	echo " " >>setEnvar.sh
	echo "# Large netcdf file support: 0=Off, 1=On." >>setEnvar.sh
	echo "export WRFIO_NCD_LARGE_FILE_SUPPORT=1" >>setEnvar.sh
	ln setEnvar.sh $WRFHYDRO_FOLDER/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS

	#Configure & Compile WRF HYDRO in Standalone Mode
	#Compile WRF-Hydro offline with the NoahMP
	cd $WRFHYDRO_FOLDER/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS
	source setEnvar.sh
	echo 2 | ./configure 2>&1 | tee configure.log # Gfortran
	./compile_offline_NoahMP.sh setEnvar.sh 2>&1 | tee compile_offline_NoahMP.log

	ls -lah Run/*.exe #Test to see if .exe files have compiled

	echo " "
	######################### Testing WRF HYDRO Compliation #########################
	cd $WRFHYDRO_FOLDER/
	mkdir -p $WRFHYDRO_FOLDER/domain/NWM

	cp wrf_hydro_nwm_public*/trunk/NDHMS/Run/*.TBL domain/NWM #Copy the *.TBL files to the NWM directory.

	cp wrf_hydro_nwm_public*/trunk/NDHMS/Run/wrf_hydro.exe domain/NWM #Copy the wrf_hydro.exe file to the NWM directory.

	#Download test case for WRF HYDRO and move to NWM
	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://github.com/NCAR/wrf_hydro_nwm_public/releases/download/v5.2.0/croton_NY_training_example_v5.2.tar.gz
	tar -xzvf croton_NY_training_example_v5.2.tar.gz

	cp -r example_case/FORCING $WRFHYDRO_FOLDER/domain/NWM
	cp -r example_case/NWM/DOMAIN $WRFHYDRO_FOLDER/domain/NWM
	cp -r example_case/NWM/RESTART $WRFHYDRO_FOLDER/domain/NWM
	cp -r example_case/NWM/nudgingTimeSliceObs $WRFHYDRO_FOLDER/domain/NWM
	cp -r example_case/NWM/referenceSim $WRFHYDRO_FOLDER/domain/NWM
	cp example_case/NWM/namelist.hrldas $WRFHYDRO_FOLDER/domain/NWM
	cp example_case/NWM/hydro.namelist $WRFHYDRO_FOLDER/domain/NWM

	#Run Croton NY Test Case
	cd $WRFHYDRO_FOLDER/domain/NWM
	./wrf_hydro.exe
	ls -lah HYDRO_RST*
	echo "IF HYDRO_RST files exist and have data then wrf_hydro.exe sucessful"
	echo " "

	#Installing Miniconda3 to WRF directory and updating libraries
	pip install --upgrade --force-reinstall zstandard
	pip install --upgrade --force-reinstall zstd
	pip3 install --upgrade --force-reinstall zstandard
	pip3 install --upgrade --force-reinstall zstd
	export Miniconda_Install_DIR=$WRFHYDRO_FOLDER/miniconda3

	mkdir -p $Miniconda_Install_DIR

	wget -c https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $Miniconda_Install_DIR/miniconda.sh

	bash $Miniconda_Install_DIR/miniconda.sh -b -u -p $Miniconda_Install_DIR

	rm -rf $Miniconda_Install_DIR/miniconda.sh

	export PATH=$WRFHYDRO_FOLDER/miniconda3/bin:$PATH

	source $Miniconda_Install_DIR/etc/profile.d/conda.sh

	$Miniconda_Install_DIR/bin/conda init bash
	$Miniconda_Install_DIR/bin/conda init zsh
	$Miniconda_Install_DIR/bin/conda init tcsh
	$Miniconda_Install_DIR/bin/conda init xonsh
	$Miniconda_Install_DIR/bin/conda init powershell

	conda config --add channels conda-forge
	conda config --set auto_activate_base false
	conda update -n root --all -y

	##################### WRF Python           ##################
	########### WRf-Python compiled via Conda  ##################
	########### This is the preferred method by NCAR      ##################
	##### https://wrf-python.readthedocs.io/en/latest/installation.html  ##################
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
conda env create -f $HOME/WRF-MOSIT/wrf-python-stable.yml
	echo " "
	################ NEEDS TO BE IN Master folder #######################
	cp $HOME/WRF-MOSIT/SurfaceRunoff.py $WRFHYDRO_FOLDER/domain/NWM

	cd $WRFHYDRO_FOLDER/domain/NWM

	python3 SurfaceRunoff.py

	envince SurfaceRunoff.pdf

	echo " "
	#####################################BASH Script Finished##############################
	echo "WRF HYDRO Standalone sucessfully configured and compiled"
	read -r -t 5 -p "Congratulations! You've successfully installed all required files to run the Weather Research Forecast Model HYDRO verison 5.2."

	##########################  Export PATH and LD_LIBRARY_PATH ################################
	cd $HOME
fi

if [ "$Centos_64bit_GNU" = "2" ] && [ "$WRFHYDRO_STANDALONE_PICK" = "1" ]; then
	#############################basic package managment############################
	echo "old version of GNU detected"
	echo $PASSWD | sudo -S yum install centos-release-scl -y
	echo $PASSWD | sudo -S yum clean all
	echo $PASSWD | sudo -S yum remove devtoolset-11*
	echo $PASSWD | sudo -S yum install devtoolset-11
	echo $PASSWD | sudo -S yum install devtoolset-11-\* -y
	source /opt/rh/devtoolset-11/enable
	gcc --version
	echo $PASSWD | sudo -S yum install epel-release -y
	echo $PASSWD | sudo -S yum install dnf -y
	echo $PASSWD | sudo -S dnf install epel-release -y
	echo $PASSWD | sudo -S dnf install dnf -y
	echo $PASSWD | sudo -S dnf -y update
	echo $PASSWD | sudo -S dnf -y upgrade
	echo $PASSWD | sudo -S dnf -y install autoconf automake bzip2 bzip2-devel byacc cairo-devel cmake cpp curl curl-devel flex  fontconfig-devel fontconfig-devel.x86_64 gcc gcc-c++ gcc-gfortran git java-11-openjdk java-11-openjdk-devel ksh libX11-devel libX11-devel.x86_64 libXaw libXaw-devel libXext-devel libXext-devel.x86_64 libXmu-devel libXrender-devel libXrender-devel.x86_64 libstdc++ libstdc++-devel  libxml2 libxml2-devel m4  .x86_64 nfs-utils perl pkgconfig  pixman-devel python3 python3-devel tcsh time unzip wget
	echo $PASSWD | sudo -S dnf -y groupinstall "Development Tools"
	echo $PASSWD | sudo -S dnf -y update
	echo $PASSWD | sudo -S dnf -y upgrade

	echo " "
	##############################Directory Listing############################
	export HOME=$(
		cd
		pwd
	)

	mkdir $HOME/WRFHYDRO_STANDALONE
	export WRFHYDRO_FOLDER=$HOME/WRFHYDRO_STANDALONE
	cd $WRFHYDRO_FOLDER/
	mkdir Downloads
	mkdir WRFPLUS
	mkdir WRFDA
	mkdir Libs
	export DIR=$WRFHYDRO_FOLDER/Libs
	mkdir Libs/grib2
	mkdir Libs/NETCDF
	mkdir Libs/MPICH
	mkdir -p Tests/Environment
	mkdir -p Tests/Compatibility

	echo " "
	#############################Core Management####################################

	export CPU_CORE=$(nproc) # number of available threads on system
	export CPU_6CORE="6"
	export CPU_HALF=$(($CPU_CORE / 2))                    #half of availble cores on system
	export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2))) #Forces CPU cores to even number to avoid partial core export. ie 7 cores would be 3.5 cores.

	if [ $CPU_CORE -le $CPU_6CORE ]; then #If statement for low core systems.  Forces computers to only use 1 core if there are 4 cores or less on the system.
		export CPU_HALF_EVEN="2"
	else
		export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))
	fi

	echo "##########################################"
	echo "Number of Threads being used $CPU_HALF_EVEN"
	echo "##########################################"

	echo " "
	##############################Downloading Libraries############################
	#Force use of ipv4 with -4
	cd Downloads
	wget -c https://github.com/madler/zlib/archive/refs/tags/v$Zlib_Version.tar.gz
	wget -c https://github.com/HDFGroup/hdf5/archive/refs/tags/hdf5-$HDF5_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-c/archive/refs/tags/v$Netcdf_C_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-fortran/archive/refs/tags/v$Netcdf_Fortran_Version.tar.gz
	wget -c https://github.com/pmodels/mpich/releases/download/v$Mpich_Version/mpich-$Mpich_Version.tar.gz
	wget -c https://download.sourceforge.net/libpng/libpng-$Libpng_Version.tar.gz
	wget -c https://www.ece.uvic.ca/~frodo/jasper/software/jasper-$Jasper_Version.zip
	wget -c https://parallel-netcdf.github.io/Release/pnetcdf-$Pnetcdf_Version.tar.gz
	wget -c https://sourceforge.net/projects/opengrads/files/grads2/2.2.1.oga.1/Linux%20%2864%20Bits%29/opengrads-2.2.1.oga.1-bundle-x86_64-pc-linux-gnu-glibc_2.17.tar.gz

	echo " "
	####################################Compilers#####################################
	export CC=gcc
	export CXX=g++
	export FC=gfortran
	export F77=gfortran
	export CFLAGS="-fPIC -fPIE -O3"

	#IF statement for GNU compiler issue
	export GCC_VERSION=$(gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		export fallow_argument=-fallow-argument-mismatch
		export boz_argument=-fallow-invalid-boz
	else
		export fallow_argument=
		export boz_argument=
	fi

	export FFLAGS="$fallow_argument -m64"
	export FCFLAGS="$fallow_argument -m64"

	echo "##########################################"
	echo "FFLAGS = $FFLAGS"
	echo "FCFLAGS = $FCFLAGS"
	echo "CFLAGS = $CFLAGS"
	echo "##########################################"

	echo " "
	#############################zlib############################
	#Uncalling compilers due to comfigure issue with zlib$Zlib_Version
	#With CC & CXX definied ./configure uses different compiler Flags

	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf v$Zlib_Version.tar.gz
	cd zlib-$Zlib_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log
	./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "
	##############################MPICH############################
	#F90= due to compiler issues with mpich install
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf mpich-$Mpich_Version.tar.gz
	cd mpich-$Mpich_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	F90= ./configure --prefix=$DIR/MPICH --with-device=ch3 FFLAGS=$fallow_argument FCFLAGS=$fallow_argument 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	# make check

	export PATH=$DIR/MPICH/bin:$PATH
	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx

	echo " "
	#############################libpng############################
	cd $WRFHYDRO_FOLDER/Downloads
	export LDFLAGS=-L$DIR/grib2/lib
	export CPPFLAGS=-I$DIR/grib2/include
	tar -xvzf libpng-$Libpng_Version.tar.gz
	cd libpng-$Libpng_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check
	echo " "
	#############################JasPer############################
	cd $WRFHYDRO_FOLDER/Downloads
	unzip jasper-$Jasper_Version.zip
	cd jasper-$Jasper_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	./configure --prefix=$DIR/grib2
	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export JASPERLIB=$DIR/grib2/lib
	export JASPERINC=$DIR/grib2/include

	echo " "
	#############################hdf5 library for netcdf4 functionality############################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf hdf5-$HDF5_Version.tar.gz
	cd hdf5-hdf5-$HDF5_Version
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 --with-zlib=$DIR/grib2 --enable-hl --enable-fortran --enable-parallel 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export HDF5=$DIR/grib2
	export PHDF5=$DIR/grib2
	export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH

	echo " "
	#############################Install Parallel-netCDF##############################
	#Make file created with half of available cpu cores
	#Hard path for MPI added
	##################################################################################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf pnetcdf-$Pnetcdf_Version.tar.gz
	cd pnetcdf-$Pnetcdf_Version

	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx
	autoreconf -i -f 2>&1 | tee autoreconf.log
	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 --enable-shared --enable-static 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PNETCDF=$DIR/grib2

	echo " "

	##############################Install NETCDF C Library############################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xzvf v$Netcdf_C_Version.tar.gz
	cd netcdf-c-$Netcdf_C_Version/
	export CPPFLAGS=-I$DIR/grib2/include
	export LDFLAGS=-L$DIR/grib2/lib
	export LIBS="-lhdf5_hl -lhdf5 -lz -lcurl -lgfortran -lgcc -lm -ldl -lpnetcdf"
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --disable-dap --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-pnetcdf --enable-cdf5 --enable-parallel-tests 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PATH=$DIR/NETCDF/bin:$PATH
	export NETCDF=$DIR/NETCDF
	echo " "
	##############################NetCDF fortran library############################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf v$Netcdf_Fortran_Version.tar.gz
	cd netcdf-fortran-$Netcdf_Fortran_Version/
	export LD_LIBRARY_PATH=$DIR/NETCDF/lib:$LD_LIBRARY_PATH
	export CPPFLAGS="-I$DIR/NETCDF/include -I$DIR/grib2/include"
	export LDFLAGS="-L$DIR/NETCDF/lib -L$DIR/grib2/lib"
	export LIBS="-lnetcdf -lpnetcdf -lcurl -lhdf5_hl -lhdf5 -lz -lm -ldl -lgcc -lgfortran"
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-parallel-tests --enable-hdf5 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "
	#################################### System Environment Tests ##############

	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_NETCDF_MPI_tests.tar
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_tests.tar

	tar -xvf Fortran_C_tests.tar -C $WRFHYDRO_FOLDER/Tests/Environment
	tar -xvf Fortran_C_NETCDF_MPI_tests.tar -C $WRFHYDRO_FOLDER/Tests/Compatibility

	export one="1"
	echo " "
	############## Testing Environment #####

	cd $WRFHYDRO_FOLDER/Tests/Environment

	cp ${NETCDF}/include/netcdf.inc .

	echo " "
	echo " "
	echo "Environment Testing "
	echo "Test 1"
	$FC TEST_1_fortran_only_fixed.f
	./a.out | tee env_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 1 Passed"
	else
		echo "Environment Compiler Test 1 Failed"
		exit
	fi
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 2"
	$FC TEST_2_fortran_only_free.f90
	./a.out | tee env_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 2 Passed"
	else
		echo "Environment Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 3"
	$CC TEST_3_c_only.c
	./a.out | tee env_test3.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test3.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 3 Passed"
	else
		echo "Environment Compiler Test 3 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 4"
	$CC -c -m64 TEST_4_fortran+c_c.c
	$FC -c -m64 TEST_4_fortran+c_f.f90
	$FC -m64 TEST_4_fortran+c_f.o TEST_4_fortran+c_c.o
	./a.out | tee env_test4.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test4.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 4 Passed"
	else
		echo "Environment Compiler Test 4 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	############## Testing Environment #####

	cd $WRFHYDRO_FOLDER/Tests/Compatibility

	cp ${NETCDF}/include/netcdf.inc .

	echo " "
	echo " "
	echo "Library Compatibility Tests "
	echo "Test 1"
	$FC -c 01_fortran+c+netcdf_f.f
	$CC -c 01_fortran+c+netcdf_c.c
	$FC 01_fortran+c+netcdf_f.o 01_fortran+c+netcdf_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	./a.out | tee comp_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 1 Passed"
	else
		echo "Compatibility Compiler Test 1 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "

	echo "Test 2"
	$MPIFC -c 02_fortran+c+netcdf+mpi_f.f
	$MPICC -c 02_fortran+c+netcdf+mpi_c.c
	$MPIFC 02_fortran+c+netcdf+mpi_f.o \
		02_fortran+c+netcdf+mpi_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	$DIR/MPICH/bin/mpirun ./a.out | tee comp_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 2 Passed"
	else
		echo "Compatibility Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."
	echo " "

	echo " All tests completed and passed"
	echo " "

	############################# WRF HYDRO V5.2.0 #################################
	# Version 5.2.0
	# Standalone mode
	# GNU
	################################################################################

	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://github.com/NCAR/wrf_hydro_nwm_public/archive/refs/tags/v5.2.0.tar.gz -O WRFHYDRO.5.2.tar.gz
	tar -xvzf WRFHYDRO.5.2.tar.gz -C $WRFHYDRO_FOLDER/

	#Modifying WRF-HYDRO Environment
	#Echo commands use due to lack of knowledge
	cd $WRFHYDRO_FOLDER/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS/template

	sed -i 's/SPATIAL_SOIL=0/SPATIAL_SOIL=1/g' setEnvar.sh
	echo " " >>setEnvar.sh
	echo "# Large netcdf file support: 0=Off, 1=On." >>setEnvar.sh
	echo "export WRFIO_NCD_LARGE_FILE_SUPPORT=1" >>setEnvar.sh
	ln setEnvar.sh $WRFHYDRO_FOLDER/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS

	#Configure & Compile WRF HYDRO in Standalone Mode
	#Compile WRF-Hydro offline with the NoahMP
	cd $WRFHYDRO_FOLDER/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS
	source setEnvar.sh
	echo 2 | ./configure 2>&1 | tee configure.log # Gfortran
	./compile_offline_NoahMP.sh setEnvar.sh 2>&1 | tee compile_offline_NoahMP.log

	ls -lah Run/*.exe #Test to see if .exe files have compiled

	echo " "
	######################### Testing WRF HYDRO Compliation #########################
	cd $WRFHYDRO_FOLDER/
	mkdir -p $WRFHYDRO_FOLDER/domain/NWM

	cp wrf_hydro_nwm_public*/trunk/NDHMS/Run/*.TBL domain/NWM #Copy the *.TBL files to the NWM directory.

	cp wrf_hydro_nwm_public*/trunk/NDHMS/Run/wrf_hydro.exe domain/NWM #Copy the wrf_hydro.exe file to the NWM directory.

	#Download test case for WRF HYDRO and move to NWM
	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://github.com/NCAR/wrf_hydro_nwm_public/releases/download/v5.2.0/croton_NY_training_example_v5.2.tar.gz
	tar -xzvf croton_NY_training_example_v5.2.tar.gz

	cp -r example_case/FORCING $WRFHYDRO_FOLDER/domain/NWM
	cp -r example_case/NWM/DOMAIN $WRFHYDRO_FOLDER/domain/NWM
	cp -r example_case/NWM/RESTART $WRFHYDRO_FOLDER/domain/NWM
	cp -r example_case/NWM/nudgingTimeSliceObs $WRFHYDRO_FOLDER/domain/NWM
	cp -r example_case/NWM/referenceSim $WRFHYDRO_FOLDER/domain/NWM
	cp example_case/NWM/namelist.hrldas $WRFHYDRO_FOLDER/domain/NWM
	cp example_case/NWM/hydro.namelist $WRFHYDRO_FOLDER/domain/NWM

	#Run Croton NY Test Case
	cd $WRFHYDRO_FOLDER/domain/NWM
	./wrf_hydro.exe
	ls -lah HYDRO_RST*
	echo "IF HYDRO_RST files exist and have data then wrf_hydro.exe sucessful"
	echo " "

	#Installing Miniconda3 to WRF directory and updating libraries
	pip install --upgrade --force-reinstall zstandard
	pip install --upgrade --force-reinstall zstd
	pip3 install --upgrade --force-reinstall zstandard
	pip3 install --upgrade --force-reinstall zstd
	export Miniconda_Install_DIR=$WRFHYDRO_FOLDER/miniconda3

	mkdir -p $Miniconda_Install_DIR

	wget -c https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $Miniconda_Install_DIR/miniconda.sh

	bash $Miniconda_Install_DIR/miniconda.sh -b -u -p $Miniconda_Install_DIR

	rm -rf $Miniconda_Install_DIR/miniconda.sh

	export PATH=$WRFHYDRO_FOLDER/miniconda3/bin:$PATH

	source $Miniconda_Install_DIR/etc/profile.d/conda.sh

	$Miniconda_Install_DIR/bin/conda init bash
	$Miniconda_Install_DIR/bin/conda init zsh
	$Miniconda_Install_DIR/bin/conda init tcsh
	$Miniconda_Install_DIR/bin/conda init xonsh
	$Miniconda_Install_DIR/bin/conda init powershell

	conda config --add channels conda-forge
	conda config --set auto_activate_base false
	conda update -n root --all -y

	##################### WRF Python           ##################
	########### WRf-Python compiled via Conda  ##################
	########### This is the preferred method by NCAR      ##################
	##### https://wrf-python.readthedocs.io/en/latest/installation.html  ##################
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
conda env create -f $HOME/WRF-MOSIT/wrf-python-stable.yml
	echo " "
	################ NEEDS TO BE IN Master folder #######################
	cp $HOME/WRF-MOSIT/SurfaceRunoff.py $WRFHYDRO_FOLDER/domain/NWM

	cd $WRFHYDRO_FOLDER/domain/NWM

	python3 SurfaceRunoff.py

	envince SurfaceRunoff.pdf

	echo " "
	#####################################BASH Script Finished##############################
	echo "WRF HYDRO Standalone sucessfully configured and compiled"
	read -r -t 5 -p "Congratulations! You've successfully installed all required files to run the Weather Research Forecast Model HYDRO verison 5.2."

	##########################  Export PATH and LD_LIBRARY_PATH ################################
	cd $HOME
fi

################################### WRF Hydro Coupled ##############
## WRFHYDRO Coupled installation with parallel process.
# Download and install required library and data files for WRFHYDRO Coupled.
# Tested in Ubuntu 20.0${WPS_VERSION} LTS & Ubuntu 22.04, Rocky Linux 9 & MacOS Ventura 64bit
# Built in 64-bit system
# Built with Intel or GNU compilers
# Tested with current available libraries on 10/10/2023
# If newer libraries exist edit script paths for changes
#Estimated Run Time ~ 90 - 150 Minutes with 10mb/s downloadspeed.
# Special thanks to:
# Youtube's meteoadriatic, GitHub user jamal919.
# University of Manchester's  Doug L
# University of Tunis El Manar's Hosni
# GSL's Jordan S.
# NCAR's Mary B., Christine W., & Carl D.
# DTC's Julie P., Tara J., George M., & John H.
# UCAR's Katelyn F., Jim B., Jordan P., Kevin M.,
##############################################################

if [ "$Ubuntu_64bit_GNU" = "1" ] && [ "$WRFHYDRO_COUPLED_PICK" = "1" ]; then

	#############################basic package managment############################
	echo $PASSWD | sudo -S apt -y update
	echo $PASSWD | sudo -S apt -y upgrade && sudo -S apt -y autoremove
	echo $PASSWD | sudo -S apt -y install autoconf automake bison build-essential byacc cmake csh curl default-jdk default-jre emacs flex g++ gawk gcc gfortran git ksh libcurl4-openssl-dev libjpeg-dev libncurses6 libpixman-1-dev libpng-dev libtool libxml2 libxml2-dev m4 make  ncview okular openbox pipenv pkg-config  python3 python3-dev python3-pip python3-dateutil tcsh unzip xauth xorg time
	echo " "
	##############################Directory Listing############################
	export HOME=$(
		cd
		pwd
	)
	mkdir $HOME/WRFHYDRO_COUPLED
	export WRFHYDRO_FOLDER=$HOME/WRFHYDRO_COUPLED
	export DIR=$WRFHYDRO_FOLDER/Libs
	cd $WRFHYDRO_FOLDER/
	mkdir Downloads
	mkdir $WRFHYDRO_FOLDER/Hydro-Basecode
	mkdir Libs
	export DIR=$WRFHYDRO_FOLDER/Libs
	mkdir Libs/grib2
	mkdir Libs/NETCDF
	mkdir Libs/MPICH
	mkdir -p Tests/Environment
	mkdir -p Tests/Compatibility

	echo " "
	#############################Core Management####################################

	export CPU_CORE=$(nproc) # number of available threads on system
	export CPU_6CORE="6"
	export CPU_HALF=$(($CPU_CORE / 2))                    #half of availble cores on system
	export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2))) #Forces CPU cores to even number to avoid partial core export. ie 7 cores would be 3.5 cores.

	if [ $CPU_CORE -le $CPU_6CORE ]; then #If statement for low core systems.  Forces computers to only use 1 core if there are 4 cores or less on the system.
		export CPU_HALF_EVEN="2"
	else
		export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))
	fi

	echo "##########################################"
	echo "Number of Threads being used $CPU_HALF_EVEN"
	echo "##########################################"

	echo " "
	##############################Downloading Libraries############################
	cd Downloads
	wget -c https://github.com/madler/zlib/archive/refs/tags/v$Zlib_Version.tar.gz
	wget -c https://github.com/HDFGroup/hdf5/archive/refs/tags/hdf5-$HDF5_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-c/archive/refs/tags/v$Netcdf_C_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-fortran/archive/refs/tags/v$Netcdf_Fortran_Version.tar.gz
	wget -c https://download.sourceforge.net/libpng/libpng-$Libpng_Version.tar.gz
	wget -c https://www.ece.uvic.ca/~frodo/jasper/software/jasper-$Jasper_Version.zip
	wget -c https://github.com/pmodels/mpich/releases/download/v$Mpich_Version/mpich-$Mpich_Version.tar.gz
	wget -c https://parallel-netcdf.github.io/Release/pnetcdf-$Pnetcdf_Version.tar.gz
	wget -c https://sourceforge.net/projects/opengrads/files/grads2/2.2.1.oga.1/Linux%20%2864%20Bits%29/opengrads-2.2.1.oga.1-bundle-x86_64-pc-linux-gnu-glibc_2.17.tar.gz

	echo " "
	#############################Compilers############################
	export CC=gcc
	export CXX=g++
	export FC=gfortran
	export F77=gfortran
	export CFLAGS="-fPIC -fPIE -O3"

	#IF statement for GNU compiler issue
	export GCC_VERSION=$(/usr/bin/gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(/usr/bin/gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(/usr/bin/g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		export fallow_argument=-fallow-argument-mismatch
		export boz_argument=-fallow-invalid-boz
	else
		export fallow_argument=
		export boz_argument=
	fi

	export FFLAGS="$fallow_argument -m64"
	export FCFLAGS="$fallow_argument -m64"

	echo "##########################################"
	echo "FFLAGS = $FFLAGS"
	echo "FCFLAGS = $FCFLAGS"
	echo "CFLAGS = $CFLAGS"
	echo "##########################################"

	echo " "
	#############################zlib############################
	#Uncalling compilers due to comfigure issue with zlib$Zlib_Version
	#With CC & CXX definied ./configure uses different compiler Flags

	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf v$Zlib_Version.tar.gz
	cd zlib-$Zlib_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log
	./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "
	##############################MPICH############################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf mpich-$Mpich_Version.tar.gz
	cd mpich-$Mpich_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	F90= ./configure --prefix=$DIR/MPICH --with-device=ch3 FFLAGS="$fallow_argument -m64" FCFLAGS="$fallow_argument -m64" 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PATH=$DIR/MPICH/bin:$PATH
	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx

	echo " "
	#############################libpng############################
	cd $WRFHYDRO_FOLDER/Downloads
	export LDFLAGS=-L$DIR/grib2/lib
	export CPPFLAGS=-I$DIR/grib2/include
	tar -xvzf libpng-$Libpng_Version.tar.gz
	cd libpng-$Libpng_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check
	echo " "
	#############################JasPer############################
	cd $WRFHYDRO_FOLDER/Downloads
	unzip jasper-$Jasper_Version.zip
	cd jasper-$Jasper_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export JASPERLIB=$DIR/grib2/lib
	export JASPERINC=$DIR/grib2/include

	echo " "
	#############################hdf5 library for netcdf4 functionality############################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf hdf5-$HDF5_Version.tar.gz
	cd hdf5-hdf5-$HDF5_Version
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 --with-zlib=$DIR/grib2 --enable-hl --enable-fortran --enable-parallel 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export HDF5=$DIR/grib2
	export PHDF5=$DIR/grib2
	export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH

	#############################Install Parallel-netCDF##############################
	#Make file created with half of available cpu cores
	#Hard path for MPI added
	##################################################################################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf pnetcdf-$Pnetcdf_Version.tar.gz
	cd pnetcdf-$Pnetcdf_Version

	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx
	autoreconf -i -f 2>&1 | tee autoreconf.log
	./configure --prefix=$DIR/grib2 --enable-shared --enable-static 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PNETCDF=$DIR/grib2

	echo " "

	##############################Install NETCDF C Library############################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xzvf v$Netcdf_C_Version.tar.gz
	cd netcdf-c-$Netcdf_C_Version/
	export CPPFLAGS=-I$DIR/grib2/include
	export LDFLAGS=-L$DIR/grib2/lib
	export LIBS="-lhdf5_hl -lhdf5 -lz -lcurl -lgfortran -lgcc -lm -ldl -lpnetcdf"
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --disable-dap --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-pnetcdf --enable-cdf5 --enable-parallel-tests 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PATH=$DIR/NETCDF/bin:$PATH
	export NETCDF=$DIR/NETCDF
	echo " "
	##############################NetCDF fortran library############################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf v$Netcdf_Fortran_Version.tar.gz
	cd netcdf-fortran-$Netcdf_Fortran_Version/
	export LD_LIBRARY_PATH=$DIR/NETCDF/lib:$LD_LIBRARY_PATH
	export CPPFLAGS="-I$DIR/NETCDF/include -I$DIR/grib2/include"
	export LDFLAGS="-L$DIR/NETCDF/lib -L$DIR/grib2/lib"
	export LIBS="-lnetcdf -lpnetcdf -lcurl -lhdf5_hl -lhdf5 -lz -lm -ldl -lgcc -lgfortran"
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-parallel-tests --enable-hdf5 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "

	#################################### System Environment Tests ##############

	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_NETCDF_MPI_tests.tar
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_tests.tar

	tar -xvf Fortran_C_tests.tar -C $WRFHYDRO_FOLDER/Tests/Environment
	tar -xvf Fortran_C_NETCDF_MPI_tests.tar -C $WRFHYDRO_FOLDER/Tests/Compatibility
	export one="1"
	echo " "
	############## Testing Environment #####

	cd $WRFHYDRO_FOLDER/Tests/Environment

	cp ${NETCDF}/include/netcdf.inc .

	echo " "
	echo " "
	echo "Environment Testing "
	echo "Test 1"
	$FC TEST_1_fortran_only_fixed.f
	./a.out | tee env_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 1 Passed"
	else
		echo "Environment Compiler Test 1 Failed"
		exit
	fi
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 2"
	$FC TEST_2_fortran_only_free.f90
	./a.out | tee env_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 2 Passed"
	else
		echo "Environment Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 3"
	$CC TEST_3_c_only.c
	./a.out | tee env_test3.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test3.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 3 Passed"
	else
		echo "Environment Compiler Test 3 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 4"
	$CC -c -m64 TEST_4_fortran+c_c.c
	$FC -c -m64 TEST_4_fortran+c_f.f90
	$FC -m64 TEST_4_fortran+c_f.o TEST_4_fortran+c_c.o
	./a.out | tee env_test4.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test4.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 4 Passed"
	else
		echo "Environment Compiler Test 4 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	############## Testing Environment #####

	cd $WRFHYDRO_FOLDER/Tests/Compatibility

	cp ${NETCDF}/include/netcdf.inc .

	echo " "
	echo " "
	echo "Library Compatibility Tests "
	echo "Test 1"
	$FC -c 01_fortran+c+netcdf_f.f
	$CC -c 01_fortran+c+netcdf_c.c
	$FC 01_fortran+c+netcdf_f.o 01_fortran+c+netcdf_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	./a.out | tee comp_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 1 Passed"
	else
		echo "Compatibility Compiler Test 1 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "

	echo "Test 2"
	$MPIFC -c 02_fortran+c+netcdf+mpi_f.f
	$MPICC -c 02_fortran+c+netcdf+mpi_c.c
	$MPIFC 02_fortran+c+netcdf+mpi_f.o \
		02_fortran+c+netcdf+mpi_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	$DIR/MPICH/bin/mpirun ./a.out | tee comp_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 2 Passed"
	else
		echo "Compatibility Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."
	echo " "

	echo " All tests completed and passed"
	echo " "

	###############################NCEPlibs#####################################
	#The libraries are built and installed with
	# ./make_ncep_libs.sh -s MACHINE -c COMPILER -d NCEPLIBS_DIR -o OPENMP [-m mpi] [-a APPLICATION]
	#It is recommended to install the NCEPlibs into their own directory, which must be created before running the installer. Further information on the command line arguments can be obtained with
	# ./make_ncep_libs.sh -h

	#If iand error occurs go to https://github.com/NCAR/NCEPlibs/pull/16/files make adjustment and re-run ./make_ncep_libs.sh
	############################################################################

	cd $WRFHYDRO_FOLDER/Downloads
	git clone https://github.com/NCAR/NCEPlibs.git
	cd NCEPlibs
	mkdir $DIR/nceplibs

	export JASPER_INC=$DIR/grib2/include
	export PNG_INC=$DIR/grib2/include
	export NETCDF=$DIR/NETCDF

	#for loop to edit linux.gnu for nceplibs to install
	#make if statement for gcc-9 or older
	export GCC_VERSION=$(/usr/bin/gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(/usr/bin/gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(/usr/bin/g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		y="24 28 32 36 40 45 49 53 56 60 64 68 69 73 74 79"
		for X in $y; do
			sed -i "${X}s/= /= $fallow_argument $boz_argument /g" $WRFHYDRO_FOLDER/Downloads/NCEPlibs/macros.make.linux.gnu
		done
	else
		echo ""
		echo "Loop not needed"
	fi

	if [ ${auto_config} -eq 1 ]; then
		echo yes | ./make_ncep_libs.sh -s linux -c gnu -d $DIR/nceplibs -o 0 -m 1 -a upp
	else
		./make_ncep_libs.sh -s linux -c gnu -d $DIR/nceplibs -o 0 -m 1 -a upp
	fi

	export PATH=$DIR/nceplibs:$PATH

	echo " "
	################################UPPv4.1######################################
	#Previous verison of UPP
	#WRF Support page recommends UPPV4.1 due to too many changes to WRF and UPP code
	#since the WRF was written
	#Option 8 gfortran compiler with distributed memory
	#############################################################################
	cd $WRFHYDRO_FOLDER/
	git clone -b dtc_post_v4.1.0 --recurse-submodules https://github.com/NOAA-EMC/EMC_post UPPV4.1
	cd UPPV4.1
	mkdir postprd
	export NCEPLIBS_DIR=$DIR/nceplibs
	export NETCDF=$DIR/NETCDF

	if [ ${auto_config} -eq 1 ]; then
		echo 8 | ./configure #Option 8 gfortran compiler with distributed memory
	else
		./configure #Option 8 gfortran compiler with distributed memory
	fi

	echo " "
	#make if statement for gcc-9 or older
	export GCC_VERSION=$(/usr/bin/gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(/usr/bin/gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(/usr/bin/g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		z="58 63"
		for X in $z; do
			sed -i "${X}s/(FOPT)/(FOPT) $fallow_argument $boz_argument  /g" $WRFHYDRO_FOLDER/UPPV4.1/configure.upp
		done
	else
		echo ""
		echo "Loop not needed"
	fi

	./compile | tee upp_compile.log
	cd $WRFHYDRO_FOLDER/UPPV4.1/scripts
	echo $PASSWD | sudo -S cpan install XML::LibXML
	chmod +x run_unipost

	echo " "
	######################## ARWpost V3.1  ############################
	## ARWpost
	##Configure #3
	###################################################################
	cd $WRFHYDRO_FOLDER/Downloads
	wget -c http://www2.mmm.ucar.edu/wrf/src/ARWpost_V3.tar.gz
	tar -xvzf ARWpost_V3.tar.gz -C $WRFHYDRO_FOLDER/
	cd $WRFHYDRO_FOLDER/ARWpost
	./clean -a
	sed -i -e 's/-lnetcdf/-lnetcdff -lnetcdf/g' $WRFHYDRO_FOLDER/ARWpost/src/Makefile
	export NETCDF=$DIR/NETCDF

	if [ ${auto_config} -eq 1 ]; then
		echo 3 | ./configure #Option 3 gfortran compiler with distributed memory
	else
		./configure #Option 3 gfortran compiler with distributed memory
	fi

	export GCC_VERSION=$(/usr/bin/gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(/usr/bin/gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(/usr/bin/g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		sed -i '32s/-ffree-form -O -fno-second-underscore -fconvert=big-endian -frecord-marker=4/-ffree-form -O -fno-second-underscore -fconvert=big-endian -frecord-marker=4 ${fallow_argument} /g' configure.arwp
	fi

	sed -i -e 's/-C -P -traditional/-P -traditional/g' $WRFHYDRO_FOLDER/ARWpost/configure.arwp
	./compile

	export PATH=$WRFHYDRO_FOLDER/ARWpost/ARWpost.exe:$PATH

	echo " "
	################################OpenGrADS######################################
	#Verison 2.2.1 64bit of Linux
	#############################################################################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xzvf opengrads-2.2.1.oga.1-bundle-x86_64-pc-linux-gnu-glibc_2.17.tar.gz -C $WRFHYDRO_FOLDER/
	cd $WRFHYDRO_FOLDER/
	mv $WRFHYDRO_FOLDER/opengrads-2.2.1.oga.1 $WRFHYDRO_FOLDER/GrADS
	cd GrADS/Contents
	wget -c https://github.com/regisgrundig/SIMOP/blob/master/g2ctl.pl
	chmod +x g2ctl.pl
	wget -c https://sourceforge.net/projects/opengrads/files/wgrib2/0.1.9.4/wgrib2-v0.1.9.4-bin-x86_64-glibc2.5-linux-gnu.tar.gz
	tar -xzvf wgrib2-v0.1.9.4-bin-x86_64-glibc2.5-linux-gnu.tar.gz
	cd wgrib2-v0.1.9.4/bin
	mv wgrib2 $WRFHYDRO_FOLDER/GrADS/Contents
	cd $WRFHYDRO_FOLDER/GrADS/Contents
	rm wgrib2-v0.1.9.4-bin-x86_64-glibc2.5-linux-gnu.tar.gz
	rm -r wgrib2-v0.1.9.4

	export PATH=$WRFHYDRO_FOLDER/GrADS/Contents:$PATH

	echo " "
	##################### NCAR COMMAND LANGUAGE           ##################
	########### NCL compiled via Conda                    ##################
	########### This is the preferred method by NCAR      ##################
	########### https://www.ncl.ucar.edu/index.shtml      ##################

	#Installing Miniconda3 to WRF-Hydro dire
	pip install --upgrade --force-reinstall zstandard
	pip install --upgrade --force-reinstall zstd
	pip3 install --upgrade --force-reinstall zstandard
	pip3 install --upgrade --force-reinstall zstd
	export Miniconda_Install_DIR=$WRFHYDRO_FOLDER/miniconda3

	mkdir -p $Miniconda_Install_DIR

	wget -c https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $Miniconda_Install_DIR/miniconda.sh
	bash $Miniconda_Install_DIR/miniconda.sh -b -u -p $Miniconda_Install_DIR

	rm -rf $Miniconda_Install_DIR/miniconda.sh

	export PATH=$WRFHYDRO_FOLDER/miniconda3/bin:$PATH

	source $Miniconda_Install_DIR/etc/profile.d/conda.sh

	$Miniconda_Install_DIR/bin/conda init bash
	$Miniconda_Install_DIR/bin/conda init zsh
	$Miniconda_Install_DIR/bin/conda init tcsh
	$Miniconda_Install_DIR/bin/conda init xonsh
	$Miniconda_Install_DIR/bin/conda init powershell

	conda config --add channels conda-forge
	conda config --set auto_activate_base false
	conda update -n root --all -y

	echo " "

	echo " "
	#Installing NCL via Conda
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda init bash
	conda activate base
	conda create -n ncl_stable -c conda-forge ncl -y
	conda activate ncl_stable

	conda deactivate
	conda deactivate
	conda deactivate

	echo " "

	############################OBSGRID###############################
	## OBSGRID
	## Downloaded from git tagged releases
	## Option #2
	########################################################################
	cd $WRFHYDRO_FOLDER/
	git clone https://github.com/wrf-model/OBSGRID.git
	cd $WRFHYDRO_FOLDER/OBSGRID

	./clean -a
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda init bash
	conda activate ncl_stable

	export HOME=$(
		cd
		pwd
	)
	export DIR=$WRFHYDRO_FOLDER/Libs
	export NETCDF=$DIR/NETCDF

	if [ ${auto_config} -eq 1 ]; then
		echo 2 | ./configure 2>&1 | tee configure.log#Option 2 for gfortran/gcc and distribunted memory
	else
		./configure 2>&1 | tee configure.log #Option 2 for gfortran/gcc and distribunted memory
	fi

	sed -i '27s/-lnetcdf -lnetcdff/ -lnetcdff -lnetcdf/g' configure.oa

	sed -i '31s/-lncarg -lncarg_gks -lncarg_c -lX11 -lm -lcairo/-lncarg -lncarg_gks -lncarg_c -lX11 -lm -lcairo -lfontconfig -lpixman-1 -lfreetype -lhdf5 -lhdf5_hl /g' configure.oa

	sed -i '39s/-frecord-marker=4/-frecord-marker=4 ${fallow_argument} /g' configure.oa

	sed -i '44s/=	/=	${fallow_argument} /g' configure.oa

	sed -i '45s/-C -P -traditional/-P -traditional/g' configure.oa

	echo " "

	./compile 2>&1 | tee compile.obsgrid.log

	conda deactivate
	conda deactivate
	conda deactivate
	# IF statement to check that all files were created.
	cd $WRFHYDRO_FOLDER/OBSGRID
	n=$(ls ./*.exe | wc -l)
	if (($n == 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing OBSGRID. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files. Exiting the script."
		read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
		exit
	fi

	echo " "
	############################## RIP4 #####################################
	mkdir $WRFHYDRO_FOLDER/RIP4
	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://www2.mmm.ucar.edu/wrf/src/RIP_47.tar.gz
	tar -xvzf RIP_47.tar.gz -C $WRFHYDRO_FOLDER/RIP4
	cd $WRFHYDRO_FOLDER/RIP4/RIP_47
	mv * ..
	cd $WRFHYDRO_FOLDER/RIP4
	rm -rd RIP_47
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda activate ncl_stable
	conda install -c conda-forge ncl c-compiler fortran-compiler cxx-compiler -y

	export RIP_ROOT=$WRFHYDRO_FOLDER/RIP4
	export NETCDF=$DIR/NETCDF
	export NCARG_ROOT=$WRFHYDRO_FOLDER/miniconda3/envs/ncl_stable

	sed -i '349s|-L${NETCDF}/lib -lnetcdf $NETCDFF|-L${NETCDF}/lib $NETCDFF -lnetcdff -lnetcdf -lnetcdf -lnetcdff_C -lhdf5 |g' $WRFHYDRO_FOLDER/RIP4/configure

	sed -i '27s|NETCDFLIB	= -L${NETCDF}/lib -lnetcdf CONFIGURE_NETCDFF_LIB|NETCDFLIB	= -L</usr/lib/x86_64-linux-gnu/libm.a> -lm -L${NETCDF}/lib CONFIGURE_NETCDFF_LIB -lnetcdf -lhdf5 -lhdf5_hl -lgfortran -lgcc -lz |g' $WRFHYDRO_FOLDER/RIP4/arch/preamble

	sed -i '31s|-L${NCARG_ROOT}/lib -lncarg -lncarg_gks -lncarg_c -lX11 -lXext -lpng -lz CONFIGURE_NCARG_LIB| -L${NCARG_ROOT}/lib -lncarg -lncarg_gks -lncarg_c -lX11 -lXext -lpng -lz -lcairo -lfontconfig -lpixman-1 -lfreetype -lexpat -lpthread -lbz2 -lXrender -lgfortran -lgcc -L</usr/lib/x86_64-linux-gnu/> -lm -lhdf5 -lhdf5_hl |g' $WRFHYDRO_FOLDER/RIP4/arch/preamble

	sed -i '33s| -O|-fallow-argument-mismatch -O |g' $WRFHYDRO_FOLDER/RIP4/arch/configure.defaults

	sed -i '35s|=|= -L$WRFHYDRO_FOLDER/LIBS/grib2/lib -lhdf5 -lhdf5_hl |g' $WRFHYDRO_FOLDER/RIP4/arch/configure.defaults

	if [ ${auto_config} -eq 1 ]; then
		echo 3 | ./configure #Option 3 gfortran compiler with distributed memory
	else
		./configure #Option 3 gfortran compiler with distributed memory
	fi

	./compile

	conda deactivate
	conda deactivate
	conda deactivate
	# IF statement to check that all files were created.
	cd $WRFHYDRO_FOLDER/RIP4
	n=$(find . -type l -ls | wc -l)
	if (($n == 12)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing RIP4. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files. Exiting the script."
		read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
		exit
	fi

	echo " "

	echo " "
	##################### WRF Python           ##################
	########### WRf-Python compiled via Conda  ##################
	########### This is the preferred method by NCAR      ##################
	##### https://wrf-python.readthedocs.io/en/latest/installation.html  ##################
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
conda env create -f $HOME/WRF-MOSIT/wrf-python-stable.yml

	######################### Climate Data Operators ############
	######################### CDO compiled via Conda ###########
	####################### This is the preferred method #######
	################### https://bairdlangenbrunner.github.io/python-for-climate-scientists/conda/setting-up-conda-environments.html #######################

	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda init bash
	conda activate base
	conda create --name cdo_stable -y
	source activate cdo_stable
	conda install -c conda-forge cdo -y
	conda update --all -y
	conda deactivate
	conda deactivate
	conda deactivate

	echo " "

	################################## QGIS #####################################
	#QGIS (Quantum Geographic Information System) is a free and open-source platform that allows users to
	#analyze, view, and edit geospatial data. It supports both vector and raster layers, as well as various #web services, and is extensible through community-developed plugins. Key features include map
	#creation, spatial analysis, and data management.
	#############################################################################

	conda env create -f $HOME/WRF-MOSIT/qgis.3.28.8.yml

	echo " "

	########################## WRF Hydro GIS PreProcessor ##############################
	#  Compiled with Conda
	#  https://github.com/NCAR/wrf_hydro_gis_preprocessor
	####################################################################################

	conda init bash
	conda activate base
	conda config --add channels conda-forge
	conda create -n wrfh_gis_env -c conda-forge python=3.10 gdal netCDF4 numpy pyproj whitebox=2.2.0 packaging shapely -y
	conda activate wrfh_gis_env
	conda update -n wrfh_gis_env --all -y
	conda deactivate
	conda deactivate
	conda deactivate
	cd $WRFHYDRO_FOLDER/
	git clone https://github.com/NCAR/wrf_hydro_gis_preprocessor.git $WRFHYDRO_FOLDER/WRF-Hydro-GIS-PreProcessor

	echo " "
	############################# WRF HYDRO V5.2.0 #################################
	# Version 5.2.0
	# Standalone mode
	################################################################################
	export NETCDF_INC=$DIR/NETCDF/include
	export NETCDF_LIB=$DIR/NETCDF/lib
	mkdir
	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://github.com/NCAR/wrf_hydro_nwm_public/archive/refs/tags/v5.2.0.tar.gz -O WRFHYDRO.5.2.tar.gz
	tar -xvzf WRFHYDRO.5.2.tar.gz -C $WRFHYDRO_FOLDER/Hydro-Basecode

	#Modifying WRF-HYDRO Environment
	#Echo commands use due to lack of knowledge
	cd $WRFHYDRO_FOLDER/Hydro-Basecode/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS/template

	sed -i 's/SPATIAL_SOIL=0/SPATIAL_SOIL=1/g' setEnvar.sh           # Spatially distributed parameters for NoahMP: 0=Off, 1=On.
	sed -i 's/WRF_HYDRO_NUDGING=0/WRF_HYDRO_NUDGING=1/g' setEnvar.sh # Streamflow nudging: 0=Off, 1=On.
	echo " " >>setEnvar.sh
	echo "# Large netcdf file support: 0=Off, 1=On." >>setEnvar.sh
	echo "export WRFIO_NCD_LARGE_FILE_SUPPORT=1" >>setEnvar.sh
	cp -r setEnvar.sh $WRFHYDRO_FOLDER/Hydro-Basecode/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS

	cd $WRFHYDRO_FOLDER/Hydro-Basecode/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS

	if [ ${auto_config} -eq 1 ]; then
		echo 2 | ./configure 2>&1 | tee configure.log
	else
		./configure 2>&1 | tee configure.log #option 2 for gfortran
	fi

	./compile_offline_NoahMP.sh setEnvar.sh 2>&1 | tee compile_offline_NoahMP.log

	read -r -t 5 -p "I am going to wait for 5 seconds only ..."
	echo " "
	############################ WRF ${WPS_VERSION}  #################################
	## WRF v${WPS_VERSION}
	## Downloaded from git tagged releases
	# option 34, option 1 for gfortran and distributed memory w/basic nesting
	# large file support enable with WRFiO_NCD_LARGE_FILE_SUPPORT=1
	# In the namelist.input, the following settings support pNetCDF by setting value to 11:
	# io_form_boundary
	# io_form_history
	# io_form_auxinput2
	# io_form_auxhist2
	# Note that you need set nocolons = .true. in the section &time_control of namelist.input
	########################################################################
	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://github.com/wrf-model/WRF/releases/download/v${WRF_VERSION}/v${WRF_VERSION}.tar.gz -O WRF-${WRF_VERSION}.tar.gz
	tar -xvzf WRF-${WRF_VERSION}.tar.gz -C $WRFHYDRO_FOLDER/

	# If statment for changing folder name
	if [ -d "$WRFHYDRO_FOLDER/WRF" ]; then
		mv -f $WRFHYDRO_FOLDER/WRF $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}
	fi

	cd $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}
	export WRFIO_NCD_LARGE_FILE_SUPPORT=1

	#Replace old version of WRF-Hydro distributed with WRF with updated WRF-Hydro source code
	rm -r $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/hydro/
	cp -r $WRFHYDRO_FOLDER/Hydro-Basecode/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/hydro

	cd $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/hydro
	source setEnvar.sh
	cd $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}

	./clean

	# SED statements to fix configure error
	sed -i '186s/==/=/g' $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/configure
	sed -i '318s/==/=/g' $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/configure
	sed -i '919s/==/=/g' $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/configure

	if [ ${auto_config} -eq 1 ]; then
		sed -i '443s/.*/  $response = "34 \\n";/g' $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/arch/Config.pl # Answer for compiler choice
		sed -i '909s/.*/  $response = "1 \\n";/g' $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/arch/Config.pl  #Answer for basic nesting
		./configure 2>&1 | tee configure.log
	else
		./configure 2>&1 | tee configure.log #Option 34 gfortran compiler with distributed memory option 1 for basic nesting
	fi

	./compile -j $CPU_HALF_EVEN em_real 2>&1 | tee compile.wrf1.log

	export WRF_DIR=$WRFHYDRO_FOLDER/WRFV${WRF_VERSION}

	# IF statement to check that all files were created.
	cd $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/main
	n=$(ls ./*.exe | wc -l)
	if (($n >= 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		cd $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}
		./compile -j $CPU_HALF_EVEN em_real 2>&1 | tee compile.wrf2.log
		cd $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/main
		n=$(ls ./*.exe | wc -l)
		if (($n >= 3)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "

	echo " "
	############################WPSV${WPS_VERSION}#####################################
	## WPS v${WPS_VERSION}
	## Downloaded from git tagged releases
	#Option 3 for gfortran and distributed memory
	########################################################################

	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://github.com/wrf-model/WPS/archive/refs/tags/v${WPS_VERSION}.tar.gz -O WPS-${WPS_VERSION}.tar.gz
	tar -xvzf WPS-${WPS_VERSION}.tar.gz -C $WRFHYDRO_FOLDER/
	cd $WRFHYDRO_FOLDER/WPS-${WPS_VERSION}
	./clean -a

	if [ ${auto_config} -eq 1 ]; then
		echo 3 | ./configure 2>&1 | tee configure.log #Option 3 for gfortran and distributed memory
	else
		./configure 2>&1 | tee configure.log #Option 3 gfortran compiler with distributed memory
	fi
	./compile 2>&1 | tee compile.wps.log

	echo " "
	# IF statement to check that all files were created.
	cd $WRFHYDRO_FOLDER/WPS-${WPS_VERSION}
	n=$(ls ./*.exe | wc -l)
	if (($n == 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		./compile 2>&1 | tee compile.wps2.log
		cd $WRFHYDRO_FOLDER/WPS-${WPS_VERSION}
		n=$(ls ./*.exe | wc -l)
		if (($n == 3)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "

	################## WPS Domain Setup Tools ########################
	## DomainWizard
	cd $WRFHYDRO_FOLDER/Downloads
	wget -c http://esrl.noaa.gov/gsd/wrfportal/domainwizard/WRFDomainWizard.zip
	mkdir $WRFHYDRO_FOLDER/WRFDomainWizard
	unzip WRFDomainWizard.zip -d $WRFHYDRO_FOLDER/WRFDomainWizard
	chmod +x $WRFHYDRO_FOLDER/WRFDomainWizard/run_DomainWizard

	echo " "
	######################## WPF Portal Setup Tools ########################
	## WRFPortal
	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://esrl.noaa.gov/gsd/wrfportal/portal/wrf-portal.zip
	mkdir $WRFHYDRO_FOLDER/WRFPortal
	unzip wrf-portal.zip -d $WRFHYDRO_FOLDER/WRFPortal
	chmod +x $WRFHYDRO_FOLDER/WRFPortal/runWRFPortal

	echo " "
	######################## Static Geography Data inc/ Optional ####################
	# http://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	# These files are large so if you only need certain ones comment the others off
	# All files downloaded and untarred is 200GB
	# https://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	#################################################################################
	cd $WRFHYDRO_FOLDER/Downloads
	mkdir $WRFHYDRO_FOLDER/GEOG
	mkdir $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

	echo " "
	echo "Mandatory WRF Preprocessing System (WPS) Geographical Input Data Mandatory Fields Downloads"
	echo " "
	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_high_res_mandatory.tar.gz
	tar -xvzf geog_high_res_mandatory.tar.gz -C $WRFHYDRO_FOLDER/GEOG/

	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_low_res_mandatory.tar.gz
	tar -xvzf geog_low_res_mandatory.tar.gz -C $WRFHYDRO_FOLDER/GEOG/
	mv $WRFHYDRO_FOLDER/GEOG/WPS_GEOG_LOW_RES/ $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

	if [ ${WPS_Specific_Applications} -eq 1 ]; then
		echo " "
		echo " WPS Geographical Input Data Mandatory for Specific Applications"
		echo " "
		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_thompson28_chem.tar.gz
		tar -xvzf geog_thompson28_chem.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_noahmp.tar.gz
		tar -xvzf geog_noahmp.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/irrigation.tar.gz
		tar -xvzf irrigation.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_px.tar.gz
		tar -xvzf geog_px.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_urban.tar.gz
		tar -xvzf geog_urban.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_ssib.tar.gz
		tar -xvzf geog_ssib.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/lake_depth.tar.bz2
		tar -xvf lake_depth.tar.bz2 -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/topobath_30s.tar.bz2
		tar -xvf topobath_30s.tar.bz2 -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/gsl_gwd.tar.bz2
		tar -xvf gsl_gwd.tar.bz2 -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG
	fi

	if [ ${Optional_GEOG} -eq 1 ]; then
		echo " "
		echo "Optional WPS Geographical Input Data"
		echo " "

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_older_than_2000.tar.gz
		tar -xvzf geog_older_than_2000.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s_with_lakes.tar.gz
		tar -xvzf modis_landuse_20class_15s_with_lakes.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_alt_lsm.tar.gz
		tar -xvzf geog_alt_lsm.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/nlcd2006_ll_9s.tar.bz2
		tar -xvf nlcd2006_ll_9s.tar.bz2 -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/updated_Iceland_LU.tar.gz
		tar -xvf updated_Iceland_LU.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s.tar.bz2
		tar -xvf modis_landuse_20class_15s.tar.bz2 -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

	fi

fi

if [ "$Ubuntu_64bit_Intel" = "1" ] && [ "$WRFHYDRO_COUPLED_PICK" = "1" ]; then

	############################# Basic package managment ############################

	echo $PASSWD | sudo -S apt -y update
	echo $PASSWD | sudo -S apt -y upgrade && sudo -S apt -y autoremove

	# download the key to system keyring; this and the following echo command are
	# needed in order to install the Intel compilers
	wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB |
		gpg --dearmor | sudo tee /usr/share/keyrings/oneapi-archive-keyring.gpg >/dev/null

	# add signed entry to apt sources and configure the APT client to use Intel repository:
	echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list

	# this update should get the Intel package info from the Intel repository
	echo $PASSWD | sudo -S apt -y update

	# necessary binary packages (especially pkg-config and build-essential)
	echo $PASSWD | sudo -S apt -y install autoconf automake bison build-essential byacc cmake csh curl default-jdk default-jre emacs flex g++ gawk gcc gfortran git ksh libcurl4-openssl-dev libjpeg-dev libncurses6 libpixman-1-dev libpng-dev libtool libxml2 libxml2-dev m4 make  ncview okular openbox pipenv pkg-config  python3 python3-dev python3-pip python3-dateutil tcsh unzip xauth xorg time

	# install the Intel compilers
	echo $PASSWD | sudo -S apt -y install intel-basekit
	echo $PASSWD | sudo -S apt -y install intel-hpckit
	echo $PASSWD | sudo -S apt -y install intel-oneapi-python

	echo $PASSWD | sudo -S apt -y update

	# make sure some critical packages have been installed
	which cmake pkg-config make gcc g++ gfortran

	# add the Intel compiler file paths to various environment variables
	source /opt/intel/oneapi/setvars.sh

	# some of the libraries we install below need one or more of these variables
	export CC=icc
	export CXX=icpc
	export FC=ifort
	export F77=ifort
	export F90=ifort
	export MPIFC=mpiifort
	export MPIF77=mpiifort
	export MPIF90=mpiifort
	export MPICC=mpiicc
	export MPICXX=mpiicpc
	export CFLAGS="-fPIC -fPIE -O3 -diag-disable=10441 "
	export FFLAGS="-m64"
	export FCFLAGS="-m64"
	############################# CPU Core Management ####################################

	export CPU_CORE=$(nproc) # number of available threads on system
	export CPU_6CORE="6"
	export CPU_HALF=$(($CPU_CORE / 2)) # half of availble cores on system
	# Forces CPU cores to even number to avoid partial core export. ie 7 cores would be 3.5 cores.
	export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))

	# If statement for low core systems.  Forces computers to only use 1 core if there are 4 cores or less on the system.
	if [ $CPU_CORE -le $CPU_6CORE ]; then
		export CPU_HALF_EVEN="2"
	else
		export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))
	fi

	echo "##########################################"
	echo "Number of Threads being used $CPU_HALF_EVEN"
	echo "##########################################"

	############################## Directory Listing ############################
	# makes necessary directories
	#
	############################################################################

	export HOME=$(
		cd
		pwd
	)
	export WRFHYDRO_FOLDER=$HOME/WRFHYDRO_COUPLED_Intel
	export DIR=$WRFHYDRO_FOLDER/Libs
	mkdir $WRFHYDRO_FOLDER
	cd $WRFHYDRO_FOLDER
	mkdir Downloads
	mkdir Libs
	mkdir Libs/grib2
	mkdir Libs/NETCDF
	mkdir Libs/MPICH

	mkdir -p Tests/Environment
	mkdir -p Tests/Compatibility

	echo " "
	############################## Downloading Libraries ############################

	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://github.com/madler/zlib/archive/refs/tags/v$Zlib_Version.tar.gz
	wget -c https://github.com/HDFGroup/hdf5/archive/refs/tags/hdf5-$HDF5_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-c/archive/refs/tags/v$Netcdf_C_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-fortran/archive/refs/tags/v$Netcdf_Fortran_Version.tar.gz
	wget -c https://download.sourceforge.net/libpng/libpng-$Libpng_Version.tar.gz
	wget -c https://www.ece.uvic.ca/~frodo/jasper/software/jasper-$Jasper_Version.zip
	wget -c https://parallel-netcdf.github.io/Release/pnetcdf-$Pnetcdf_Version.tar.gz
	wget -c https://sourceforge.net/projects/opengrads/files/grads2/2.2.1.oga.1/Linux%20%2864%20Bits%29/opengrads-2.2.1.oga.1-bundle-x86_64-pc-linux-gnu-glibc_2.17.tar.gz

	echo " "
	############################# ZLib ############################

	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf v$Zlib_Version.tar.gz
	cd zlib-$Zlib_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	# make check | tee zlib.makecheck.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log

	echo " "
	############################# LibPNG ############################

	cd $WRFHYDRO_FOLDER/Downloads

	# other libraries below need these variables to be set
	export LDFLAGS=-L$DIR/grib2/lib
	export CPPFLAGS=-I$DIR/grib2/include

	tar -xvzf libpng-$Libpng_Version.tar.gz
	cd libpng-$Libpng_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	#make -j $CPU_HALF_EVEN check | tee libpng.makecheck.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log

	echo " "
	############################# JasPer ############################

	cd $WRFHYDRO_FOLDER/Downloads
	unzip jasper-$Jasper_Version.zip
	cd jasper-$Jasper_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log

	# other libraries below need these variables to be set
	export JASPERLIB=$DIR/grib2/lib
	export JASPERINC=$DIR/grib2/include

	echo " "
	############################# HDF5 library for NetCDF4 & parallel functionality ############################

	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf hdf5-$HDF5_Version.tar.gz
	cd hdf5-hdf5-$HDF5_Version
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 --with-zlib=$DIR/grib2 --enable-hl --enable-fortran --enable-parallel 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log

	# other libraries below need these variables to be set
	export HDF5=$DIR/grib2
	export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH
	export PATH=$HDF5/bin:$PATH
	export PHDF5=$DIR/grib2

	echo " "

	#############################Install Parallel-netCDF##############################
	#Make file created with half of available cpu cores
	#Hard path for MPI added
	##################################################################################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf pnetcdf-$Pnetcdf_Version.tar.gz
	cd pnetcdf-$Pnetcdf_Version
	export CC=icc
	export CXX=icpc
	export FC=ifort
	export F77=ifort
	export F90=ifort
	export MPIFC=mpiifort
	export MPIF77=mpiifort
	export MPIF90=mpiifort
	export MPICC=mpiicc
	export MPICXX=mpiicpc
	export CFLAGS="-fPIC -fPIE -O3  -diag-disable=10441"
	export FFLAGS="-m64"
	export FCFLAGS="-m64"
	autoreconf -i -f 2>&1 | tee autoreconf.log
	./configure --prefix=$DIR/grib2 --enable-shared --enable-static 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PNETCDF=$DIR/grib2

	echo " "

	############################## Install NETCDF-C Library ############################

	cd $WRFHYDRO_FOLDER/Downloads
	tar -xzvf v$Netcdf_C_Version.tar.gz
	cd netcdf-c-$Netcdf_C_Version/

	# these variables need to be set for the NetCDF-C install to work
	export CPPFLAGS=-I$DIR/grib2/include
	export LDFLAGS=-L$DIR/grib2/lib
	export LIBS="-lhdf5_hl -lhdf5 -lz -lcurl -lm -ldl"

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --disable-dap --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-pnetcdf --enable-cdf5 --enable-parallel-tests 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log

	# other libraries below need these variables to be set
	export PATH=$DIR/NETCDF/bin:$PATH
	export NETCDF=$DIR/NETCDF

	echo " "
	############################## NetCDF-Fortran library ############################

	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf v$Netcdf_Fortran_Version.tar.gz
	cd netcdf-fortran-$Netcdf_Fortran_Version/

	# these variables need to be set for the NetCDF-Fortran install to work
	export LD_LIBRARY_PATH=$DIR/NETCDF/lib:$LD_LIBRARY_PATH
	export CPPFLAGS="-I$DIR/NETCDF/include -I$DIR/grib2/include"
	export LDFLAGS="-L$DIR/NETCDF/lib -L$DIR/grib2/lib"
	export LIBS="-lnetcdf -lpnetcdf -lcurl -lm -lcurl -lhdf5_hl -lhdf5 -lz -ldl"

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --enable-netcdf-4 --enable-netcdf4 --enable-parallel-tests --enable-hdf5 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log

	echo " "
	#################################### System Environment Tests ##############

	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_NETCDF_MPI_tests.tar
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_tests.tar

	tar -xvf Fortran_C_tests.tar -C $WRFHYDRO_FOLDER/Tests/Environment
	tar -xvf Fortran_C_NETCDF_MPI_tests.tar -C $WRFHYDRO_FOLDER/Tests/Compatibility

	export one="1"
	echo " "
	############## Testing Environment #####

	cd $WRFHYDRO_FOLDER/Tests/Environment

	echo " "
	echo " "
	echo "Environment Testing "
	echo "Test 1"
	$FC TEST_1_fortran_only_fixed.f
	./a.out | tee env_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 1 Passed"
	else
		echo "Environment Compiler Test 1 Failed"
		exit
	fi
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 2"
	$FC TEST_2_fortran_only_free.f90
	./a.out | tee env_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 2 Passed"
	else
		echo "Environment Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 3"
	$CC TEST_3_c_only.c
	./a.out | tee env_test3.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test3.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 3 Passed"
	else
		echo "Environment Compiler Test 3 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 4"
	$CC -c -m64 TEST_4_fortran+c_c.c
	$FC -c -m64 TEST_4_fortran+c_f.f90
	$FC -m64 TEST_4_fortran+c_f.o TEST_4_fortran+c_c.o
	./a.out | tee env_test4.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test4.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 4 Passed"
	else
		echo "Environment Compiler Test 4 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	############## Testing Environment #####

	cd $WRFHYDRO_FOLDER/Tests/Compatibility

	cp ${NETCDF}/include/netcdf.inc .

	echo " "
	echo " "
	echo "Library Compatibility Tests "
	echo "Test 1"
	$FC -c 01_fortran+c+netcdf_f.f
	$CC -c 01_fortran+c+netcdf_c.c
	$FC 01_fortran+c+netcdf_f.o 01_fortran+c+netcdf_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	./a.out | tee comp_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 1 Passed"
	else
		echo "Compatibility Compiler Test 1 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "

	echo "Test 2"
	$MPIFC -c 02_fortran+c+netcdf+mpi_f.f
	$MPICC -c 02_fortran+c+netcdf+mpi_c.c
	$MPIFC 02_fortran+c+netcdf+mpi_f.o \
		02_fortran+c+netcdf+mpi_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	mpirun ./a.out | tee comp_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 2 Passed"
	else
		echo "Compatibility Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."
	echo " "

	echo " All tests completed and passed"
	echo " "
	###############################NCEPlibs#####################################
	#The libraries are built and installed with
	# ./make_ncep_libs.sh -s MACHINE -c COMPILER -d NCEPLIBS_DIR -o OPENMP [-m mpi] [-a APPLICATION]
	#It is recommended to install the NCEPlibs into their own directory, which must be created before running the installer. Further information on the command line arguments can be obtained with
	# ./make_ncep_libs.sh -h

	#If iand error occurs go to https://github.com/NCAR/NCEPlibs/pull/16/files make adjustment and re-run ./make_ncep_libs.sh
	############################################################################

	cd $WRFHYDRO_FOLDER/Downloads
	git clone https://github.com/NCAR/NCEPlibs.git
	cd NCEPlibs
	mkdir $DIR/nceplibs

	export JASPER_INC=$DIR/grib2/include
	export PNG_INC=$DIR/grib2/include
	export NETCDF=$DIR/NETCDF

	if [ ${auto_config} -eq 1 ]; then
		echo yes | ./make_ncep_libs.sh -s linux -c intel -d $DIR/nceplibs -o 0 -m 1 -a upp
	else
		./make_ncep_libs.sh -s linux -c intel -d $DIR/nceplibs -o 0 -m 1 -a upp | tee make_nceplibs.log
	fi
	export PATH=$DIR/nceplibs:$PATH

	echo " "
	################################UPPv4.1######################################
	#Previous verison of UPP
	#WRF Support page recommends UPPV4.1 due to too many changes to WRF and UPP code
	#since the WRF was written
	#Option 4 gfortran compiler with distributed memory
	#############################################################################
	cd $WRFHYDRO_FOLDER
	git clone -b dtc_post_v4.1.0 --recurse-submodules https://github.com/NOAA-EMC/EMC_post UPPV4.1
	cd UPPV4.1
	mkdir postprd
	export NCEPLIBS_DIR=$DIR/nceplibs
	export NETCDF=$DIR/NETCDF

	if [ ${auto_config} -eq 1 ]; then
		echo 4 | ./configure #Option 4 intel compiler with distributed memory
	else
		./configure #Option 4 intel compiler with distributed memory
	fi

	sed -i '24s/ mpif90/ mpiifort/g' $WRFHYDRO_FOLDER/UPPV4.1/configure.upp
	sed -i '25s/ mpif90/ mpiifort/g' $WRFHYDRO_FOLDER/UPPV4.1/configure.upp
	sed -i '26s/ mpicc/ mpiicc/g' $WRFHYDRO_FOLDER/UPPV4.1/configure.upp

	./compile | tee upp_compile.log
	cd $WRFHYDRO_FOLDER/UPPV4.1/scripts
	echo $PASSWD | sudo -S cpan install XML::LibXML
	chmod +x run_unipost

	# IF statement to check that all files were created.
	cd $WRFHYDRO_FOLDER/UPPV4.1/exec
	n=$(ls ./*.exe | wc -l)
	if (($n == 1)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing UPPV4.1. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files. Exiting the script."
		read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
		exit
	fi

	echo " "

	######################## ARWpost V3.1  ############################
	## ARWpost
	##Configure #3
	###################################################################
	cd $WRFHYDRO_FOLDER/Downloads
	wget -c http://www2.mmm.ucar.edu/wrf/src/ARWpost_V3.tar.gz
	tar -xvzf ARWpost_V3.tar.gz -C $WRFHYDRO_FOLDER
	cd $WRFHYDRO_FOLDER/ARWpost
	./clean -a
	sed -i -e 's/-lnetcdf/-lnetcdff -lnetcdf/g' $WRFHYDRO_FOLDER/ARWpost/src/Makefile
	export NETCDF=$DIR/NETCDF

	if [ ${auto_config} -eq 1 ]; then
		echo 2 | ./configure #Option 2 intel compiler with distributed memory
	else
		./configure #Option 2 intel compiler with distributed memory
	fi

	sed -i -e 's/-C -P -traditional/-P -traditional/g' $WRFHYDRO_FOLDER/ARWpost/configure.arwp
	./compile

	export PATH=$WRFHYDRO_FOLDER/ARWpost/ARWpost.exe:$PATH

	echo " "
	################################OpenGrADS######################################
	#Verison 2.2.1 64bit of Linux
	#############################################################################
	if [[ $GRADS_PICK -eq 1 ]]; then

		cd $WRFHYDRO_FOLDER/Downloads
		tar -xzvf opengrads-2.2.1.oga.1-bundle-x86_64-pc-linux-gnu-glibc_2.17.tar.gz -C $WRFHYDRO_FOLDER/
		cd $WRFHYDRO_FOLDER/
		mv $WRFHYDRO_FOLDER/opengrads-2.2.1.oga.1 $WRFHYDRO_FOLDER/GrADS
		cd GrADS/Contents
		wget -c https://github.com/regisgrundig/SIMOP/blob/master/g2ctl.pl
		chmod +x g2ctl.pl
		wget -c https://sourceforge.net/projects/opengrads/files/wgrib2/0.1.9.4/wgrib2-v0.1.9.4-bin-x86_64-glibc2.5-linux-gnu.tar.gz
		tar -xzvf wgrib2-v0.1.9.4-bin-x86_64-glibc2.5-linux-gnu.tar.gz
		cd wgrib2-v0.1.9.4/bin
		mv wgrib2 $WRFHYDRO_FOLDER/GrADS/Contents
		cd $WRFHYDRO_FOLDER/GrADS/Contents
		rm wgrib2-v0.1.9.4-bin-x86_64-glibc2.5-linux-gnu.tar.gz
		rm -r wgrib2-v0.1.9.4

		export PATH=$WRFHYDRO_FOLDER/GrADS/Contents:$PATH

	fi

	################################## GrADS ###############################
	# Version  2.2.1
	# Sublibs library instructions: http://cola.gmu.edu/grads/gadoc/supplibs2.html
	# GrADS instructions: http://cola.gmu.edu/grads/downloads.php
	########################################################################
	if [[ $GRADS_PICK -eq 2 ]]; then

		echo $PASSWD | sudo -S apt -y install grads

	fi

	##################### NCAR COMMAND LANGUAGE           ##################
	########### NCL compiled via Conda                    ##################
	########### This is the preferred method by NCAR      ##################
	########### https://www.ncl.ucar.edu/index.shtml      ##################
	echo " "
	#Installing Miniconda3 to WRF directory and updating libraries
	pip install --upgrade --force-reinstall zstandard
	pip install --upgrade --force-reinstall zstd
	pip3 install --upgrade --force-reinstall zstandard
	pip3 install --upgrade --force-reinstall zstd
	export Miniconda_Install_DIR=$WRFHYDRO_FOLDER/miniconda3

	mkdir -p $Miniconda_Install_DIR

	wget -c https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $Miniconda_Install_DIR/miniconda.sh
	bash $Miniconda_Install_DIR/miniconda.sh -b -u -p $Miniconda_Install_DIR

	rm -rf $Miniconda_Install_DIR/miniconda.sh

	export PATH=$WRFHYDRO_FOLDER/miniconda3/bin:$PATH

	source $Miniconda_Install_DIR/etc/profile.d/conda.sh

	$Miniconda_Install_DIR/bin/conda init bash
	$Miniconda_Install_DIR/bin/conda init zsh
	$Miniconda_Install_DIR/bin/conda init tcsh
	$Miniconda_Install_DIR/bin/conda init xonsh
	$Miniconda_Install_DIR/bin/conda init powershell

	conda config --add channels conda-forge
	conda config --set auto_activate_base false
	conda update -n root --all -y

	#Special Thanks to @_WaylonWalker for code development

	echo " "
	#Installing NCL via Conda
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda init bash
	conda activate base
	conda create -n ncl_stable -c conda-forge ncl -y
	conda activate ncl_stable

	conda deactivate
	conda deactivate
	conda deactivate
	echo " "

	##################### WRF Python           ##################
	########### WRf-Python compiled via Conda  ##################
	########### This is the preferred method by NCAR      ##################
	##### https://wrf-python.readthedocs.io/en/latest/installation.html  ##################
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
conda env create -f $HOME/WRF-MOSIT/wrf-python-stable.yml

	######################### Climate Data Operators ############
	######################### CDO compiled via Conda ###########
	####################### This is the preferred method #######
	################### https://bairdlangenbrunner.github.io/python-for-climate-scientists/conda/setting-up-conda-environments.html #######################

	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda init bash
	conda activate base
	conda create --name cdo_stable -y
	source activate cdo_stable
	conda install -c conda-forge cdo -y
	conda update --all -y
	conda deactivate
	conda deactivate
	conda deactivate

	echo " "

	################################## QGIS #####################################
	#QGIS (Quantum Geographic Information System) is a free and open-source platform that allows users to
	#analyze, view, and edit geospatial data. It supports both vector and raster layers, as well as various #web services, and is extensible through community-developed plugins. Key features include map
	#creation, spatial analysis, and data management.
	#############################################################################

	conda env create -f $HOME/WRF-MOSIT/qgis.3.28.8.yml

	echo " "

	########################## WRF Hydro GIS PreProcessor ##############################
	#  Compiled with Conda
	#  https://github.com/NCAR/wrf_hydro_gis_preprocessor
	####################################################################################

	conda init bash
	conda activate base
	conda create -n wrfh_gis_env -c conda-forge python=3.10 gdal netCDF4 numpy pyproj whitebox=2.2.0 packaging shapely -y
	conda activate wrfh_gis_env
	conda update -n wrfh_gis_env --all -y
	conda deactivate
	conda deactivate
	conda deactivate
	cd $WRFHYDRO_FOLDER
	git clone https://github.com/NCAR/wrf_hydro_gis_preprocessor.git $WRFHYDRO_FOLDER/WRF-Hydro-GIS-PreProcessor

	echo " "

	############################# WRF HYDRO V5.2.0 #################################
	# Version 5.2.0
	# Standalone mode
	################################################################################
	export NETCDF_INC=$DIR/NETCDF/include
	export NETCDF_LIB=$DIR/NETCDF/lib
	mkdir $WRFHYDRO_FOLDER/Hydro-Basecode
	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://github.com/NCAR/wrf_hydro_nwm_public/archive/refs/tags/v5.2.0.tar.gz -O WRFHYDRO.5.2.tar.gz
	tar -xvzf WRFHYDRO.5.2.tar.gz -C $WRFHYDRO_FOLDER/Hydro-Basecode

	#Modifying WRF-HYDRO Environment
	#Echo commands use due to lack of knowledge
	cd $WRFHYDRO_FOLDER/Hydro-Basecode/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS/template

	sed -i 's/SPATIAL_SOIL=0/SPATIAL_SOIL=1/g' setEnvar.sh           # Spatially distributed parameters for NoahMP: 0=Off, 1=On.
	sed -i 's/WRF_HYDRO_NUDGING=0/WRF_HYDRO_NUDGING=1/g' setEnvar.sh # Streamflow nudging: 0=Off, 1=On.
	echo " " >>setEnvar.sh
	echo "# Large netcdf file support: 0=Off, 1=On." >>setEnvar.sh
	echo "export WRFIO_NCD_LARGE_FILE_SUPPORT=1" >>setEnvar.sh
	cp -r setEnvar.sh $WRFHYDRO_FOLDER/Hydro-Basecode/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS

	cd $WRFHYDRO_FOLDER/Hydro-Basecode/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS

	if [ ${auto_config} -eq 1 ]; then
		echo 3 | ./configure 2>&1 | tee configure.log
	else
		./configure 2>&1 | tee configure.log #Option 3 intel with distributed memory option 1 for basic nesting
	fi

	sed -i '63s/mpif90/mpiifort/g' $WRFHYDRO_FOLDER/Hydro-Basecode/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS/macros

	./compile_offline_NoahMP.sh setEnvar.sh 2>&1 | tee compile_offline_NoahMP.log

	# IF statement to check that all files were created.
	cd $WRFHYDRO_FOLDER/Hydro-Basecode/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS/Run

	n=$(ls ./*.exe | wc -l)
	if (($n == 2)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WRF Hydro Basecode. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files. Exiting the script."
		read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
		exit
	fi
	echo " "

	read -r -t 5 -p "I am going to wait for 5 seconds only ..."
	echo " "

	############################ WRF ${WPS_VERSION}  #################################
	## WRF v${WPS_VERSION}
	## Downloaded from git tagged releases
	# option 15, option 1 for intel and distributed memory w/basic nesting
	# large file support enable with WRFiO_NCD_LARGE_FILE_SUPPORT=1
	# In the namelist.input, the following settings support pNetCDF by setting  value to 11:
	# io_form_boundary
	# io_form_history
	# io_form_auxinput2
	# io_form_auxhist2
	# Note that you need set nocolons = .true. in the section &time_control of namelist.input
	########################################################################

	cd $WRFHYDRO_FOLDER/Downloads

	wget -c https://github.com/wrf-model/WRF/releases/download/v${WRF_VERSION}/v${WRF_VERSION}.tar.gz -O WRF-${WRF_VERSION}.tar.gz
	tar -xvzf WRF-${WRF_VERSION}.tar.gz -C $WRFHYDRO_FOLDER/

	# If statment for changing folder name
	if [ -d "$WRFHYDRO_FOLDER/WRF" ]; then
		mv -f $WRFHYDRO_FOLDER/WRF $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}
	fi

	cd $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}

	export WRFIO_NCD_LARGE_FILE_SUPPORT=1

	#Replace old version of WRF-Hydro distributed with WRF with updated WRF-Hydro source code
	rm -r $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/hydro/
	cp -r $WRFHYDRO_FOLDER/Hydro-Basecode/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/hydro

	cd $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/hydro
	source setEnvar.sh
	cd $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}

	./clean

	# SED statements to fix configure error
	sed -i '186s/==/=/g' $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/configure
	sed -i '318s/==/=/g' $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/configure
	sed -i '919s/==/=/g' $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/configure

	if [ ${auto_config} -eq 1 ]; then
		sed -i '443s/.*/  $response = "15 \\n";/g' $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/arch/Config.pl # Answer for compiler choice
		sed -i '909s/.*/  $response = "1 \\n";/g' $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/arch/Config.pl  #Answer for basic nesting
		./configure 2>&1 | tee configure.log
	else
		./configure 2>&1 | tee configure.log #Option 15 intel compiler with distributed memory option 1 for basic nesting
	fi

	sed -i '63s/mpif90/mpiifort/g' $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/hydro/macros
	#Need to remove mpich/GNU config calls to Intel config calls
	sed -i '169s|mpif90 -f90=$(SFC)|mpiifort|g' $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/configure.wrf
	sed -i '170s|mpicc -cc=$(SCC)|mpiicc|g' $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/configure.wrf
	sed -i '177s|-w -O3|-diag-disable=10441 -w -O3|g' $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/configure.wrf
	./compile -j $CPU_HALF_EVEN em_real 2>&1 | tee compile.wrf1.log

	export WRF_DIR=$WRFHYDRO_FOLDER/WRFV${WRF_VERSION}

	# IF statement to check that all files were created.
	cd $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/main
	n=$(ls ./*.exe | wc -l)
	if (($n >= 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		cd $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}
		./compile -j $CPU_HALF_EVEN em_real 2>&1 | tee compile.wrf2.log
		cd $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/main
		n=$(ls ./*.exe | wc -l)
		if (($n >= 3)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "

	echo " "

	############################WPSV${WPS_VERSION}#####################################
	## WPS v${WPS_VERSION}
	## Downloaded from git tagged releases
	#Option 3 for gfortran and distributed memory
	########################################################################

	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://github.com/wrf-model/WPS/archive/refs/tags/v${WPS_VERSION}.tar.gz -O WPS-${WPS_VERSION}.tar.gz
	tar -xvzf WPS-${WPS_VERSION}.tar.gz -C $WRFHYDRO_FOLDER/
	cd $WRFHYDRO_FOLDER/WPS-${WPS_VERSION}
	./clean -a

	if [ ${auto_config} -eq 1 ]; then
		echo 19 | ./configure 2>&1 | tee configure.log #Option 19 for intel and distributed memory
	else
		./configure 2>&1 | tee configure.log #Option 19 intel compiler with distributed memory
	fi

	sed -i '67s|mpif90|mpiifort|g' $WRFHYDRO_FOLDER/WPS-${WPS_VERSION}/configure.wps
	sed -i '68s|mpicc|mpiicc|g' $WRFHYDRO_FOLDER/WPS-${WPS_VERSION}/configure.wps

	./compile 2>&1 | tee compile.wps.log

	echo " "
	# IF statement to check that all files were created.
	cd $WRFHYDRO_FOLDER/WPS-${WPS_VERSION}
	n=$(ls ./*.exe | wc -l)
	if (($n == 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		./compile 2>&1 | tee compile.wps2.log
		cd $WRFHYDRO_FOLDER/WPS-${WPS_VERSION}
		n=$(ls ./*.exe | wc -l)
		if (($n == 3)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "

	######################## WPS Domain Setup Tools ########################
	## DomainWizard
	cd $WRFHYDRO_FOLDER/Downloads
	wget -c http://esrl.noaa.gov/gsd/wrfportal/domainwizard/WRFDomainWizard.zip
	mkdir $WRFHYDRO_FOLDER/WRFDomainWizard
	unzip WRFDomainWizard.zip -d $WRFHYDRO_FOLDER/WRFDomainWizard
	chmod +x $WRFHYDRO_FOLDER/WRFDomainWizard/run_DomainWizard

	echo " "
	######################## WPF Portal Setup Tools ########################
	## WRFPortal
	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://esrl.noaa.gov/gsd/wrfportal/portal/wrf-portal.zip
	mkdir $WRFHYDRO_FOLDER/WRFPortal
	unzip wrf-portal.zip -d $WRFHYDRO_FOLDER/WRFPortal
	chmod +x $WRFHYDRO_FOLDER/WRFPortal/runWRFPortal

	echo " "

	######################## Static Geography Data inc/ Optional ####################
	# http://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	# These files are large so if you only need certain ones comment the others off
	# All files downloaded and untarred is 200GB
	# https://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	#################################################################################
	cd $WRFHYDRO_FOLDER/Downloads
	mkdir $WRFHYDRO_FOLDER/GEOG
	mkdir $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

	echo " "
	echo "Mandatory WRF Preprocessing System (WPS) Geographical Input Data Mandatory Fields Downloads"
	echo " "
	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_high_res_mandatory.tar.gz
	tar -xvzf geog_high_res_mandatory.tar.gz -C $WRFHYDRO_FOLDER/GEOG/

	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_low_res_mandatory.tar.gz
	tar -xvzf geog_low_res_mandatory.tar.gz -C $WRFHYDRO_FOLDER/GEOG/
	mv $WRFHYDRO_FOLDER/GEOG/WPS_GEOG_LOW_RES/ $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

	if [ ${WPS_Specific_Applications} -eq 1 ]; then
		echo " "
		echo " WPS Geographical Input Data Mandatory for Specific Applications"
		echo " "

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_thompson28_chem.tar.gz
		tar -xvzf geog_thompson28_chem.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_noahmp.tar.gz
		tar -xvzf geog_noahmp.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/irrigation.tar.gz
		tar -xvzf irrigation.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_px.tar.gz
		tar -xvzf geog_px.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_urban.tar.gz
		tar -xvzf geog_urban.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_ssib.tar.gz
		tar -xvzf geog_ssib.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/lake_depth.tar.bz2
		tar -xvf lake_depth.tar.bz2 -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/topobath_30s.tar.bz2
		tar -xvf topobath_30s.tar.bz2 -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/gsl_gwd.tar.bz2
		tar -xvf gsl_gwd.tar.bz2 -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG
	fi

	if [ ${Optional_GEOG} -eq 1 ]; then
		echo " "
		echo "Optional WPS Geographical Input Data"
		echo " "

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_older_than_2000.tar.gz
		tar -xvzf geog_older_than_2000.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s_with_lakes.tar.gz
		tar -xvzf modis_landuse_20class_15s_with_lakes.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_alt_lsm.tar.gz
		tar -xvzf geog_alt_lsm.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/nlcd2006_ll_9s.tar.bz2
		tar -xvf nlcd2006_ll_9s.tar.bz2 -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/updated_Iceland_LU.tar.gz
		tar -xvf updated_Iceland_LU.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s.tar.bz2
		tar -xvf modis_landuse_20class_15s.tar.bz2 -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG
	fi

fi

if [ "$macos_64bit_GNU" = "1" ] && [ "$WRFHYDRO_COUPLED_PICK" = "1" ] && [ "$MAC_CHIP" = "Intel" ]; then

	#############################basic package managment############################

sleep 1
brew install autoconf
sleep 1
brew install bison
sleep 1
brew install byacc
sleep 1
brew install cmake
sleep 1
brew install curl
sleep 1
brew install flex
sleep 1
brew install gdal
sleep 1
brew install gedit
sleep 1
brew install git
sleep 1
brew install gnu-sed
sleep 1
brew install imagemagick
sleep 1
brew install java
sleep 1
brew install ksh
sleep 1
brew install libtool
sleep 1
brew install m4
sleep 1
brew install make
sleep 1
brew install python@3.10
sleep 1
brew install tcsh
sleep 1
brew install wget
sleep 1
brew install xauth
sleep 1
brew install xorgproto
sleep 1
brew install xorgrgb
sleep 1
brew install xquartz

export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
export PATH=/usr/local/bin:$PATH

	##############################Directory Listing############################

	export HOME=$(
		cd
		pwd
	)
	mkdir $HOME/WRFHYDRO_COUPLED
	export WRFHYDRO_FOLDER=$HOME/WRFHYDRO_COUPLED
	cd $WRFHYDRO_FOLDER/
	mkdir Downloads
	mkdir $WRFHYDRO_FOLDER/Hydro-Basecode
	mkdir Libs
	export DIR=$WRFHYDRO_FOLDER/Libs
	mkdir Libs/grib2
	mkdir Libs/NETCDF
	mkdir Libs/MPICH
	mkdir -p Tests/Environment
	mkdir -p Tests/Compatibility

	echo " "

	#############################Core Management####################################
	export CPU_CORE=$(sysctl -n hw.ncpu) # number of available threads on system
	export CPU_6CORE="6"
	export CPU_HALF=$(($CPU_CORE / 2))
	#1/2 of availble cores on system
	export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))
	#Forces CPU cores to even number to avoid partial core export. ie 7 cores would be 3.5 cores.

	if [ $CPU_CORE -le $CPU_6CORE ]; then #If statement for low core systems.  Forces computers to only use 1 core if there are 4 cores or less on the system.
		export CPU_HALF_EVEN="2"
	else
		export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))
	fi

	echo "##########################################"
	echo "Number of Threads being used $CPU_HALF_EVEN"
	echo "##########################################"
	echo " "

	##############################Downloading Libraries############################

	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://github.com/madler/zlib/archive/refs/tags/v$Zlib_Version.tar.gz
	wget -c https://github.com/HDFGroup/hdf5/archive/refs/tags/hdf5-$HDF5_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-c/archive/refs/tags/v$Netcdf_C_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-fortran/archive/refs/tags/v$Netcdf_Fortran_Version.tar.gz
	wget -c https://download.sourceforge.net/libpng/libpng-$Libpng_Version.tar.gz
	wget -c https://www.ece.uvic.ca/~frodo/jasper/software/jasper-$Jasper_Version.zip
	wget -c https://github.com/pmodels/mpich/releases/download/v$Mpich_Version/mpich-$Mpich_Version.tar.gz
	wget -c https://parallel-netcdf.github.io/Release/pnetcdf-$Pnetcdf_Version.tar.gz


	echo " "

	#############################Compilers############################

	#Symlink to avoid clang conflicts with compilers
	#default gcc path /usr/bin/gcc
	#default homebrew path /usr/local/bin

	echo $PASSWD | sudo -S ln -sf /usr/local/bin/gcc-12 /usr/local/bin/gcc
	echo $PASSWD | sudo -S ln -sf /usr/local/bin/g++-12 /usr/local/bin/g++
	echo $PASSWD | sudo -S ln -sf /usr/local/bin/gfortran-12 /usr/local/bin/gfortran
	echo $PASSWD | sudo -S ln -sf /usr/local/bin/python3.10 /usr/local/bin/python3

	export CC=gcc
	export CXX=g++
	export FC=gfortran
	export F77=gfortran
	export CFLAGS="-fPIC -fPIE -Wno-implicit-function-declaration -Wall"

	echo " "

	#IF statement for GNU compiler issue
	export GCC_VERSION=$(gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		export fallow_argument=-fallow-argument-mismatch
		export boz_argument=-fallow-invalid-boz
	else
		export fallow_argument=
		export boz_argument=
	fi

	export FFLAGS="$fallow_argument -m64"
	export FCFLAGS="$fallow_argument -m64"

	echo "##########################################"
	echo "FFLAGS = $FFLAGS"
	echo "FCFLAGS = $FCFLAGS"
	echo "CFLAGS = $CFLAGS"
	echo "##########################################"

	echo " "

	#############################zlib############################
	#Uncalling compilers due to comfigure issue with zlib1.2.12
	#With CC & CXX definied ./configure uses different compiler Flags

	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf v$Zlib_Version.tar.gz
	cd zlib-$Zlib_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log
	./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "

	##############################MPICH############################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf mpich-$Mpich_Version.tar.gz
	cd mpich-$Mpich_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	F90= ./configure --prefix=$DIR/MPICH --with-device=ch3 FFLAGS="$fallow_argument -m64" FCFLAGS="$fallow_argument -m64" 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PATH=$DIR/MPICH/bin:$PATH
	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx

	echo " "

	#############################libpng############################
	cd $WRFHYDRO_FOLDER/Downloads
	export LDFLAGS=-L$DIR/grib2/lib
	export CPPFLAGS=-I$DIR/grib2/include
	tar -xvzf libpng-$Libpng_Version.tar.gz
	cd libpng-$Libpng_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check
	#make check

	echo " "
	#############################JasPer############################

	cd $WRFHYDRO_FOLDER/Downloads
	unzip jasper-$Jasper_Version.zip
	cd jasper-$Jasper_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	export JASPERLIB=$DIR/grib2/lib
	export JASPERINC=$DIR/grib2/include

	echo " "
	#############################hdf5 library for netcdf4 functionality############################

	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf hdf5-$HDF5_Version.tar.gz
	cd hdf5-hdf5-$HDF5_Version
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 --with-zlib=$DIR/grib2 --enable-hl --enable-fortran --enable-parallel 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export HDF5=$DIR/grib2
	export PHDF5=$DIR/grib2
	export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH

	echo " "

	#############################Install Parallel-netCDF##############################
	#Make file created with half of available cpu cores
	#Hard path for MPI added
	##################################################################################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf pnetcdf-$Pnetcdf_Version.tar.gz
	cd pnetcdf-$Pnetcdf_Version
	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx
	autoreconf -i -f 2>&1 | tee autoreconf.log
	./configure --prefix=$DIR/grib2 --enable-shared --enable-static 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PNETCDF=$DIR/grib2

	echo " "

	##############################Install NETCDF C Library############################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xzvf v$Netcdf_C_Version.tar.gz
	cd netcdf-c-$Netcdf_C_Version/
	export CPPFLAGS=-I$DIR/grib2/include
	export LDFLAGS=-L$DIR/grib2/lib
	export LIBS="-lhdf5_hl -lhdf5 -lz -lcurl -lgfortran -lgcc -lm -ldl -lpnetcdf"
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --disable-dap --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-pnetcdf --enable-cdf5 --enable-parallel-tests 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PATH=$DIR/NETCDF/bin:$PATH
	export NETCDF=$DIR/NETCDF
	echo " "

	##############################NetCDF fortran library############################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf v$Netcdf_Fortran_Version.tar.gz
	cd netcdf-fortran-$Netcdf_Fortran_Version/
	export LD_LIBRARY_PATH=$DIR/NETCDF/lib:$LD_LIBRARY_PATH
	export CPPFLAGS="-I$DIR/NETCDF/include -I$DIR/grib2/include"
	export LDFLAGS="-L$DIR/NETCDF/lib -L$DIR/grib2/lib"
	export LIBS="-lnetcdf -lpnetcdf -lcurl -lhdf5_hl -lhdf5 -lz -lm -ldl -lgcc -lgfortran"
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-parallel-tests --enable-hdf5 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "
	#################################### System Environment Tests ##############
	mkdir -p $WRFHYDRO_FOLDER/Tests/Environment
	mkdir -p $WRFHYDRO_FOLDER/Tests/Compatibility

	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_NETCDF_MPI_tests.tar
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_tests.tar

	tar -xvf Fortran_C_tests.tar -C $WRFHYDRO_FOLDER/Tests/Environment
	tar -xvf Fortran_C_NETCDF_MPI_tests.tar -C $WRFHYDRO_FOLDER/Tests/Compatibility
	export one="1"
	echo " "
	############## Testing Environment #####

	cd $WRFHYDRO_FOLDER/Tests/Environment

	echo " "
	echo " "
	echo "Environment Testing "
	echo "Test 1"
	$FC TEST_1_fortran_only_fixed.f
	./a.out | tee env_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 1 Passed"
	else
		echo "Environment Compiler Test 1 Failed"
		exit
	fi
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 2"
	$FC TEST_2_fortran_only_free.f90
	./a.out | tee env_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 2 Passed"
	else
		echo "Environment Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 3"
	$CC TEST_3_c_only.c
	./a.out | tee env_test3.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test3.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 3 Passed"
	else
		echo "Environment Compiler Test 3 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 4"
	$CC -c -m64 TEST_4_fortran+c_c.c
	$FC -c -m64 TEST_4_fortran+c_f.f90
	$FC -m64 TEST_4_fortran+c_f.o TEST_4_fortran+c_c.o
	./a.out | tee env_test4.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test4.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 4 Passed"
	else
		echo "Environment Compiler Test 4 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	############## Testing Environment #####

	cd $WRFHYDRO_FOLDER/Tests/Compatibility

	cp ${NETCDF}/include/netcdf.inc .

	echo " "
	echo " "
	echo "Library Compatibility Tests "
	echo "Test 1"
	$FC -c 01_fortran+c+netcdf_f.f
	$CC -c 01_fortran+c+netcdf_c.c
	$FC 01_fortran+c+netcdf_f.o 01_fortran+c+netcdf_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	./a.out | tee comp_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 1 Passed"
	else
		echo "Compatibility Compiler Test 1 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "

	echo "Test 2"
	$MPIFC -c 02_fortran+c+netcdf+mpi_f.f
	$MPICC -c 02_fortran+c+netcdf+mpi_c.c
	$MPIFC 02_fortran+c+netcdf+mpi_f.o \
		02_fortran+c+netcdf+mpi_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	$DIR/MPICH/bin/mpirun ./a.out | tee comp_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 2 Passed"
	else
		echo "Compatibility Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."
	echo " "

	echo " All tests completed and passed"
	echo " "

	#Installing Miniconda3 to WRF directory and updating libraries
	pip install --upgrade --force-reinstall zstandard
	pip install --upgrade --force-reinstall zstd
	pip3 install --upgrade --force-reinstall zstandard
	pip3 install --upgrade --force-reinstall zstd
	export Miniconda_Install_DIR=$WRFHYDRO_FOLDER/miniconda3

	mkdir -p $Miniconda_Install_DIR

	wget -c https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O $Miniconda_Install_DIR/miniconda.sh
	bash $Miniconda_Install_DIR/miniconda.sh -b -u -p $Miniconda_Install_DIR

	rm -rf $Miniconda_Install_DIR/miniconda.sh

	export PATH=$WRFHYDRO_FOLDER/miniconda3/bin:$PATH

	source $Miniconda_Install_DIR/etc/profile.d/conda.sh

	$Miniconda_Install_DIR/bin/conda init bash
	$Miniconda_Install_DIR/bin/conda init zsh
	$Miniconda_Install_DIR/bin/conda init tcsh
	$Miniconda_Install_DIR/bin/conda init xonsh
	$Miniconda_Install_DIR/bin/conda init powershell

	conda config --add channels conda-forge
	conda config --set auto_activate_base false
	conda update -n root --all -y

	echo " "

	#Installing NCL via Conda
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda init bash
	conda activate base
	conda create -n ncl_stable -c conda-forge ncl -y
	conda activate ncl_stable

	conda deactivate
	conda deactivate
	conda deactivate
	echo " "

	##################### WRF Python           ##################
	########### WRf-Python compiled via Conda  ##################
	########### This is the preferred method by NCAR      ##################
	##### https://wrf-python.readthedocs.io/en/latest/installation.html  ##################
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
conda env create -f $HOME/WRF-MOSIT/wrf-python-stable.yml

	######################### Climate Data Operators ############
	######################### CDO compiled via Conda ###########
	####################### This is the preferred method #######
	################### https://bairdlangenbrunner.github.io/python-for-climate-scientists/conda/setting-up-conda-environments.html #######################

	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda init bash
	conda activate base
	conda create --name cdo_stable -y
	source activate cdo_stable
	conda install -c conda-forge cdo -y
	conda update --all -y
	conda deactivate
	conda deactivate
	conda deactivate

	echo " "

	################################## QGIS #####################################
	#QGIS (Quantum Geographic Information System) is a free and open-source platform that allows users to
	#analyze, view, and edit geospatial data. It supports both vector and raster layers, as well as various #web services, and is extensible through community-developed plugins. Key features include map
	#creation, spatial analysis, and data management.
	#############################################################################

	conda env create -f $HOME/WRF-MOSIT/qgis.3.28.8.yml

	echo " "

	########################## WRF Hydro GIS PreProcessor ##############################
	#  Compiled with Conda
	#  https://github.com/NCAR/wrf_hydro_gis_preprocessor
	####################################################################################

	conda init bash
	conda activate base
	conda config --add channels conda-forge
	conda create -n wrfh_gis_env -c conda-forge python=3.10 gdal netCDF4 numpy pyproj whitebox=2.2.0 packaging shapely -y
	conda activate wrfh_gis_env
	conda update -n wrfh_gis_env --all -y
	conda deactivate
	conda deactivate
	conda deactivate

	cd $WRFHYDRO_FOLDER/
	git clone https://github.com/NCAR/wrf_hydro_gis_preprocessor.git $WRFHYDRO_FOLDER/WRF-Hydro-GIS-PreProcessor
	echo " "

	############################# WRF HYDRO V5.2.0 #################################
	# Version 5.2.0
	# Standalone mode
	################################################################################
	export NETCDF_INC=$DIR/NETCDF/include
	export NETCDF_LIB=$DIR/NETCDF/lib

	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://github.com/NCAR/wrf_hydro_nwm_public/archive/refs/tags/v5.2.0.tar.gz -O WRFHYDRO.5.2.tar.gz
	tar -xvzf WRFHYDRO.5.2.tar.gz -C $WRFHYDRO_FOLDER/Hydro-Basecode

	#Modifying WRF-HYDRO Environment
	#Echo commands use due to lack of knowledge
	cd $WRFHYDRO_FOLDER/Hydro-Basecode/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS/template

	sed -i'' -e 's/SPATIAL_SOIL=0/SPATIAL_SOIL=1/g' setEnvar.sh           # Spatially distributed parameters for NoahMP: 0=Off, 1=On.
	sed -i'' -e 's/WRF_HYDRO_NUDGING=0/WRF_HYDRO_NUDGING=1/g' setEnvar.sh # Streamflow nudging: 0=Off, 1=On.
	echo " " >>setEnvar.sh
	echo "# Large netcdf file support: 0=Off, 1=On." >>setEnvar.sh
	echo "export WRFIO_NCD_LARGE_FILE_SUPPORT=1" >>setEnvar.sh
	cp -r setEnvar.sh $WRFHYDRO_FOLDER/Hydro-Basecode/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS

	cd $WRFHYDRO_FOLDER/Hydro-Basecode/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS

	echo 2 | ./configure 2>&1 | tee configure.log # Option 2

	./compile_offline_NoahMP.sh setEnvar.sh 2>&1 | tee compile_offline_NoahMP.log

	ls -lah RUN/*.exe #Test to see if .exe files have compiled

	echo " "
	############################ WRF ${WPS_VERSION}  #################################
	## WRF v${WPS_VERSION}
	## Downloaded from git tagged releases
	# option 21, option 1 for gfortran and distributed memory w/basic nesting
	# large file support enable with WRFiO_NCD_LARGE_FILE_SUPPORT=1
	########################################################################

	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://github.com/wrf-model/WRF/releases/download/v${WRF_VERSION}/v${WRF_VERSION}.tar.gz -O WRF-${WRF_VERSION}.tar.gz
	tar -xvzf WRF-${WRF_VERSION}.tar.gz -C $WRFHYDRO_FOLDER/

	# If statment for changing folder name
	if [ -d "$WRFHYDRO_FOLDER/WRF" ]; then
		mv -f $WRFHYDRO_FOLDER/WRF $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}
	fi

	cd $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}
	export WRFIO_NCD_LARGE_FILE_SUPPORT=1

	#Replace old version of WRF-Hydro distributed with WRF with updated WRF-Hydro source code
	rm -r $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/hydro/
	cp -r $WRFHYDRO_FOLDER/Hydro-Basecode/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/hydro

	cd $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/hydro
	source setEnvar.sh
	cd $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}

	./clean

	if [ ${auto_config} -eq 1 ]; then
		sed -i'' -e '443s/.*/  $response = "17 \\n";/g' $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/arch/Config.pl # Answer for compiler choice
		sed -i'' -e '909s/.*/  $response = "1 \\n";/g' $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/arch/Config.pl  #Answer for basic nesting
		./configure 2>&1 | tee configure.log
	else
		./configure 2>&1 | tee configure.log #Option 17 gfortran compiler with distributed memory option 1 for basic nesting
	fi

	sed -i'' -e '145s/-c/-c -fPIC -fPIE -O3  -Wno-error=implicit-function-declaration/g' configure.wrf

	./compile em_real 2>&1 | tee compile.wrf.log

	export WRF_DIR=$WRFHYDRO_FOLDER/WRFV${WRF_VERSION}

	# IF statement to check that all files were created.
	cd $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/main
	n=$(ls ./*.exe | wc -l)
	if (($n >= 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		cd $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}
		./compile -j $CPU_HALF_EVEN em_real 2>&1 | tee compile.wrf2.log
		cd $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/main
		n=$(ls ./*.exe | wc -l)
		if (($n >= 3)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "

	echo " "

	############################WPSV${WPS_VERSION}#####################################
	## WPS v${WPS_VERSION}
	## Downloaded from git tagged releases
	#Option 3 for gfortran and distributed memory
	########################################################################

	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://github.com/wrf-model/WPS/archive/refs/tags/v${WPS_VERSION}.tar.gz -O WPS-${WPS_VERSION}.tar.gz
	tar -xvzf WPS-${WPS_VERSION}.tar.gz -C $WRFHYDRO_FOLDER/
	cd $WRFHYDRO_FOLDER/WPS-${WPS_VERSION}
	./clean -a

	if [ ${auto_config} -eq 1 ]; then
		echo 19 | ./configure 2>&1 | tee configure.log #Option 19 for gfortran and distributed memory
	else
		./configure 2>&1 | tee configure.log #Option 19 gfortran compiler with distributed memory
	fi
	./compile 2>&1 | tee compile.wps.log

	# IF statement to check that all files were created.
	cd $WRFHYDRO_FOLDER/WPS-${WPS_VERSION}
	n=$(ls ./*.exe | wc -l)
	if (($n == 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		./compile 2>&1 | tee compile.wps2.log
		cd $WRFHYDRO_FOLDER/WPS-${WPS_VERSION}
		n=$(ls ./*.exe | wc -l)
		if (($n == 3)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "

	######################## WPS Domain Setup Tools ########################
	## DomainWizard

	cd $WRFHYDRO_FOLDER/Downloads
	wget http://esrl.noaa.gov/gsd/wrfportal/domainwizard/WRFDomainWizard.zip
	mkdir $WRFHYDRO_FOLDER/WRFDomainWizard
	unzip WRFDomainWizard.zip -d $WRFHYDRO_FOLDER/WRFDomainWizard
	chmod +x $WRFHYDRO_FOLDER/WRFDomainWizard/run_DomainWizard

	echo " "
	######################## WPF Portal Setup Tools ########################
	## WRFPortal
	cd $WRFHYDRO_FOLDER/Downloads
	wget https://esrl.noaa.gov/gsd/wrfportal/portal/wrf-portal.zip
	mkdir $WRFHYDRO_FOLDER/WRFPortal
	unzip wrf-portal.zip -d $WRFHYDRO_FOLDER/WRFPortal
	chmod +x $WRFHYDRO_FOLDER/WRFPortal/runWRFPortal

	echo " "
	######################## Static Geography Data inc/ Optional ####################
	# http://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	# These files are large so if you only need certain ones comment the others off
	# All files downloaded and untarred is 200GB
	# https://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	#################################################################################
	cd $WRFHYDRO_FOLDER/Downloads
	mkdir $WRFHYDRO_FOLDER/GEOG
	mkdir $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

	echo " "
	echo "Mandatory WRF Preprocessing System (WPS) Geographical Input Data Mandatory Fields Downloads"
	echo " "
	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_high_res_mandatory.tar.gz
	tar -xvzf geog_high_res_mandatory.tar.gz -C $WRFHYDRO_FOLDER/GEOG/

	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_low_res_mandatory.tar.gz
	tar -xvzf geog_low_res_mandatory.tar.gz -C $WRFHYDRO_FOLDER/GEOG/
	mv $WRFHYDRO_FOLDER/GEOG/WPS_GEOG_LOW_RES/ $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

	if [ ${WPS_Specific_Applications} -eq 1 ]; then
		echo " "
		echo " WPS Geographical Input Data Mandatory for Specific Applications"
		echo " "

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_thompson28_chem.tar.gz
		tar -xvzf geog_thompson28_chem.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_noahmp.tar.gz
		tar -xvzf geog_noahmp.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/irrigation.tar.gz
		tar -xvzf irrigation.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_px.tar.gz
		tar -xvzf geog_px.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_urban.tar.gz
		tar -xvzf geog_urban.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_ssib.tar.gz
		tar -xvzf geog_ssib.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/lake_depth.tar.bz2
		tar -xvf lake_depth.tar.bz2 -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/topobath_30s.tar.bz2
		tar -xvf topobath_30s.tar.bz2 -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/gsl_gwd.tar.bz2
		tar -xvf gsl_gwd.tar.bz2 -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG
	fi

	if [ ${Optional_GEOG} -eq 1 ]; then
		echo " "
		echo "Optional WPS Geographical Input Data"
		echo " "

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_older_than_2000.tar.gz
		tar -xvzf geog_older_than_2000.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s_with_lakes.tar.gz
		tar -xvzf modis_landuse_20class_15s_with_lakes.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_alt_lsm.tar.gz
		tar -xvzf geog_alt_lsm.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/nlcd2006_ll_9s.tar.bz2
		tar -xvf nlcd2006_ll_9s.tar.bz2 -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/updated_Iceland_LU.tar.gz
		tar -xvf updated_Iceland_LU.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s.tar.bz2
		tar -xvf modis_landuse_20class_15s.tar.bz2 -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG
	fi

fi

if [ "$macos_64bit_GNU" = "1" ] && [ "$WRFHYDRO_COUPLED_PICK" = "1" ] && [ "$MAC_CHIP" = "ARM" ]; then

	#############################basic package managment############################

sleep 1
brew install autoconf
sleep 1
brew install bison
sleep 1
brew install byacc
sleep 1
brew install cmake
sleep 1
brew install curl
sleep 1
brew install flex
sleep 1
brew install gdal
sleep 1
brew install gedit
sleep 1
brew install git
sleep 1
brew install gnu-sed
sleep 1
brew install imagemagick
sleep 1
brew install java
sleep 1
brew install ksh
sleep 1
brew install libtool
sleep 1
brew install m4
sleep 1
brew install make
sleep 1
brew install python@3.10
sleep 1
brew install tcsh
sleep 1
brew install wget
sleep 1
brew install xauth
sleep 1
brew install xorgproto
sleep 1
brew install xorgrgb
sleep 1
brew install xquartz

export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
export PATH=/usr/local/bin:$PATH

	##############################Directory Listing############################

	export HOME=$(
		cd
		pwd
	)
	mkdir $HOME/WRFHYDRO_COUPLED
	export WRFHYDRO_FOLDER=$HOME/WRFHYDRO_COUPLED
	cd $WRFHYDRO_FOLDER/
	mkdir Downloads
	mkdir $WRFHYDRO_FOLDER/Hydro-Basecode
	mkdir Libs
	export DIR=$WRFHYDRO_FOLDER/Libs
	mkdir Libs/grib2
	mkdir Libs/NETCDF
	mkdir Libs/MPICH
	mkdir -p Tests/Environment
	mkdir -p Tests/Compatibility

	echo " "

	#############################Core Management####################################
	export CPU_CORE=$(sysctl -n hw.ncpu) # number of available threads on system
	export CPU_6CORE="6"
	export CPU_HALF=$(($CPU_CORE / 2))
	#1/2 of availble cores on system
	export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))
	#Forces CPU cores to even number to avoid partial core export. ie 7 cores would be 3.5 cores.

	if [ $CPU_CORE -le $CPU_6CORE ]; then #If statement for low core systems.  Forces computers to only use 1 core if there are 4 cores or less on the system.
		export CPU_HALF_EVEN="2"
	else
		export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))
	fi

	echo "##########################################"
	echo "Number of Threads being used $CPU_HALF_EVEN"
	echo "##########################################"
	echo " "

	##############################Downloading Libraries############################

	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://github.com/madler/zlib/archive/refs/tags/v$Zlib_Version.tar.gz
	wget -c https://github.com/HDFGroup/hdf5/archive/refs/tags/hdf5-$HDF5_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-c/archive/refs/tags/v$Netcdf_C_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-fortran/archive/refs/tags/v$Netcdf_Fortran_Version.tar.gz
	wget -c https://download.sourceforge.net/libpng/libpng-$Libpng_Version.tar.gz
	wget -c https://www.ece.uvic.ca/~frodo/jasper/software/jasper-$Jasper_Version.zip
	wget -c https://github.com/pmodels/mpich/releases/download/v$Mpich_Version/mpich-$Mpich_Version.tar.gz
	wget -c https://parallel-netcdf.github.io/Release/pnetcdf-$Pnetcdf_Version.tar.gz


	echo " "

	#############################Compilers############################

	#Symlink to avoid clang conflicts with compilers
	#default gcc path /usr/bin/gcc
	#default homebrew path /usr/local/bin
	echo $PASSWD | sudo -S unlink /opt/homebrew/bin/gfortran
	echo $PASSWD | sudo -S unlink /opt/homebrew/bin/gcc
	echo $PASSWD | sudo -S unlink /opt/homebrew/bin/g++

	source ~./bashrc
	gcc --version
	g++ --version
	gfortran --version

	cd /opt/homebrew/bin

	echo $PASSWD | sudo -S ln -sf gcc-12 gcc
	echo $PASSWD | sudo -S ln -sf g++-12 g++
	echo $PASSWD | sudo -S ln -sf gfortran-12 gfortran

	cd
	source ~/.bashrc
	source ~/.bash_profile
	gcc --version
	g++ --version
	gfortran --version

	export CC=gcc
	export CXX=g++
	export FC=gfortran
	export F77=gfortran
	export CFLAGS="-fPIC -fPIE -Wno-implicit-function-declaration -Wall"

	echo " "

	#IF statement for GNU compiler issue
	export GCC_VERSION=$(gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		export fallow_argument=-fallow-argument-mismatch
		export boz_argument=-fallow-invalid-boz
	else
		export fallow_argument=
		export boz_argument=
	fi

	export FFLAGS="$fallow_argument -m64"
	export FCFLAGS="$fallow_argument -m64"

	echo "##########################################"
	echo "FFLAGS = $FFLAGS"
	echo "FCFLAGS = $FCFLAGS"
	echo "CFLAGS = $CFLAGS"
	echo "##########################################"

	echo " "

	#############################zlib############################
	#Uncalling compilers due to comfigure issue with zlib1.2.12
	#With CC & CXX definied ./configure uses different compiler Flags

	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf v$Zlib_Version.tar.gz
	cd zlib-$Zlib_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log
	./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "

	##############################MPICH############################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf mpich-$Mpich_Version.tar.gz
	cd mpich-$Mpich_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	F90= ./configure --prefix=$DIR/MPICH --with-device=ch3 FFLAGS="$fallow_argument -m64" FCFLAGS="$fallow_argument -m64" 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PATH=$DIR/MPICH/bin:$PATH
	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx

	echo " "

	#############################libpng############################
	cd $WRFHYDRO_FOLDER/Downloads
	export LDFLAGS=-L$DIR/grib2/lib
	export CPPFLAGS=-I$DIR/grib2/include
	tar -xvzf libpng-$Libpng_Version.tar.gz
	cd libpng-$Libpng_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check
	#make check

	echo " "
	#############################JasPer############################

	cd $WRFHYDRO_FOLDER/Downloads
	unzip jasper-$Jasper_Version.zip
	cd jasper-$Jasper_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	export JASPERLIB=$DIR/grib2/lib
	export JASPERINC=$DIR/grib2/include

	echo " "
	#############################hdf5 library for netcdf4 functionality############################

	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf hdf5-$HDF5_Version.tar.gz
	cd hdf5-hdf5-$HDF5_Version
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 --with-zlib=$DIR/grib2 --enable-hl --enable-fortran --enable-parallel 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export HDF5=$DIR/grib2
	export PHDF5=$DIR/grib2
	export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH

	echo " "

	#############################Install Parallel-netCDF##############################
	#Make file created with half of available cpu cores
	#Hard path for MPI added
	##################################################################################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf pnetcdf-$Pnetcdf_Version.tar.gz
	cd pnetcdf-$Pnetcdf_Version
	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx
	autoreconf -i -f 2>&1 | tee autoreconf.log
	./configure --prefix=$DIR/grib2 --enable-shared --enable-static 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PNETCDF=$DIR/grib2

	echo " "

	##############################Install NETCDF C Library############################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xzvf v$Netcdf_C_Version.tar.gz
	cd netcdf-c-$Netcdf_C_Version/
	export CPPFLAGS=-I$DIR/grib2/include
	export LDFLAGS=-L$DIR/grib2/lib
	export LIBS="-lhdf5_hl -lhdf5 -lz -lcurl -lgfortran -lgcc -lm -ldl -lpnetcdf"
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --disable-dap --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-pnetcdf --enable-cdf5 --enable-parallel-tests 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PATH=$DIR/NETCDF/bin:$PATH
	export NETCDF=$DIR/NETCDF
	echo " "

	##############################NetCDF fortran library############################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf v$Netcdf_Fortran_Version.tar.gz
	cd netcdf-fortran-$Netcdf_Fortran_Version/
	export LD_LIBRARY_PATH=$DIR/NETCDF/lib:$LD_LIBRARY_PATH
	export CPPFLAGS="-I$DIR/NETCDF/include -I$DIR/grib2/include"
	export LDFLAGS="-L$DIR/NETCDF/lib -L$DIR/grib2/lib"
	export LIBS="-lnetcdf -lpnetcdf -lcurl -lhdf5_hl -lhdf5 -lz -lm -ldl -lgcc -lgfortran"
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-parallel-tests --enable-hdf5 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "
	#################################### System Environment Tests ##############
	mkdir -p $WRFHYDRO_FOLDER/Tests/Environment
	mkdir -p $WRFHYDRO_FOLDER/Tests/Compatibility

	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_NETCDF_MPI_tests.tar
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_tests.tar

	tar -xvf Fortran_C_tests.tar -C $WRFHYDRO_FOLDER/Tests/Environment
	tar -xvf Fortran_C_NETCDF_MPI_tests.tar -C $WRFHYDRO_FOLDER/Tests/Compatibility
	export one="1"
	echo " "
	############## Testing Environment #####

	cd $WRFHYDRO_FOLDER/Tests/Environment

	echo " "
	echo " "
	echo "Environment Testing "
	echo "Test 1"
	$FC TEST_1_fortran_only_fixed.f
	./a.out | tee env_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 1 Passed"
	else
		echo "Environment Compiler Test 1 Failed"
		exit
	fi
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 2"
	$FC TEST_2_fortran_only_free.f90
	./a.out | tee env_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 2 Passed"
	else
		echo "Environment Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 3"
	$CC TEST_3_c_only.c
	./a.out | tee env_test3.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test3.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 3 Passed"
	else
		echo "Environment Compiler Test 3 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 4"
	$CC -c -m64 TEST_4_fortran+c_c.c
	$FC -c -m64 TEST_4_fortran+c_f.f90
	$FC -m64 TEST_4_fortran+c_f.o TEST_4_fortran+c_c.o
	./a.out | tee env_test4.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test4.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 4 Passed"
	else
		echo "Environment Compiler Test 4 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	############## Testing Environment #####

	cd $WRFHYDRO_FOLDER/Tests/Compatibility

	cp ${NETCDF}/include/netcdf.inc .

	echo " "
	echo " "
	echo "Library Compatibility Tests "
	echo "Test 1"
	$FC -c 01_fortran+c+netcdf_f.f
	$CC -c 01_fortran+c+netcdf_c.c
	$FC 01_fortran+c+netcdf_f.o 01_fortran+c+netcdf_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	./a.out | tee comp_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 1 Passed"
	else
		echo "Compatibility Compiler Test 1 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "

	echo "Test 2"
	$MPIFC -c 02_fortran+c+netcdf+mpi_f.f
	$MPICC -c 02_fortran+c+netcdf+mpi_c.c
	$MPIFC 02_fortran+c+netcdf+mpi_f.o \
		02_fortran+c+netcdf+mpi_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	$DIR/MPICH/bin/mpirun ./a.out | tee comp_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 2 Passed"
	else
		echo "Compatibility Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."
	echo " "

	echo " All tests completed and passed"
	echo " "

	#Installing Miniconda3 to WRF directory and updating libraries
	pip install --upgrade --force-reinstall zstandard
	pip install --upgrade --force-reinstall zstd
	pip3 install --upgrade --force-reinstall zstandard
	pip3 install --upgrade --force-reinstall zstd
	export Miniconda_Install_DIR=$WRFHYDRO_FOLDER/miniconda3

	mkdir -p $Miniconda_Install_DIR

	wget -c https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O $Miniconda_Install_DIR/miniconda.sh
	bash $Miniconda_Install_DIR/miniconda.sh -b -u -p $Miniconda_Install_DIR

	rm -rf $Miniconda_Install_DIR/miniconda.sh

	export PATH=$WRFHYDRO_FOLDER/miniconda3/bin:$PATH

	source $Miniconda_Install_DIR/etc/profile.d/conda.sh

	$Miniconda_Install_DIR/bin/conda init bash
	$Miniconda_Install_DIR/bin/conda init zsh
	$Miniconda_Install_DIR/bin/conda init tcsh
	$Miniconda_Install_DIR/bin/conda init xonsh
	$Miniconda_Install_DIR/bin/conda init powershell

	conda config --add channels conda-forge
	conda config --set auto_activate_base false
	conda update -n root --all -y

	echo " "

	#Installing NCL via Conda
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda init bash
	conda activate base
	conda create -n ncl_stable -c conda-forge ncl -y
	conda activate ncl_stable

	conda deactivate
	conda deactivate
	conda deactivate
	echo " "

	##################### WRF Python           ##################
	########### WRf-Python compiled via Conda  ##################
	########### This is the preferred method by NCAR      ##################
	##### https://wrf-python.readthedocs.io/en/latest/installation.html  ##################
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
conda env create -f $HOME/WRF-MOSIT/wrf-python-stable.yml

	######################### Climate Data Operators ############
	######################### CDO compiled via Conda ###########
	####################### This is the preferred method #######
	################### https://bairdlangenbrunner.github.io/python-for-climate-scientists/conda/setting-up-conda-environments.html #######################

	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda init bash
	conda activate base
	conda create --name cdo_stable -y
	source activate cdo_stable
	conda install -c conda-forge cdo -y
	conda update --all -y
	conda deactivate
	conda deactivate
	conda deactivate

	echo " "

	################################## QGIS #####################################
	#QGIS (Quantum Geographic Information System) is a free and open-source platform that allows users to
	#analyze, view, and edit geospatial data. It supports both vector and raster layers, as well as various #web services, and is extensible through community-developed plugins. Key features include map
	#creation, spatial analysis, and data management.
	#############################################################################

	conda env create -f $HOME/WRF-MOSIT/qgis.3.28.8.yml

	echo " "

	########################## WRF Hydro GIS PreProcessor ##############################
	#  Compiled with Conda
	#  https://github.com/NCAR/wrf_hydro_gis_preprocessor
	####################################################################################

	conda init bash
	conda activate base
	conda config --add channels conda-forge
	conda create -n wrfh_gis_env -c conda-forge python=3.10 gdal netCDF4 numpy pyproj whitebox=2.2.0 packaging shapely -y
	conda activate wrfh_gis_env
	conda update -n wrfh_gis_env --all -y
	conda deactivate
	conda deactivate
	conda deactivate

	cd $WRFHYDRO_FOLDER/
	git clone https://github.com/NCAR/wrf_hydro_gis_preprocessor.git $WRFHYDRO_FOLDER/WRF-Hydro-GIS-PreProcessor
	echo " "

	############################# WRF HYDRO V5.2.0 #################################
	# Version 5.2.0
	# Standalone mode
	################################################################################
	export NETCDF_INC=$DIR/NETCDF/include
	export NETCDF_LIB=$DIR/NETCDF/lib

	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://github.com/NCAR/wrf_hydro_nwm_public/archive/refs/tags/v5.2.0.tar.gz -O WRFHYDRO.5.2.tar.gz
	tar -xvzf WRFHYDRO.5.2.tar.gz -C $WRFHYDRO_FOLDER/Hydro-Basecode

	#Modifying WRF-HYDRO Environment
	#Echo commands use due to lack of knowledge
	cd $WRFHYDRO_FOLDER/Hydro-Basecode/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS/template

	sed -i'' -e 's/SPATIAL_SOIL=0/SPATIAL_SOIL=1/g' setEnvar.sh           # Spatially distributed parameters for NoahMP: 0=Off, 1=On.
	sed -i'' -e 's/WRF_HYDRO_NUDGING=0/WRF_HYDRO_NUDGING=1/g' setEnvar.sh # Streamflow nudging: 0=Off, 1=On.
	echo " " >>setEnvar.sh
	echo "# Large netcdf file support: 0=Off, 1=On." >>setEnvar.sh
	echo "export WRFIO_NCD_LARGE_FILE_SUPPORT=1" >>setEnvar.sh
	cp -r setEnvar.sh $WRFHYDRO_FOLDER/Hydro-Basecode/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS

	cd $WRFHYDRO_FOLDER/Hydro-Basecode/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS

	echo 2 | ./configure 2>&1 | tee configure.log # Option 2

	./compile_offline_NoahMP.sh setEnvar.sh 2>&1 | tee compile_offline_NoahMP.log

	ls -lah RUN/*.exe #Test to see if .exe files have compiled

	echo " "
	############################ WRF ${WPS_VERSION}  #################################
	## WRF v${WPS_VERSION}
	## Downloaded from git tagged releases
	# option 21, option 1 for gfortran and distributed memory w/basic nesting
	# large file support enable with WRFiO_NCD_LARGE_FILE_SUPPORT=1
	########################################################################

	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://github.com/wrf-model/WRF/releases/download/v${WRF_VERSION}/v${WRF_VERSION}.tar.gz -O WRF-${WRF_VERSION}.tar.gz
	tar -xvzf WRF-${WRF_VERSION}.tar.gz -C $WRFHYDRO_FOLDER/

	# If statment for changing folder name
	if [ -d "$WRFHYDRO_FOLDER/WRF" ]; then
		mv -f $WRFHYDRO_FOLDER/WRF $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}
	fi

	cd $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}
	export WRFIO_NCD_LARGE_FILE_SUPPORT=1

	#Replace old version of WRF-Hydro distributed with WRF with updated WRF-Hydro source code
	rm -r $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/hydro/
	cp -r $WRFHYDRO_FOLDER/Hydro-Basecode/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/hydro

	cd $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/hydro
	source setEnvar.sh
	cd $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}

	./clean

	if [ ${auto_config} -eq 1 ]; then
		sed -i'' -e '443s/.*/  $response = "17 \\n";/g' $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/arch/Config.pl # Answer for compiler choice
		sed -i'' -e '909s/.*/  $response = "1 \\n";/g' $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/arch/Config.pl  #Answer for basic nesting
		./configure 2>&1 | tee configure.log
	else
		./configure 2>&1 | tee configure.log #Option 17 gfortran compiler with distributed memory option 1 for basic nesting
	fi

	sed -i'' -e '145s/-c/-c -fPIC -fPIE -O3  -Wno-error=implicit-function-declaration/g' configure.wrf

	./compile em_real 2>&1 | tee compile.wrf.log

	export WRF_DIR=$WRFHYDRO_FOLDER/WRFV${WRF_VERSION}

	# IF statement to check that all files were created.
	cd $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/main
	n=$(ls ./*.exe | wc -l)
	if (($n >= 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		cd $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}
		./compile -j $CPU_HALF_EVEN em_real 2>&1 | tee compile.wrf2.log
		cd $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/main
		n=$(ls ./*.exe | wc -l)
		if (($n >= 3)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "
	############################WPSV${WPS_VERSION}#####################################
	## WPS v${WPS_VERSION}
	## Downloaded from git tagged releases
	#Option 3 for gfortran and distributed memory
	########################################################################

	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://github.com/wrf-model/WPS/archive/refs/tags/v${WPS_VERSION}.tar.gz -O WPS-${WPS_VERSION}.tar.gz
	tar -xvzf WPS-${WPS_VERSION}.tar.gz -C $WRFHYDRO_FOLDER/
	cd $WRFHYDRO_FOLDER/WPS-${WPS_VERSION}
	./clean -a

	if [ ${auto_config} -eq 1 ]; then
		echo 19 | ./configure 2>&1 | tee configure.log #Option 19 for gfortran and distributed memory
	else
		./configure 2>&1 | tee configure.log #Option 19 gfortran compiler with distributed memory
	fi
	./compile 2>&1 | tee compile.wps.log

	# IF statement to check that all files were created.
	cd $WRFHYDRO_FOLDER/WPS-${WPS_VERSION}
	n=$(ls ./*.exe | wc -l)
	if (($n == 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		./compile 2>&1 | tee compile.wps2.log
		cd $WRFHYDRO_FOLDER/WPS-${WPS_VERSION}
		n=$(ls ./*.exe | wc -l)
		if (($n == 3)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "

	######################## WPS Domain Setup Tools ########################
	## DomainWizard

	cd $WRFHYDRO_FOLDER/Downloads
	wget http://esrl.noaa.gov/gsd/wrfportal/domainwizard/WRFDomainWizard.zip
	mkdir $WRFHYDRO_FOLDER/WRFDomainWizard
	unzip WRFDomainWizard.zip -d $WRFHYDRO_FOLDER/WRFDomainWizard
	chmod +x $WRFHYDRO_FOLDER/WRFDomainWizard/run_DomainWizard

	echo " "
	######################## WPF Portal Setup Tools ########################
	## WRFPortal
	cd $WRFHYDRO_FOLDER/Downloads
	wget https://esrl.noaa.gov/gsd/wrfportal/portal/wrf-portal.zip
	mkdir $WRFHYDRO_FOLDER/WRFPortal
	unzip wrf-portal.zip -d $WRFHYDRO_FOLDER/WRFPortal
	chmod +x $WRFHYDRO_FOLDER/WRFPortal/runWRFPortal

	echo " "
	######################## Static Geography Data inc/ Optional ####################
	# http://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	# These files are large so if you only need certain ones comment the others off
	# All files downloaded and untarred is 200GB
	# https://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	#################################################################################
	cd $WRFHYDRO_FOLDER/Downloads
	mkdir $WRFHYDRO_FOLDER/GEOG
	mkdir $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

	echo " "
	echo "Mandatory WRF Preprocessing System (WPS) Geographical Input Data Mandatory Fields Downloads"
	echo " "
	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_high_res_mandatory.tar.gz
	tar -xvzf geog_high_res_mandatory.tar.gz -C $WRFHYDRO_FOLDER/GEOG/

	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_low_res_mandatory.tar.gz
	tar -xvzf geog_low_res_mandatory.tar.gz -C $WRFHYDRO_FOLDER/GEOG/
	mv $WRFHYDRO_FOLDER/GEOG/WPS_GEOG_LOW_RES/ $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

	if [ ${WPS_Specific_Applications} -eq 1 ]; then
		echo " "
		echo " WPS Geographical Input Data Mandatory for Specific Applications"
		echo " "

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_thompson28_chem.tar.gz
		tar -xvzf geog_thompson28_chem.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_noahmp.tar.gz
		tar -xvzf geog_noahmp.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/irrigation.tar.gz
		tar -xvzf irrigation.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_px.tar.gz
		tar -xvzf geog_px.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_urban.tar.gz
		tar -xvzf geog_urban.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_ssib.tar.gz
		tar -xvzf geog_ssib.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/lake_depth.tar.bz2
		tar -xvf lake_depth.tar.bz2 -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/topobath_30s.tar.bz2
		tar -xvf topobath_30s.tar.bz2 -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/gsl_gwd.tar.bz2
		tar -xvf gsl_gwd.tar.bz2 -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG
	fi

	if [ ${Optional_GEOG} -eq 1 ]; then
		echo " "
		echo "Optional WPS Geographical Input Data"
		echo " "

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_older_than_2000.tar.gz
		tar -xvzf geog_older_than_2000.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s_with_lakes.tar.gz
		tar -xvzf modis_landuse_20class_15s_with_lakes.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_alt_lsm.tar.gz
		tar -xvzf geog_alt_lsm.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/nlcd2006_ll_9s.tar.bz2
		tar -xvf nlcd2006_ll_9s.tar.bz2 -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/updated_Iceland_LU.tar.gz
		tar -xvf updated_Iceland_LU.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s.tar.bz2
		tar -xvf modis_landuse_20class_15s.tar.bz2 -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG
	fi

fi

if [ "$Centos_64bit_GNU" = "1" ] && [ "$WRFHYDRO_COUPLED_PICK" = "1" ]; then

	#############################basic package managment############################
	echo $PASSWD | sudo -S yum install epel-release -y
	echo $PASSWD | sudo -S yum install dnf -y
	echo $PASSWD | sudo -S dnf install epel-release -y
	echo $PASSWD | sudo -S dnf install dnf -y
	echo $PASSWD | sudo -S dnf -y update
	echo $PASSWD | sudo -S dnf -y upgrade
	echo $PASSWD | sudo -S dnf -y install autoconf automake bzip2 bzip2-devel byacc cairo-devel cmake cpp curl curl-devel flex  fontconfig-devel fontconfig-devel.x86_64 gcc gcc-c++ gcc-gfortran git java-11-openjdk java-11-openjdk-devel ksh libX11-devel libX11-devel.x86_64 libXaw libXaw-devel libXext-devel libXext-devel.x86_64 libXmu-devel libXrender-devel libXrender-devel.x86_64 libstdc++ libstdc++-devel  libxml2 libxml2-devel m4  .x86_64 nfs-utils perl pkgconfig  pixman-devel python3 python3-devel tcsh time unzip wget
	echo $PASSWD | sudo -S dnf -y groupinstall "Development Tools"
	echo $PASSWD | sudo -S dnf -y update
	echo $PASSWD | sudo -S dnf -y upgrade

	echo " "

	echo " "
	##############################Directory Listing############################
	export HOME=$(
		cd
		pwd
	)

	mkdir $HOME/WRFHYDRO_COUPLED
	export WRFHYDRO_FOLDER=$HOME/WRFHYDRO_COUPLED
	cd $WRFHYDRO_FOLDER/
	mkdir Downloads
	mkdir WRFPLUS
	mkdir WRFDA
	mkdir Libs
	export DIR=$WRFHYDRO_FOLDER/Libs
	mkdir Libs/grib2
	mkdir Libs/NETCDF
	mkdir Libs/MPICH
	mkdir -p Tests/Environment
	mkdir -p Tests/Compatibility

	echo " "
	#############################Core Management####################################

	export CPU_CORE=$(nproc) # number of available threads on system
	export CPU_6CORE="6"
	export CPU_HALF=$(($CPU_CORE / 2))                    #half of availble cores on system
	export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2))) #Forces CPU cores to even number to avoid partial core export. ie 7 cores would be 3.5 cores.

	if [ $CPU_CORE -le $CPU_6CORE ]; then #If statement for low core systems.  Forces computers to only use 1 core if there are 4 cores or less on the system.
		export CPU_HALF_EVEN="2"
	else
		export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))
	fi

	echo "##########################################"
	echo "Number of Threads being used $CPU_HALF_EVEN"
	echo "##########################################"

	echo " "
	##############################Downloading Libraries############################
	#Force use of ipv4 with -4
	cd Downloads
	wget -c https://github.com/madler/zlib/archive/refs/tags/v$Zlib_Version.tar.gz
	wget -c https://github.com/HDFGroup/hdf5/archive/refs/tags/hdf5-$HDF5_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-c/archive/refs/tags/v$Netcdf_C_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-fortran/archive/refs/tags/v$Netcdf_Fortran_Version.tar.gz
	wget -c https://github.com/pmodels/mpich/releases/download/v$Mpich_Version/mpich-$Mpich_Version.tar.gz
	wget -c https://download.sourceforge.net/libpng/libpng-$Libpng_Version.tar.gz
	wget -c https://www.ece.uvic.ca/~frodo/jasper/software/jasper-$Jasper_Version.zip
	wget -c https://parallel-netcdf.github.io/Release/pnetcdf-$Pnetcdf_Version.tar.gz
	wget -c https://sourceforge.net/projects/opengrads/files/grads2/2.2.1.oga.1/Linux%20%2864%20Bits%29/opengrads-2.2.1.oga.1-bundle-x86_64-pc-linux-gnu-glibc_2.17.tar.gz

	echo " "
	####################################Compilers#####################################
	export CC=gcc
	export CXX=g++
	export FC=gfortran
	export F77=gfortran
	export CFLAGS="-fPIC -fPIE -O3"

	#IF statement for GNU compiler issue
	export GCC_VERSION=$(gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		export fallow_argument=-fallow-argument-mismatch
		export boz_argument=-fallow-invalid-boz
	else
		export fallow_argument=
		export boz_argument=
	fi

	export FFLAGS="$fallow_argument -m64"
	export FCFLAGS="$fallow_argument -m64"

	echo "##########################################"
	echo "FFLAGS = $FFLAGS"
	echo "FCFLAGS = $FCFLAGS"
	echo "CFLAGS = $CFLAGS"
	echo "##########################################"

	echo " "
	#############################zlib############################
	#Uncalling compilers due to comfigure issue with zlib$Zlib_Version
	#With CC & CXX definied ./configure uses different compiler Flags

	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf v$Zlib_Version.tar.gz
	cd zlib-$Zlib_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log
	./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "
	##############################MPICH############################
	#F90= due to compiler issues with mpich install
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf mpich-$Mpich_Version.tar.gz
	cd mpich-$Mpich_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	F90= ./configure --prefix=$DIR/MPICH --with-device=ch3 FFLAGS=$fallow_argument FCFLAGS=$fallow_argument 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	# make check

	export PATH=$DIR/MPICH/bin:$PATH
	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx

	echo " "
	#############################libpng############################
	cd $WRFHYDRO_FOLDER/Downloads
	export LDFLAGS=-L$DIR/grib2/lib
	export CPPFLAGS=-I$DIR/grib2/include
	tar -xvzf libpng-$Libpng_Version.tar.gz
	cd libpng-$Libpng_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check
	echo " "
	#############################JasPer############################
	cd $WRFHYDRO_FOLDER/Downloads
	unzip jasper-$Jasper_Version.zip
	cd jasper-$Jasper_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	./configure --prefix=$DIR/grib2
	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export JASPERLIB=$DIR/grib2/lib
	export JASPERINC=$DIR/grib2/include

	echo " "
	#############################hdf5 library for netcdf4 functionality############################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf hdf5-$HDF5_Version.tar.gz
	cd hdf5-hdf5-$HDF5_Version
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 --with-zlib=$DIR/grib2 --enable-hl --enable-fortran --enable-parallel 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export HDF5=$DIR/grib2
	export PHDF5=$DIR/grib2
	export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH

	echo " "
	#############################Install Parallel-netCDF##############################
	#Make file created with half of available cpu cores
	#Hard path for MPI added
	##################################################################################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf pnetcdf-$Pnetcdf_Version.tar.gz
	cd pnetcdf-$Pnetcdf_Version
	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx
	autoreconf -i -f 2>&1 | tee autoreconf.log
	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 --enable-shared --enable-static 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PNETCDF=$DIR/grib2

	echo " "

	##############################Install NETCDF C Library############################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xzvf v$Netcdf_C_Version.tar.gz
	cd netcdf-c-$Netcdf_C_Version/
	export CPPFLAGS=-I$DIR/grib2/include
	export LDFLAGS=-L$DIR/grib2/lib
	export LIBS="-lhdf5_hl -lhdf5 -lz -lcurl -lgfortran -lgcc -lm -ldl -lpnetcdf"
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --disable-dap --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-pnetcdf --enable-cdf5 --enable-parallel-tests 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PATH=$DIR/NETCDF/bin:$PATH
	export NETCDF=$DIR/NETCDF
	echo " "
	##############################NetCDF fortran library############################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf v$Netcdf_Fortran_Version.tar.gz
	cd netcdf-fortran-$Netcdf_Fortran_Version/
	export LD_LIBRARY_PATH=$DIR/NETCDF/lib:$LD_LIBRARY_PATH
	export CPPFLAGS="-I$DIR/NETCDF/include -I$DIR/grib2/include"
	export LDFLAGS="-L$DIR/NETCDF/lib -L$DIR/grib2/lib"
	export LIBS="-lnetcdf -lpnetcdf -lcurl -lhdf5_hl -lhdf5 -lz -lm -ldl -lgcc -lgfortran"
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-parallel-tests --enable-hdf5 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "
	#################################### System Environment Tests ##############

	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_NETCDF_MPI_tests.tar
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_tests.tar

	tar -xvf Fortran_C_tests.tar -C $WRFHYDRO_FOLDER/Tests/Environment
	tar -xvf Fortran_C_NETCDF_MPI_tests.tar -C $WRFHYDRO_FOLDER/Tests/Compatibility

	export one="1"
	echo " "
	############## Testing Environment #####

	cd $WRFHYDRO_FOLDER/Tests/Environment

	cp ${NETCDF}/include/netcdf.inc .

	echo " "
	echo " "
	echo "Environment Testing "
	echo "Test 1"
	$FC TEST_1_fortran_only_fixed.f
	./a.out | tee env_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 1 Passed"
	else
		echo "Environment Compiler Test 1 Failed"
		exit
	fi
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 2"
	$FC TEST_2_fortran_only_free.f90
	./a.out | tee env_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 2 Passed"
	else
		echo "Environment Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 3"
	$CC TEST_3_c_only.c
	./a.out | tee env_test3.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test3.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 3 Passed"
	else
		echo "Environment Compiler Test 3 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 4"
	$CC -c -m64 TEST_4_fortran+c_c.c
	$FC -c -m64 TEST_4_fortran+c_f.f90
	$FC -m64 TEST_4_fortran+c_f.o TEST_4_fortran+c_c.o
	./a.out | tee env_test4.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test4.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 4 Passed"
	else
		echo "Environment Compiler Test 4 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	############## Testing Environment #####

	cd $WRFHYDRO_FOLDER/Tests/Compatibility

	cp ${NETCDF}/include/netcdf.inc .

	echo " "
	echo " "
	echo "Library Compatibility Tests "
	echo "Test 1"
	$FC -c 01_fortran+c+netcdf_f.f
	$CC -c 01_fortran+c+netcdf_c.c
	$FC 01_fortran+c+netcdf_f.o 01_fortran+c+netcdf_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	./a.out | tee comp_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 1 Passed"
	else
		echo "Compatibility Compiler Test 1 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "

	echo "Test 2"
	$MPIFC -c 02_fortran+c+netcdf+mpi_f.f
	$MPICC -c 02_fortran+c+netcdf+mpi_c.c
	$MPIFC 02_fortran+c+netcdf+mpi_f.o \
		02_fortran+c+netcdf+mpi_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	$DIR/MPICH/bin/mpirun ./a.out | tee comp_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 2 Passed"
	else
		echo "Compatibility Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."
	echo " "

	echo " All tests completed and passed"
	echo " "

	###############################NCEPlibs#####################################
	#The libraries are built and installed with
	# ./make_ncep_libs.sh -s MACHINE -c COMPILER -d NCEPLIBS_DIR -o OPENMP [-m mpi] [-a APPLICATION]
	#It is recommended to install the NCEPlibs into their own directory, which must be created before running the installer. Further information on the command line arguments can be obtained with
	# ./make_ncep_libs.sh -h

	#If iand error occurs go to https://github.com/NCAR/NCEPlibs/pull/16/files make adjustment and re-run ./make_ncep_libs.sh
	############################################################################

	cd $WRFHYDRO_FOLDER/Downloads
	git clone https://github.com/NCAR/NCEPlibs.git
	cd NCEPlibs
	mkdir $DIR/nceplibs

	export JASPER_INC=$DIR/grib2/include
	export PNG_INC=$DIR/grib2/include
	export NETCDF=$DIR/NETCDF

	#for loop to edit linux.gnu for nceplibs to install
	#make if statement for gcc-9 or older
	export GCC_VERSION=$(gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		y="24 28 32 36 40 45 49 53 56 60 64 68 69 73 74 79"
		for X in $y; do
			sed -i "${X}s/= /= $fallow_argument $boz_argument /g" $WRFHYDRO_FOLDER/Downloads/NCEPlibs/macros.make.linux.gnu
		done
	else
		echo ""
		echo "Loop not needed"
	fi

	if [ ${auto_config} -eq 1 ]; then
		echo yes | ./make_ncep_libs.sh -s linux -c gnu -d $DIR/nceplibs -o 0 -m 1 -a upp | tee make.install.log
	else
		./make_ncep_libs.sh -s linux -c gnu -d $DIR/nceplibs -o 0 -m 1 -a upp | tee make.install.log
	fi

	export PATH=$DIR/nceplibs:$PATH

	echo " "
	################################UPPv4.1######################################
	#Previous verison of UPP
	#WRF Support page recommends UPPV4.1 due to too many changes to WRF and UPP code
	#since the WRF was written
	#Option 8 gfortran compiler with distributed memory
	#############################################################################
	cd $WRFHYDRO_FOLDER/
	git clone -b dtc_post_v4.1.0 --recurse-submodules https://github.com/NOAA-EMC/EMC_post UPPV4.1
	cd UPPV4.1
	mkdir postprd
	export NCEPLIBS_DIR=$DIR/nceplibs
	export NETCDF=$DIR/NETCDF

	if [ ${auto_config} -eq 1 ]; then
		echo 8 | ./configure #Option 8 gfortran compiler with distributed memory
	else
		./configure #Option 8 gfortran compiler with distributed memory
	fi

	#make if statement for gcc-9 or older
	export GCC_VERSION=$(gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		z="58 63"
		for X in $z; do
			sed -i "${X}s/(FOPT)/(FOPT) $fallow_argument $boz_argument  /g" $WRFHYDRO_FOLDER/UPPV4.1/configure.upp
		done
	else
		echo ""
		echo "Loop not needed"
	fi

	./compile
	cd $WRFHYDRO_FOLDER/UPPV4.1/scripts
	echo $PASSWD | sudo -S cpan install XML::LibXML
	chmod +x run_unipost

	# IF statement to check that all files were created.
	cd $WRFHYDRO_FOLDER/UPPV4.1/exec
	n=$(ls ./*.exe | wc -l)
	if (($n == 1)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing UPPV4.1. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files. Exiting the script."
		read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
		exit
	fi

	echo " "

	######################## ARWpost V3.1  ############################
	## ARWpost
	##Configure #3
	###################################################################
	cd $WRFHYDRO_FOLDER/Downloads
	wget -c http://www2.mmm.ucar.edu/wrf/src/ARWpost_V3.tar.gz
	tar -xvzf ARWpost_V3.tar.gz -C $WRFHYDRO_FOLDER/
	cd $WRFHYDRO_FOLDER/ARWpost
	./clean -a
	sed -i -e 's/-lnetcdf/-lnetcdff -lnetcdf/g' $WRFHYDRO_FOLDER/ARWpost/src/Makefile
	export NETCDF=$DIR/NETCDF

	if [ ${auto_config} -eq 1 ]; then
		echo 3 | ./configure #Option 3 gfortran compiler with distributed memory
	else
		./configure #Option 3 gfortran compiler with distributed memory
	fi

	export GCC_VERSION=$(gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		sed -i '32s/-ffree-form -O -fno-second-underscore -fconvert=big-endian -frecord-marker=4/-ffree-form -O -fno-second-underscore -fconvert=big-endian -frecord-marker=4 ${fallow_argument} /g' configure.arwp
	fi

	sed -i -e 's/-C -P -traditional/-P -traditional/g' $WRFHYDRO_FOLDER/ARWpost/configure.arwp
	./compile

	export PATH=$WRFHYDRO_FOLDER/ARWpost/ARWpost.exe:$PATH

	echo " "
	################################ OpenGrADS ##################################
	#Verison 2.2.1 32bit of Linux
	#############################################################################
	if [[ $GRADS_PICK -eq 1 ]]; then
		cd $WRFHYDRO_FOLDER/Downloads
		tar -xzvf opengrads-2.2.1.oga.1-bundle-x86_64-pc-linux-gnu-glibc_2.17.tar.gz -C $WRFHYDRO_FOLDER/
		cd $WRFHYDRO_FOLDER/
		mv $WRFHYDRO_FOLDER/opengrads-2.2.1.oga.1 $WRFHYDRO_FOLDER/GrADS
		cd GrADS/Contents
		wget -c https://github.com/regisgrundig/SIMOP/blob/master/g2ctl.pl
		chmod +x g2ctl.pl
		wget -c https://sourceforge.net/projects/opengrads/files/wgrib2/0.1.9.4/wgrib2-v0.1.9.4-bin-i686-glib2.5-linux-gnu.tar.gz
		tar -xzvf wgrib2-v0.1.9.4-bin-i686-glib2.5-linux-gnu.tar.gz
		cd wgrib2-v0.1.9.4/bin
		mv wgrib2 $WRFHYDRO_FOLDER/GrADS/Contents
		cd $WRFHYDRO_FOLDER/GrADS/Contents
		rm wgrib2-v0.1.9.4-bin-i686-glib2.5-linux-gnu.tar.gz
		rm -r wgrib2-v0.1.9.4

		export PATH=$WRFHYDRO_FOLDER/GrADS/Contents:$PATH

		echo " "
	fi
	################################## GrADS ###############################
	# Version  2.2.1
	# Sublibs library instructions: http://cola.gmu.edu/grads/gadoc/supplibs2.html
	# GrADS instructions: http://cola.gmu.edu/grads/downloads.php
	########################################################################
	if [[ $GRADS_PICK -eq 2 ]]; then
		cd $WRFHYDRO_FOLDER/Downloads
		wget -c ftp://cola.gmu.edu/grads/2.2/grads-2.2.1-bin-centos7.4-x86_64.tar.gz
		tar -xzvf grads-2.2.1-bin-centos7.4-x86_64.tar.gz -C $WRFHYDRO_FOLDER
		cd $WRFHYDRO_FOLDER/grads-2.2.1/bin
		chmod 775 *

	fi

	echo " "
	##################### NCAR COMMAND LANGUAGE           ##################
	########### NCL compiled via Conda                    ##################
	########### This is the preferred method by NCAR      ##################
	########### https://www.ncl.ucar.edu/index.shtml      ##################

	#Installing Miniconda3 to WRF-Hydro directory and updating libraries
	pip install --upgrade --force-reinstall zstandard
	pip install --upgrade --force-reinstall zstd
	pip3 install --upgrade --force-reinstall zstandard
	pip3 install --upgrade --force-reinstall zstd
	export Miniconda_Install_DIR=$WRFHYDRO_FOLDER/miniconda3

	mkdir -p $Miniconda_Install_DIR

	wget -c https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $Miniconda_Install_DIR/miniconda.sh
	bash $Miniconda_Install_DIR/miniconda.sh -b -u -p $Miniconda_Install_DIR

	rm -rf $Miniconda_Install_DIR/miniconda.sh

	export PATH=$WRFHYDRO_FOLDER/miniconda3/bin:$PATH

	source $Miniconda_Install_DIR/etc/profile.d/conda.sh

	$Miniconda_Install_DIR/bin/conda init bash
	$Miniconda_Install_DIR/bin/conda init zsh
	$Miniconda_Install_DIR/bin/conda init tcsh
	$Miniconda_Install_DIR/bin/conda init xonsh
	$Miniconda_Install_DIR/bin/conda init powershell

	conda config --add channels conda-forge
	conda config --set auto_activate_base false
	conda update -n root --all -y

	echo " "

	echo " "
	#Installing NCL via Conda
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda init bash
	conda activate base
	conda create -n ncl_stable -c conda-forge ncl -y
	conda activate ncl_stable

	conda deactivate
	conda deactivate
	conda deactivate

	echo " "

	############################OBSGRID###############################
	## OBSGRID
	## Downloaded from git tagged releases
	## Option #2
	########################################################################
	cd $WRFHYDRO_FOLDER/
	git clone https://github.com/wrf-model/OBSGRID.git
	cd $WRFHYDRO_FOLDER/OBSGRID

	./clean -a
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda init bash
	conda activate ncl_stable

	export HOME=$(
		cd
		pwd
	)
	export DIR=$WRFHYDRO_FOLDER/Libs
	export NETCDF=$DIR/NETCDF

	if [ ${auto_config} -eq 1 ]; then
		echo 2 | ./configure 2>&1 | tee configure.log #Option 2 for gfortran/gcc and distribunted memory
	else
		./configure 2>&1 | tee configure.log #Option 2 for gfortran/gcc and distribunted memory
	fi

	sed -i '27s/-lnetcdf -lnetcdff/ -lnetcdff -lnetcdf/g' configure.oa

	sed -i '31s/-lncarg -lncarg_gks -lncarg_c -lX11 -lm -lcairo/-lncarg -lncarg_gks -lncarg_c -lX11 -lm -lcairo -lfontconfig -lpixman-1 -lfreetype -lhdf5 -lhdf5_hl /g' configure.oa

	sed -i '39s/-frecord-marker=4/-frecord-marker=4 ${fallow_argument} /g' configure.oa

	sed -i '44s/=	/=	${fallow_argument} /g' configure.oa

	sed -i '45s/-C -P -traditional/-P -traditional/g' configure.oa

	echo " "
	./compile 2>&1 | tee compile.obsgrid.log

	conda deactivate
	conda deactivate
	conda deactivate

	echo " "
	# IF statement to check that all files were created.
	cd $WRFHYDRO_FOLDER/OBSGRID
	n=$(ls ./*.exe | wc -l)
	if (($n == 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing OBSGRID. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files. Exiting the script."
		read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
		exit
	fi

	echo " "
	############################## RIP4 #####################################
	mkdir $WRFHYDRO_FOLDER/RIP4
	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://www2.mmm.ucar.edu/wrf/src/RIP_47.tar.gz
	tar -xvzf RIP_47.tar.gz -C $WRFHYDRO_FOLDER/RIP4
	cd $WRFHYDRO_FOLDER/RIP4/RIP_47
	mv * ..
	cd $WRFHYDRO_FOLDER/RIP4
	rm -rd RIP_47
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda activate ncl_stable
	conda install -c conda-forge c-compiler fortran-compiler cxx-compiler -y

	export RIP_ROOT=$WRFHYDRO_FOLDER/RIP4
	export NETCDF=$DIR/NETCDF
	export NCARG_ROOT=$WRFHYDRO_FOLDER/anaconda3/envs/ncl_stable

	sed -i '349s|-L${NETCDF}/lib -lnetcdf $NETCDFF|-L${NETCDF}/lib $NETCDFF -lnetcdff -lnetcdf -lnetcdf -lnetcdff_C -lhdf5 |g' $WRFHYDRO_FOLDER/RIP4/configure

	sed -i '27s|NETCDFLIB	= -L${NETCDF}/lib -lnetcdf CONFIGURE_NETCDFF_LIB|NETCDFLIB	= -L</usr/lib/x86_64-linux-gnu/libm.a> -lm -L${NETCDF}/lib CONFIGURE_NETCDFF_LIB -lnetcdf -lhdf5 -lhdf5_hl -lgfortran -lgcc -lz |g' $WRFHYDRO_FOLDER/RIP4/arch/preamble

	sed -i '31s|-L${NCARG_ROOT}/lib -lncarg -lncarg_gks -lncarg_c -lX11 -lXext -lpng -lz CONFIGURE_NCARG_LIB| -L${NCARG_ROOT}/lib -lncarg -lncarg_gks -lncarg_c -lX11 -lXext -lpng -lz -lcairo -lfontconfig -lpixman-1 -lfreetype -lexpat -lpthread -lbz2 -lXrender -lgfortran -lgcc -L</usr/lib/x86_64-linux-gnu/> -lm -lhdf5 -lhdf5_hl |g' $WRFHYDRO_FOLDER/RIP4/arch/preamble

	sed -i '33s| -O|-fallow-argument-mismatch -O |g' $WRFHYDRO_FOLDER/RIP4/arch/configure.defaults

	sed -i '35s|=|= -L$WRFHYDRO_FOLDER/LIBS/grib2/lib -lhdf5 -lhdf5_hl |g' $WRFHYDRO_FOLDER/RIP4/arch/configure.defaults

	if [ ${auto_config} -eq 1 ]; then
		echo 3 | ./configure #Option 3 gfortran compiler with distributed memory
	else
		./configure #Option 3 gfortran compiler with distributed memory
	fi

	./compile

	conda deactivate
	conda deactivate
	conda deactivate

	echo " "
	##################### WRF Python           ##################
	########### WRf-Python compiled via Conda  ##################
	########### This is the preferred method by NCAR      ##################
	##### https://wrf-python.readthedocs.io/en/latest/installation.html  ##################
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
conda env create -f $HOME/WRF-MOSIT/wrf-python-stable.yml

	echo " "

	########################## WRF Hydro GIS PreProcessor ##############################
	#  Compiled with Conda
	#  https://github.com/NCAR/wrf_hydro_gis_preprocessor
	####################################################################################

	conda init bash
	conda activate base
	conda config --add channels conda-forge
	conda create -n wrfh_gis_env -c conda-forge python=3.10 gdal netCDF4 numpy pyproj whitebox=2.2.0 packaging shapely -y
	conda activate wrfh_gis_env
	conda update -n wrfh_gis_env --all -y
	conda deactivate
	conda deactivate
	conda deactivate
	cd $WRFHYDRO_FOLDER/
	git clone https://github.com/NCAR/wrf_hydro_gis_preprocessor.git $WRFHYDRO_FOLDER/WRF-Hydro-GIS-PreProcessor

	echo " "

	############################# WRF HYDRO V5.2.0 #################################
	# Version 5.2.0
	# Standalone mode
	################################################################################
	export NETCDF_INC=$DIR/NETCDF/include
	export NETCDF_LIB=$DIR/NETCDF/lib
	mkdir -p $WRFHYDRO_FOLDER/Hydro-Basecode
	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://github.com/NCAR/wrf_hydro_nwm_public/archive/refs/tags/v5.2.0.tar.gz -O WRFHYDRO.5.2.tar.gz
	tar -xvzf WRFHYDRO.5.2.tar.gz -C $WRFHYDRO_FOLDER/Hydro-Basecode

	#Modifying WRF-HYDRO Environment
	#Echo commands use due to lack of knowledge
	cd $WRFHYDRO_FOLDER/Hydro-Basecode/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS/template

	sed -i 's/SPATIAL_SOIL=0/SPATIAL_SOIL=1/g' setEnvar.sh           # Spatially distributed parameters for NoahMP: 0=Off, 1=On.
	sed -i 's/WRF_HYDRO_NUDGING=0/WRF_HYDRO_NUDGING=1/g' setEnvar.sh # Streamflow nudging: 0=Off, 1=On.
	echo " " >>setEnvar.sh
	echo "# Large netcdf file support: 0=Off, 1=On." >>setEnvar.sh
	echo "export WRFIO_NCD_LARGE_FILE_SUPPORT=1" >>setEnvar.sh
	cp -r setEnvar.sh $WRFHYDRO_FOLDER/Hydro-Basecode/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS

	cd $WRFHYDRO_FOLDER/Hydro-Basecode/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS

	if [ ${auto_config} -eq 1 ]; then
		echo 2 | ./configure 2>&1 | tee configure.log
	else
		./configure 2>&1 | tee configure.log #option 2 for gfortran
	fi

	./compile_offline_NoahMP.sh setEnvar.sh 2>&1 | tee compile_offline_NoahMP.log

	read -r -t 5 -p "I am going to wait for 5 seconds only ..."
	echo " "
	############################ WRF ${WPS_VERSION}  #################################
	## WRF v${WPS_VERSION}
	## Downloaded from git tagged releases
	# option 34, option 1 for gfortran and distributed memory w/basic nesting
	# large file support enable with WRFiO_NCD_LARGE_FILE_SUPPORT=1
	# In the namelist.input, the following settings support pNetCDF by setting value to 11:
	# io_form_boundary
	# io_form_history
	# io_form_auxinput2
	# io_form_auxhist2
	# Note that you need set nocolons = .true. in the section &time_control of namelist.input
	########################################################################
	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://github.com/wrf-model/WRF/releases/download/v${WRF_VERSION}/v${WRF_VERSION}.tar.gz -O WRF-${WRF_VERSION}.tar.gz
	tar -xvzf WRF-${WRF_VERSION}.tar.gz -C $WRFHYDRO_FOLDER/

	# If statment for changing folder name
	if [ -d "$WRFHYDRO_FOLDER/WRF" ]; then
		mv -f $WRFHYDRO_FOLDER/WRF $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}
	fi

	cd $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}
	export WRFIO_NCD_LARGE_FILE_SUPPORT=1

	#Replace old version of WRF-Hydro distributed with WRF with updated WRF-Hydro source code
	rm -r $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/hydro/
	cp -r $WRFHYDRO_FOLDER/Hydro-Basecode/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/hydro

	cd $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/hydro
	source setEnvar.sh
	cd $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}

	./clean

	# SED statements to fix configure error
	sed -i '186s/==/=/g' $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/configure
	sed -i '318s/==/=/g' $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/configure
	sed -i '919s/==/=/g' $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/configure

	if [ ${auto_config} -eq 1 ]; then
		sed -i '443s/.*/  $response = "34 \\n";/g' $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/arch/Config.pl # Answer for compiler choice
		sed -i '909s/.*/  $response = "1 \\n";/g' $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/arch/Config.pl  #Answer for basic nesting
		./configure 2>&1 | tee configure.log
	else
		./configure 2>&1 | tee configure.log #Option 34 gfortran compiler with distributed memory option 1 for basic nesting
	fi

	./compile -j $CPU_HALF_EVEN em_real 2>&1 | tee compile.wrf1.log

	export WRF_DIR=$WRFHYDRO_FOLDER/WRFV${WRF_VERSION}

	# IF statement to check that all files were created.
	cd $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/main
	n=$(ls ./*.exe | wc -l)
	if (($n >= 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		cd $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}
		./compile -j $CPU_HALF_EVEN em_real 2>&1 | tee compile.wrf2.log
		cd $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/main
		n=$(ls ./*.exe | wc -l)
		if (($n >= 3)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "
	############################WPSV${WPS_VERSION}#####################################
	## WPS v${WPS_VERSION}
	## Downloaded from git tagged releases
	#Option 3 for gfortran and distributed memory
	########################################################################

	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://github.com/wrf-model/WPS/archive/refs/tags/v${WPS_VERSION}.tar.gz -O WPS-${WPS_VERSION}.tar.gz
	tar -xvzf WPS-${WPS_VERSION}.tar.gz -C $WRFHYDRO_FOLDER/
	cd $WRFHYDRO_FOLDER/WPS-${WPS_VERSION}
	./clean -a

	if [ ${auto_config} -eq 1 ]; then
		echo 3 | ./configure 2>&1 | tee configure.log #Option 3 for gfortran and distributed memory
	else
		./configure 2>&1 | tee configure.log #Option 3 gfortran compiler with distributed memory
	fi
	./compile 2>&1 | tee compile.wps.log

	echo " "
	# IF statement to check that all files were created.
	cd $WRFHYDRO_FOLDER/WPS-${WPS_VERSION}
	n=$(ls ./*.exe | wc -l)
	if (($n == 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		./compile 2>&1 | tee compile.wps2.log
		cd $WRFHYDRO_FOLDER/WPS-${WPS_VERSION}
		n=$(ls ./*.exe | wc -l)
		if (($n == 3)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "

	######################## WPS Domain Setup Tools ########################
	## DomainWizard
	cd $WRFHYDRO_FOLDER/Downloads
	wget -c http://esrl.noaa.gov/gsd/wrfportal/domainwizard/WRFDomainWizard.zip
	mkdir $WRFHYDRO_FOLDER/WRFDomainWizard
	unzip WRFDomainWizard.zip -d $WRFHYDRO_FOLDER/WRFDomainWizard
	chmod +x $WRFHYDRO_FOLDER/WRFDomainWizard/run_DomainWizard

	echo " "
	######################## WPF Portal Setup Tools ########################
	## WRFPortal
	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://esrl.noaa.gov/gsd/wrfportal/portal/wrf-portal.zip
	mkdir $WRFHYDRO_FOLDER/WRFPortal
	unzip wrf-portal.zip -d $WRFHYDRO_FOLDER/WRFPortal
	chmod +x $WRFHYDRO_FOLDER/WRFPortal/runWRFPortal

	echo " "

	######################## Static Geography Data inc/ Optional ####################
	# http://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	# These files are large so if you only need certain ones comment the others off
	# All files downloaded and untarred is 200GB
	# https://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	#################################################################################
	cd $WRFHYDRO_FOLDER/Downloads
	mkdir $WRFHYDRO_FOLDER/GEOG
	mkdir $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

	echo " "
	echo "Mandatory WRF Preprocessing System (WPS) Geographical Input Data Mandatory Fields Downloads"
	echo " "
	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_high_res_mandatory.tar.gz
	tar -xvzf geog_high_res_mandatory.tar.gz -C $WRFHYDRO_FOLDER/GEOG/

	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_low_res_mandatory.tar.gz
	tar -xvzf geog_low_res_mandatory.tar.gz -C $WRFHYDRO_FOLDER/GEOG/
	mv $WRFHYDRO_FOLDER/GEOG/WPS_GEOG_LOW_RES/ $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

	if [ ${WPS_Specific_Applications} -eq 1 ]; then
		echo " "
		echo " WPS Geographical Input Data Mandatory for Specific Applications"
		echo " "

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_thompson28_chem.tar.gz
		tar -xvzf geog_thompson28_chem.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_noahmp.tar.gz
		tar -xvzf geog_noahmp.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/irrigation.tar.gz
		tar -xvzf irrigation.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG
		mkdir $WRFHYDRO_FOLDER/GEOG/WPS_GEOG/irrigation
		mv $WRFHYDRDO_FOLDER/GEOG/WPS_GEOG/fao $WRFHYDRO_FOLDER/GEOG/WPS_GEOG/irrigation

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_px.tar.gz
		tar -xvzf geog_px.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_urban.tar.gz
		tar -xvzf geog_urban.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_ssib.tar.gz
		tar -xvzf geog_ssib.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/lake_depth.tar.bz2
		tar -xvf lake_depth.tar.bz2 -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/topobath_30s.tar.bz2
		tar -xvf topobath_30s.tar.bz2 -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/gsl_gwd.tar.bz2
		tar -xvf gsl_gwd.tar.bz2 -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG
	fi

	if [ ${Optional_GEOG} -eq 1 ]; then
		echo " "
		echo "Optional WPS Geographical Input Data"
		echo " "

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_older_than_2000.tar.gz
		tar -xvzf geog_older_than_2000.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s_with_lakes.tar.gz
		tar -xvzf modis_landuse_20class_15s_with_lakes.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_alt_lsm.tar.gz
		tar -xvzf geog_alt_lsm.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/nlcd2006_ll_9s.tar.bz2
		tar -xvf nlcd2006_ll_9s.tar.bz2 -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/updated_Iceland_LU.tar.gz
		tar -xvf updated_Iceland_LU.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s.tar.bz2
		tar -xvf modis_landuse_20class_15s.tar.bz2 -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG
	fi
fi

if [ "$Centos_64bit_GNU" = "2" ] && [ "$WRFHYDRO_COUPLED_PICK" = "1" ]; then

	#############################basic package managment############################
	#############################basic package managment############################
	echo "old version of GNU detected"
	echo $PASSWD | sudo -S yum install centos-release-scl -y
	echo $PASSWD | sudo -S yum clean all
	echo $PASSWD | sudo -S yum remove devtoolset-11*
	echo $PASSWD | sudo -S yum install devtoolset-11
	echo $PASSWD | sudo -S yum install devtoolset-11-\* -y
	source /opt/rh/devtoolset-11/enable
	gcc --version
	echo $PASSWD | sudo -S yum install epel-release -y
	echo $PASSWD | sudo -S yum install dnf -y
	echo $PASSWD | sudo -S dnf install epel-release -y
	echo $PASSWD | sudo -S dnf install dnf -y
	echo $PASSWD | sudo -S dnf -y update
	echo $PASSWD | sudo -S dnf -y upgrade
	echo $PASSWD | sudo -S dnf -y install autoconf automake bzip2 bzip2-devel byacc cairo-devel cmake cpp curl curl-devel flex  fontconfig-devel fontconfig-devel.x86_64 gcc gcc-c++ gcc-gfortran git java-11-openjdk java-11-openjdk-devel ksh libX11-devel libX11-devel.x86_64 libXaw libXaw-devel libXext-devel libXext-devel.x86_64 libXmu-devel libXrender-devel libXrender-devel.x86_64 libstdc++ libstdc++-devel  libxml2 libxml2-devel m4  .x86_64 nfs-utils perl pkgconfig  pixman-devel python3 python3-devel tcsh time unzip wget
	echo $PASSWD | sudo -S dnf -y groupinstall "Development Tools"
	echo $PASSWD | sudo -S dnf -y update
	echo $PASSWD | sudo -S dnf -y upgrade

	echo " "
	##############################Directory Listing############################
	export HOME=$(
		cd
		pwd
	)

	mkdir $HOME/WRFHYDRO_COUPLED
	export WRFHYDRO_FOLDER=$HOME/WRFHYDRO_COUPLED
	cd $WRFHYDRO_FOLDER/
	mkdir Downloads
	mkdir WRFPLUS
	mkdir WRFDA
	mkdir Libs
	export DIR=$WRFHYDRO_FOLDER/Libs
	mkdir Libs/grib2
	mkdir Libs/NETCDF
	mkdir Libs/MPICH
	mkdir -p Tests/Environment
	mkdir -p Tests/Compatibility

	echo " "
	#############################Core Management####################################

	export CPU_CORE=$(nproc) # number of available threads on system
	export CPU_6CORE="6"
	export CPU_HALF=$(($CPU_CORE / 2))                    #half of availble cores on system
	export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2))) #Forces CPU cores to even number to avoid partial core export. ie 7 cores would be 3.5 cores.

	if [ $CPU_CORE -le $CPU_6CORE ]; then #If statement for low core systems.  Forces computers to only use 1 core if there are 4 cores or less on the system.
		export CPU_HALF_EVEN="2"
	else
		export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))
	fi

	echo "##########################################"
	echo "Number of Threads being used $CPU_HALF_EVEN"
	echo "##########################################"

	echo " "
	##############################Downloading Libraries############################
	#Force use of ipv4 with -4
	cd Downloads
	wget -c https://github.com/madler/zlib/archive/refs/tags/v$Zlib_Version.tar.gz
	wget -c https://github.com/HDFGroup/hdf5/archive/refs/tags/hdf5-$HDF5_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-c/archive/refs/tags/v$Netcdf_C_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-fortran/archive/refs/tags/v$Netcdf_Fortran_Version.tar.gz
	wget -c https://github.com/pmodels/mpich/releases/download/v$Mpich_Version/mpich-$Mpich_Version.tar.gz
	wget -c https://download.sourceforge.net/libpng/libpng-$Libpng_Version.tar.gz
	wget -c https://www.ece.uvic.ca/~frodo/jasper/software/jasper-$Jasper_Version.zip
	wget -c https://parallel-netcdf.github.io/Release/pnetcdf-$Pnetcdf_Version.tar.gz
	wget -c https://sourceforge.net/projects/opengrads/files/grads2/2.2.1.oga.1/Linux%20%2864%20Bits%29/opengrads-2.2.1.oga.1-bundle-x86_64-pc-linux-gnu-glibc_2.17.tar.gz

	echo " "
	####################################Compilers#####################################
	export CC=gcc
	export CXX=g++
	export FC=gfortran
	export F77=gfortran
	export CFLAGS="-fPIC -fPIE -O3"

	#IF statement for GNU compiler issue
	export GCC_VERSION=$(gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		export fallow_argument=-fallow-argument-mismatch
		export boz_argument=-fallow-invalid-boz
	else
		export fallow_argument=
		export boz_argument=
	fi

	export FFLAGS="$fallow_argument -m64"
	export FCFLAGS="$fallow_argument -m64"

	echo "##########################################"
	echo "FFLAGS = $FFLAGS"
	echo "FCFLAGS = $FCFLAGS"
	echo "CFLAGS = $CFLAGS"
	echo "##########################################"

	echo " "
	#############################zlib############################
	#Uncalling compilers due to comfigure issue with zlib$Zlib_Version
	#With CC & CXX definied ./configure uses different compiler Flags

	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf v$Zlib_Version.tar.gz
	cd zlib-$Zlib_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log
	./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "
	##############################MPICH############################
	#F90= due to compiler issues with mpich install
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf mpich-$Mpich_Version.tar.gz
	cd mpich-$Mpich_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	F90= ./configure --prefix=$DIR/MPICH --with-device=ch3 FFLAGS=$fallow_argument FCFLAGS=$fallow_argument 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	# make check

	export PATH=$DIR/MPICH/bin:$PATH
	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx

	echo " "
	#############################libpng############################
	cd $WRFHYDRO_FOLDER/Downloads
	export LDFLAGS=-L$DIR/grib2/lib
	export CPPFLAGS=-I$DIR/grib2/include
	tar -xvzf libpng-$Libpng_Version.tar.gz
	cd libpng-$Libpng_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check
	echo " "
	#############################JasPer############################
	cd $WRFHYDRO_FOLDER/Downloads
	unzip jasper-$Jasper_Version.zip
	cd jasper-$Jasper_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	./configure --prefix=$DIR/grib2
	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export JASPERLIB=$DIR/grib2/lib
	export JASPERINC=$DIR/grib2/include

	echo " "
	#############################hdf5 library for netcdf4 functionality############################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf hdf5-$HDF5_Version.tar.gz
	cd hdf5-hdf5-$HDF5_Version
	autoreconf -i -f 2>&1 | tee autoreconf.log
	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 --with-zlib=$DIR/grib2 --enable-hl --enable-fortran --enable-parallel 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export HDF5=$DIR/grib2
	export PHDF5=$DIR/grib2
	export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH

	echo " "
	#############################Install Parallel-netCDF##############################
	#Make file created with half of available cpu cores
	#Hard path for MPI added
	##################################################################################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf pnetcdf-$Pnetcdf_Version.tar.gz
	cd pnetcdf-$Pnetcdf_Version
	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx
	autoreconf -i -f 2>&1 | tee autoreconf.log
	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 --enable-shared --enable-static 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PNETCDF=$DIR/grib2

	echo " "

	##############################Install NETCDF C Library############################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xzvf v$Netcdf_C_Version.tar.gz
	cd netcdf-c-$Netcdf_C_Version/
	export CPPFLAGS=-I$DIR/grib2/include
	export LDFLAGS=-L$DIR/grib2/lib
	export LIBS="-lhdf5_hl -lhdf5 -lz -lcurl -lgfortran -lgcc -lm -ldl -lpnetcdf"
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --disable-dap --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-pnetcdf --enable-cdf5 --enable-parallel-tests 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PATH=$DIR/NETCDF/bin:$PATH
	export NETCDF=$DIR/NETCDF
	echo " "
	##############################NetCDF fortran library############################
	cd $WRFHYDRO_FOLDER/Downloads
	tar -xvzf v$Netcdf_Fortran_Version.tar.gz
	cd netcdf-fortran-$Netcdf_Fortran_Version/
	export LD_LIBRARY_PATH=$DIR/NETCDF/lib:$LD_LIBRARY_PATH
	export CPPFLAGS="-I$DIR/NETCDF/include -I$DIR/grib2/include"
	export LDFLAGS="-L$DIR/NETCDF/lib -L$DIR/grib2/lib"
	export LIBS="-lnetcdf -lpnetcdf -lcurl -lhdf5_hl -lhdf5 -lz -lm -ldl -lgcc -lgfortran"
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-parallel-tests --enable-hdf5 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "
	#################################### System Environment Tests ##############

	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_NETCDF_MPI_tests.tar
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_tests.tar

	tar -xvf Fortran_C_tests.tar -C $WRFHYDRO_FOLDER/Tests/Environment
	tar -xvf Fortran_C_NETCDF_MPI_tests.tar -C $WRFHYDRO_FOLDER/Tests/Compatibility

	export one="1"
	echo " "
	############## Testing Environment #####

	cd $WRFHYDRO_FOLDER/Tests/Environment

	cp ${NETCDF}/include/netcdf.inc .

	echo " "
	echo " "
	echo "Environment Testing "
	echo "Test 1"
	$FC TEST_1_fortran_only_fixed.f
	./a.out | tee env_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 1 Passed"
	else
		echo "Environment Compiler Test 1 Failed"
		exit
	fi
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 2"
	$FC TEST_2_fortran_only_free.f90
	./a.out | tee env_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 2 Passed"
	else
		echo "Environment Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 3"
	$CC TEST_3_c_only.c
	./a.out | tee env_test3.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test3.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 3 Passed"
	else
		echo "Environment Compiler Test 3 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 4"
	$CC -c -m64 TEST_4_fortran+c_c.c
	$FC -c -m64 TEST_4_fortran+c_f.f90
	$FC -m64 TEST_4_fortran+c_f.o TEST_4_fortran+c_c.o
	./a.out | tee env_test4.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test4.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 4 Passed"
	else
		echo "Environment Compiler Test 4 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	############## Testing Environment #####

	cd $WRFHYDRO_FOLDER/Tests/Compatibility

	cp ${NETCDF}/include/netcdf.inc .

	echo " "
	echo " "
	echo "Library Compatibility Tests "
	echo "Test 1"
	$FC -c 01_fortran+c+netcdf_f.f
	$CC -c 01_fortran+c+netcdf_c.c
	$FC 01_fortran+c+netcdf_f.o 01_fortran+c+netcdf_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	./a.out | tee comp_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 1 Passed"
	else
		echo "Compatibility Compiler Test 1 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "

	echo "Test 2"
	$MPIFC -c 02_fortran+c+netcdf+mpi_f.f
	$MPICC -c 02_fortran+c+netcdf+mpi_c.c
	$MPIFC 02_fortran+c+netcdf+mpi_f.o \
		02_fortran+c+netcdf+mpi_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	$DIR/MPICH/bin/mpirun ./a.out | tee comp_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 2 Passed"
	else
		echo "Compatibility Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."
	echo " "

	echo " All tests completed and passed"
	echo " "

	###############################NCEPlibs#####################################
	#The libraries are built and installed with
	# ./make_ncep_libs.sh -s MACHINE -c COMPILER -d NCEPLIBS_DIR -o OPENMP [-m mpi] [-a APPLICATION]
	#It is recommended to install the NCEPlibs into their own directory, which must be created before running the installer. Further information on the command line arguments can be obtained with
	# ./make_ncep_libs.sh -h

	#If iand error occurs go to https://github.com/NCAR/NCEPlibs/pull/16/files make adjustment and re-run ./make_ncep_libs.sh
	############################################################################

	cd $WRFHYDRO_FOLDER/Downloads
	git clone https://github.com/NCAR/NCEPlibs.git
	cd NCEPlibs
	mkdir $DIR/nceplibs

	export JASPER_INC=$DIR/grib2/include
	export PNG_INC=$DIR/grib2/include
	export NETCDF=$DIR/NETCDF

	#for loop to edit linux.gnu for nceplibs to install
	#make if statement for gcc-9 or older
	export GCC_VERSION=$(gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		y="24 28 32 36 40 45 49 53 56 60 64 68 69 73 74 79"
		for X in $y; do
			sed -i "${X}s/= /= $fallow_argument $boz_argument /g" $WRFHYDRO_FOLDER/Downloads/NCEPlibs/macros.make.linux.gnu
		done
	else
		echo ""
		echo "Loop not needed"
	fi

	if [ ${auto_config} -eq 1 ]; then
		echo yes | ./make_ncep_libs.sh -s linux -c gnu -d $DIR/nceplibs -o 0 -m 1 -a upp | tee make.install.log
	else
		./make_ncep_libs.sh -s linux -c gnu -d $DIR/nceplibs -o 0 -m 1 -a upp | tee make.install.log
	fi

	export PATH=$DIR/nceplibs:$PATH

	echo " "
	################################UPPv4.1######################################
	#Previous verison of UPP
	#WRF Support page recommends UPPV4.1 due to too many changes to WRF and UPP code
	#since the WRF was written
	#Option 8 gfortran compiler with distributed memory
	#############################################################################
	cd $WRFHYDRO_FOLDER/
	git clone -b dtc_post_v4.1.0 --recurse-submodules https://github.com/NOAA-EMC/EMC_post UPPV4.1
	cd UPPV4.1
	mkdir postprd
	export NCEPLIBS_DIR=$DIR/nceplibs
	export NETCDF=$DIR/NETCDF

	if [ ${auto_config} -eq 1 ]; then
		echo 8 | ./configure #Option 8 gfortran compiler with distributed memory
	else
		./configure #Option 8 gfortran compiler with distributed memory
	fi

	#make if statement for gcc-9 or older
	export GCC_VERSION=$(gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		z="58 63"
		for X in $z; do
			sed -i "${X}s/(FOPT)/(FOPT) $fallow_argument $boz_argument  /g" $WRFHYDRO_FOLDER/UPPV4.1/configure.upp
		done
	else
		echo ""
		echo "Loop not needed"
	fi

	./compile
	cd $WRFHYDRO_FOLDER/UPPV4.1/scripts
	echo $PASSWD | sudo -S cpan install XML::LibXML
	chmod +x run_unipost

	# IF statement to check that all files were created.
	cd $WRFHYDRO_FOLDER/UPPV4.1/exec
	n=$(ls ./*.exe | wc -l)
	if (($n == 1)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing UPPV4.1. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files. Exiting the script."
		read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
		exit
	fi

	echo " "

	######################## ARWpost V3.1  ############################
	## ARWpost
	##Configure #3
	###################################################################
	cd $WRFHYDRO_FOLDER/Downloads
	wget -c http://www2.mmm.ucar.edu/wrf/src/ARWpost_V3.tar.gz
	tar -xvzf ARWpost_V3.tar.gz -C $WRFHYDRO_FOLDER/
	cd $WRFHYDRO_FOLDER/ARWpost
	./clean -a
	sed -i -e 's/-lnetcdf/-lnetcdff -lnetcdf/g' $WRFHYDRO_FOLDER/ARWpost/src/Makefile
	export NETCDF=$DIR/NETCDF

	if [ ${auto_config} -eq 1 ]; then
		echo 3 | ./configure #Option 3 gfortran compiler with distributed memory
	else
		./configure #Option 3 gfortran compiler with distributed memory
	fi

	export GCC_VERSION=$(gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		sed -i '32s/-ffree-form -O -fno-second-underscore -fconvert=big-endian -frecord-marker=4/-ffree-form -O -fno-second-underscore -fconvert=big-endian -frecord-marker=4 ${fallow_argument} /g' configure.arwp
	fi

	sed -i -e 's/-C -P -traditional/-P -traditional/g' $WRFHYDRO_FOLDER/ARWpost/configure.arwp
	./compile

	export PATH=$WRFHYDRO_FOLDER/ARWpost/ARWpost.exe:$PATH

	echo " "
	################################ OpenGrADS ##################################
	#Verison 2.2.1 32bit of Linux
	#############################################################################
	if [[ $GRADS_PICK -eq 1 ]]; then
		cd $WRFHYDRO_FOLDER/Downloads
		tar -xzvf opengrads-2.2.1.oga.1-bundle-x86_64-pc-linux-gnu-glibc_2.17.tar.gz -C $WRFHYDRO_FOLDER/
		cd $WRFHYDRO_FOLDER/
		mv $WRFHYDRO_FOLDER/opengrads-2.2.1.oga.1 $WRFHYDRO_FOLDER/GrADS
		cd GrADS/Contents
		wget -c https://github.com/regisgrundig/SIMOP/blob/master/g2ctl.pl
		chmod +x g2ctl.pl
		wget -c https://sourceforge.net/projects/opengrads/files/wgrib2/0.1.9.4/wgrib2-v0.1.9.4-bin-i686-glib2.5-linux-gnu.tar.gz
		tar -xzvf wgrib2-v0.1.9.4-bin-i686-glib2.5-linux-gnu.tar.gz
		cd wgrib2-v0.1.9.4/bin
		mv wgrib2 $WRFHYDRO_FOLDER/GrADS/Contents
		cd $WRFHYDRO_FOLDER/GrADS/Contents
		rm wgrib2-v0.1.9.4-bin-i686-glib2.5-linux-gnu.tar.gz
		rm -r wgrib2-v0.1.9.4

		export PATH=$WRFHYDRO_FOLDER/GrADS/Contents:$PATH

		echo " "
	fi
	################################## GrADS ###############################
	# Version  2.2.1
	# Sublibs library instructions: http://cola.gmu.edu/grads/gadoc/supplibs2.html
	# GrADS instructions: http://cola.gmu.edu/grads/downloads.php
	########################################################################
	if [[ $GRADS_PICK -eq 2 ]]; then
		cd $WRFHYDRO_FOLDER/Downloads
		wget -c ftp://cola.gmu.edu/grads/2.2/grads-2.2.1-bin-centos7.4-x86_64.tar.gz
		tar -xzvf grads-2.2.1-bin-centos7.4-x86_64.tar.gz -C $WRFHYDRO_FOLDER
		cd $WRFHYDRO_FOLDER/grads-2.2.1/bin
		chmod 775 *

	fi

	echo " "
	##################### NCAR COMMAND LANGUAGE           ##################
	########### NCL compiled via Conda                    ##################
	########### This is the preferred method by NCAR      ##################
	########### https://www.ncl.ucar.edu/index.shtml      ##################

	#Installing Miniconda3 to WRF-Hydro directory and updating libraries
	pip install --upgrade --force-reinstall zstandard
	pip install --upgrade --force-reinstall zstd
	pip3 install --upgrade --force-reinstall zstandard
	pip3 install --upgrade --force-reinstall zstd
	export Miniconda_Install_DIR=$WRFHYDRO_FOLDER/miniconda3

	mkdir -p $Miniconda_Install_DIR

	wget -c https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $Miniconda_Install_DIR/miniconda.sh
	bash $Miniconda_Install_DIR/miniconda.sh -b -u -p $Miniconda_Install_DIR

	rm -rf $Miniconda_Install_DIR/miniconda.sh

	export PATH=$WRFHYDRO_FOLDER/miniconda3/bin:$PATH

	source $Miniconda_Install_DIR/etc/profile.d/conda.sh

	$Miniconda_Install_DIR/bin/conda init bash
	$Miniconda_Install_DIR/bin/conda init zsh
	$Miniconda_Install_DIR/bin/conda init tcsh
	$Miniconda_Install_DIR/bin/conda init xonsh
	$Miniconda_Install_DIR/bin/conda init powershell

	conda config --add channels conda-forge
	conda config --set auto_activate_base false
	conda update -n root --all -y

	echo " "

	echo " "
	#Installing NCL via Conda
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda init bash
	conda activate base
	conda create -n ncl_stable -c conda-forge ncl -y
	conda activate ncl_stable

	conda deactivate
	conda deactivate
	conda deactivate

	echo " "

	############################## RIP4 #####################################
	mkdir $WRFHYDRO_FOLDER/RIP4
	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://www2.mmm.ucar.edu/wrf/src/RIP_47.tar.gz
	tar -xvzf RIP_47.tar.gz -C $WRFHYDRO_FOLDER/RIP4
	cd $WRFHYDRO_FOLDER/RIP4/RIP_47
	mv * ..
	cd $WRFHYDRO_FOLDER/RIP4
	rm -rd RIP_47
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda activate ncl_stable
	conda install -c conda-forge c-compiler fortran-compiler cxx-compiler -y

	export RIP_ROOT=$WRFHYDRO_FOLDER/RIP4
	export NETCDF=$DIR/NETCDF
	export NCARG_ROOT=$WRFHYDRO_FOLDER/anaconda3/envs/ncl_stable

	sed -i '349s|-L${NETCDF}/lib -lnetcdf $NETCDFF|-L${NETCDF}/lib $NETCDFF -lnetcdff -lnetcdf -lnetcdf -lnetcdff_C -lhdf5 |g' $WRFHYDRO_FOLDER/RIP4/configure

	sed -i '27s|NETCDFLIB	= -L${NETCDF}/lib -lnetcdf CONFIGURE_NETCDFF_LIB|NETCDFLIB	= -L</usr/lib/x86_64-linux-gnu/libm.a> -lm -L${NETCDF}/lib CONFIGURE_NETCDFF_LIB -lnetcdf -lhdf5 -lhdf5_hl -lgfortran -lgcc -lz |g' $WRFHYDRO_FOLDER/RIP4/arch/preamble

	sed -i '31s|-L${NCARG_ROOT}/lib -lncarg -lncarg_gks -lncarg_c -lX11 -lXext -lpng -lz CONFIGURE_NCARG_LIB| -L${NCARG_ROOT}/lib -lncarg -lncarg_gks -lncarg_c -lX11 -lXext -lpng -lz -lcairo -lfontconfig -lpixman-1 -lfreetype -lexpat -lpthread -lbz2 -lXrender -lgfortran -lgcc -L</usr/lib/x86_64-linux-gnu/> -lm -lhdf5 -lhdf5_hl |g' $WRFHYDRO_FOLDER/RIP4/arch/preamble

	sed -i '33s| -O|-fallow-argument-mismatch -O |g' $WRFHYDRO_FOLDER/RIP4/arch/configure.defaults

	sed -i '35s|=|= -L$WRFHYDRO_FOLDER/LIBS/grib2/lib -lhdf5 -lhdf5_hl |g' $WRFHYDRO_FOLDER/RIP4/arch/configure.defaults

	if [ ${auto_config} -eq 1 ]; then
		echo 3 | ./configure #Option 3 gfortran compiler with distributed memory
	else
		./configure #Option 3 gfortran compiler with distributed memory
	fi

	./compile

	conda deactivate
	conda deactivate
	conda deactivate

	echo " "
	##################### WRF Python           ##################
	########### WRf-Python compiled via Conda  ##################
	########### This is the preferred method by NCAR      ##################
	##### https://wrf-python.readthedocs.io/en/latest/installation.html  ##################
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
conda env create -f $HOME/WRF-MOSIT/wrf-python-stable.yml
	echo " "

	########################## WRF Hydro GIS PreProcessor ##############################
	#  Compiled with Conda
	#  https://github.com/NCAR/wrf_hydro_gis_preprocessor
	####################################################################################

	conda init bash
	conda activate base
	conda config --add channels conda-forge
	conda create -n wrfh_gis_env -c conda-forge python=3.10 gdal netCDF4 numpy pyproj whitebox=2.2.0 packaging shapely -y
	conda activate wrfh_gis_env
	conda update -n wrfh_gis_env --all -y
	conda deactivate
	conda deactivate
	conda deactivate
	cd $WRFHYDRO_FOLDER/
	git clone https://github.com/NCAR/wrf_hydro_gis_preprocessor.git $WRFHYDRO_FOLDER/WRF-Hydro-GIS-PreProcessor

	echo " "

	#reexporting compilers after conda installed to fix conda leak
	export CC=gcc
	export CXX=g++
	export FC=gfortran
	export F77=gfortran
	export CFLAGS="-fPIC -fPIE -O3"
	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx

	############################# WRF HYDRO V5.2.0 #################################
	# Version 5.2.0
	# Standalone mode
	################################################################################
	export NETCDF_INC=$DIR/NETCDF/include
	export NETCDF_LIB=$DIR/NETCDF/lib
	mkdir -p $WRFHYDRO_FOLDER/Hydro-Basecode
	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://github.com/NCAR/wrf_hydro_nwm_public/archive/refs/tags/v5.2.0.tar.gz -O WRFHYDRO.5.2.tar.gz
	tar -xvzf WRFHYDRO.5.2.tar.gz -C $WRFHYDRO_FOLDER/Hydro-Basecode

	#Modifying WRF-HYDRO Environment
	#Echo commands use due to lack of knowledge
	cd $WRFHYDRO_FOLDER/Hydro-Basecode/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS/template

	sed -i 's/SPATIAL_SOIL=0/SPATIAL_SOIL=1/g' setEnvar.sh           # Spatially distributed parameters for NoahMP: 0=Off, 1=On.
	sed -i 's/WRF_HYDRO_NUDGING=0/WRF_HYDRO_NUDGING=1/g' setEnvar.sh # Streamflow nudging: 0=Off, 1=On.
	echo " " >>setEnvar.sh
	echo "# Large netcdf file support: 0=Off, 1=On." >>setEnvar.sh
	echo "export WRFIO_NCD_LARGE_FILE_SUPPORT=1" >>setEnvar.sh
	cp -r setEnvar.sh $WRFHYDRO_FOLDER/Hydro-Basecode/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS

	cd $WRFHYDRO_FOLDER/Hydro-Basecode/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS

	if [ ${auto_config} -eq 1 ]; then
		echo 2 | ./configure 2>&1 | tee configure.log
	else
		./configure 2>&1 | tee configure.log #option 2 for gfortran
	fi

	./compile_offline_NoahMP.sh setEnvar.sh 2>&1 | tee compile_offline_NoahMP.log

	read -r -t 5 -p "I am going to wait for 5 seconds only ..."
	echo " "
	############################ WRF ${WPS_VERSION}  #################################
	## WRF v${WPS_VERSION}
	## Downloaded from git tagged releases
	# option 34, option 1 for gfortran and distributed memory w/basic nesting
	# large file support enable with WRFiO_NCD_LARGE_FILE_SUPPORT=1
	# In the namelist.input, the following settings support pNetCDF by setting value to 11:
	# io_form_boundary
	# io_form_history
	# io_form_auxinput2
	# io_form_auxhist2
	# Note that you need set nocolons = .true. in the section &time_control of namelist.input
	########################################################################
	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://github.com/wrf-model/WRF/releases/download/v${WRF_VERSION}/v${WRF_VERSION}.tar.gz -O WRF-${WRF_VERSION}.tar.gz
	tar -xvzf WRF-${WRF_VERSION}.tar.gz -C $WRFHYDRO_FOLDER/

	# If statment for changing folder name
	if [ -d "$WRFHYDRO_FOLDER/WRF" ]; then
		mv -f $WRFHYDRO_FOLDER/WRF $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}
	fi

	cd $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}
	export WRFIO_NCD_LARGE_FILE_SUPPORT=1

	#Replace old version of WRF-Hydro distributed with WRF with updated WRF-Hydro source code
	rm -r $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/hydro/
	cp -r $WRFHYDRO_FOLDER/Hydro-Basecode/wrf_hydro_nwm_public-5.2.0/trunk/NDHMS $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/hydro

	cd $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/hydro
	source setEnvar.sh
	cd $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}

	./clean

	# SED statements to fix configure error
	sed -i '186s/==/=/g' $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/configure
	sed -i '318s/==/=/g' $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/configure
	sed -i '919s/==/=/g' $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/configure

	if [ ${auto_config} -eq 1 ]; then
		sed -i '443s/.*/  $response = "34 \\n";/g' $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/arch/Config.pl # Answer for compiler choice
		sed -i '909s/.*/  $response = "1 \\n";/g' $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/arch/Config.pl  #Answer for basic nesting
		./configure 2>&1 | tee configure.log
	else
		./configure 2>&1 | tee configure.log #Option 34 gfortran compiler with distributed memory option 1 for basic nesting
	fi

	./compile -j $CPU_HALF_EVEN em_real 2>&1 | tee compile.wrf1.log

	# IF statement to check that all files were created.
	cd $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/main
	n=$(ls ./*.exe | wc -l)
	if (($n >= 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		cd $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}
		./compile -j $CPU_HALF_EVEN em_real 2>&1 | tee compile.wrf2.log
		cd $WRFHYDRO_FOLDER/WRFV${WRF_VERSION}/main
		n=$(ls ./*.exe | wc -l)
		if (($n >= 3)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "
	############################WPSV${WPS_VERSION}#####################################
	## WPS v${WPS_VERSION}
	## Downloaded from git tagged releases
	#Option 3 for gfortran and distributed memory
	########################################################################

	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://github.com/wrf-model/WPS/archive/refs/tags/v${WPS_VERSION}.tar.gz -O WPS-${WPS_VERSION}.tar.gz
	tar -xvzf WPS-${WPS_VERSION}.tar.gz -C $WRFHYDRO_FOLDER/
	cd $WRFHYDRO_FOLDER/WPS-${WPS_VERSION}
	./clean -a

	if [ ${auto_config} -eq 1 ]; then
		echo 3 | ./configure 2>&1 | tee configure.log #Option 3 for gfortran and distributed memory
	else
		./configure 2>&1 | tee configure.log #Option 3 gfortran compiler with distributed memory
	fi
	./compile 2>&1 | tee compile.wps.log

	echo " "
	# IF statement to check that all files were created.
	cd $WRFHYDRO_FOLDER/WPS-${WPS_VERSION}
	n=$(ls ./*.exe | wc -l)
	if (($n == 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		./compile 2>&1 | tee compile.wps2.log
		cd $WRFHYDRO_FOLDER/WPS-${WPS_VERSION}
		n=$(ls ./*.exe | wc -l)
		if (($n == 3)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "

	######################## WPS Domain Setup Tools ########################
	## DomainWizard
	cd $WRFHYDRO_FOLDER/Downloads
	wget -c http://esrl.noaa.gov/gsd/wrfportal/domainwizard/WRFDomainWizard.zip
	mkdir $WRFHYDRO_FOLDER/WRFDomainWizard
	unzip WRFDomainWizard.zip -d $WRFHYDRO_FOLDER/WRFDomainWizard
	chmod +x $WRFHYDRO_FOLDER/WRFDomainWizard/run_DomainWizard

	echo " "
	######################## WPF Portal Setup Tools ########################
	## WRFPortal
	cd $WRFHYDRO_FOLDER/Downloads
	wget -c https://esrl.noaa.gov/gsd/wrfportal/portal/wrf-portal.zip
	mkdir $WRFHYDRO_FOLDER/WRFPortal
	unzip wrf-portal.zip -d $WRFHYDRO_FOLDER/WRFPortal
	chmod +x $WRFHYDRO_FOLDER/WRFPortal/runWRFPortal

	echo " "

	######################## Static Geography Data inc/ Optional ####################
	# http://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	# These files are large so if you only need certain ones comment the others off
	# All files downloaded and untarred is 200GB
	# https://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	#################################################################################
	cd $WRFHYDRO_FOLDER/Downloads
	mkdir $WRFHYDRO_FOLDER/GEOG
	mkdir $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

	echo " "
	echo "Mandatory WRF Preprocessing System (WPS) Geographical Input Data Mandatory Fields Downloads"
	echo " "
	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_high_res_mandatory.tar.gz
	tar -xvzf geog_high_res_mandatory.tar.gz -C $WRFHYDRO_FOLDER/GEOG/

	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_low_res_mandatory.tar.gz
	tar -xvzf geog_low_res_mandatory.tar.gz -C $WRFHYDRO_FOLDER/GEOG/
	mv $WRFHYDRO_FOLDER/GEOG/WPS_GEOG_LOW_RES/ $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

	if [ ${WPS_Specific_Applications} -eq 1 ]; then
		echo " "
		echo " WPS Geographical Input Data Mandatory for Specific Applications"
		echo " "

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_thompson28_chem.tar.gz
		tar -xvzf geog_thompson28_chem.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_noahmp.tar.gz
		tar -xvzf geog_noahmp.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/irrigation.tar.gz
		tar -xvzf irrigation.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG
		mkdir $WRFHYDRO_FOLDER/GEOG/WPS_GEOG/irrigation
		mv $WRFHYDRDO_FOLDER/GEOG/WPS_GEOG/fao $WRFHYDRO_FOLDER/GEOG/WPS_GEOG/irrigation

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_px.tar.gz
		tar -xvzf geog_px.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_urban.tar.gz
		tar -xvzf geog_urban.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_ssib.tar.gz
		tar -xvzf geog_ssib.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/lake_depth.tar.bz2
		tar -xvf lake_depth.tar.bz2 -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/topobath_30s.tar.bz2
		tar -xvf topobath_30s.tar.bz2 -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/gsl_gwd.tar.bz2
		tar -xvf gsl_gwd.tar.bz2 -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG
	fi

	if [ ${Optional_GEOG} -eq 1 ]; then
		echo " "
		echo "Optional WPS Geographical Input Data"
		echo " "

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_older_than_2000.tar.gz
		tar -xvzf geog_older_than_2000.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s_with_lakes.tar.gz
		tar -xvzf modis_landuse_20class_15s_with_lakes.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_alt_lsm.tar.gz
		tar -xvzf geog_alt_lsm.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/nlcd2006_ll_9s.tar.bz2
		tar -xvf nlcd2006_ll_9s.tar.bz2 -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/updated_Iceland_LU.tar.gz
		tar -xvf updated_Iceland_LU.tar.gz -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s.tar.bz2
		tar -xvf modis_landuse_20class_15s.tar.bz2 -C $WRFHYDRO_FOLDER/GEOG/WPS_GEOG
	fi
fi

########################### WRF CHEM ##########################
## WRFCHEM installation with parallel process.
# Download and install required library and data files for WRFCHEM/KPP $ WRF 3DVAR for Chemistry.
# Tested in Ubuntu 20.0${WPS_VERSION} LTS & Ubuntu 22.04, Rocky Linux 9 & MacOS Ventura 64bit
# Built in 64-bit system
# Built with Intel or GNU compilers
# Tested with current available libraries on 10/10/2023
# If newer libraries exist edit script paths for changes
#Estimated Run Time ~ 90 - 150 Minutes with 10mb/s downloadspeed.
# Special thanks to:
# Youtube's meteoadriatic, GitHub user jamal919.
# University of Manchester's  Doug L
# University of Tunis El Manar's Hosni
# GSL's Jordan S.
# NCAR's Mary B., Christine W., & Carl D.
# DTC's Julie P., Tara J., George M., & John H.
# UCAR's Katelyn F., Jim B., Jordan P., Kevin M.,
##############################################################

if [ "$Ubuntu_64bit_GNU" = "1" ] && [ "$WRFCHEM_PICK" = "1" ]; then

	#############################basic package managment############################
	echo $PASSWD | sudo -S apt -y update
	echo $PASSWD | sudo -S apt -y upgrade && sudo -S apt -y autoremove
	echo $PASSWD | sudo -S apt -y install autoconf automake bison build-essential byacc cmake csh curl default-jdk default-jre emacs flex g++ gawk gcc gfortran git ksh libcurl4-openssl-dev libjpeg-dev libncurses6 libpixman-1-dev libpng-dev libtool libxml2 libxml2-dev m4 make  ncview okular openbox pipenv pkg-config  python3 python3-dev python3-pip python3-dateutil tcsh unzip xauth xorg time

	echo " "
	##############################Directory Listing############################
	export HOME=$(
		cd
		pwd
	)

	mkdir $HOME/WRFCHEM
	export WRFCHEM_FOLDER=$HOME/WRFCHEM
	cd $WRFCHEM_FOLDER/
	mkdir Downloads
	mkdir Libs
	export DIR=$WRFCHEM_FOLDER/Libs
	mkdir Libs/grib2
	mkdir Libs/NETCDF
	mkdir Libs/MPICH
	mkdir -p Tests/Environment
	mkdir -p Tests/Compatibility
	echo " "
	#############################Core Management####################################
	export CPU_CORE=$(nproc) # number of available threads on system
	export CPU_6CORE="6"
	export CPU_HALF=$(($CPU_CORE / 2))                    #half of availble cores on system
	export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2))) #Forces CPU cores to even number to avoid partial core export. ie 7 cores would be 3.5 cores.

	if [ $CPU_CORE -le $CPU_6CORE ]; then #If statement for low core systems.  Forces computers to only use 1 core if there are 4 cores or less on the system.
		export CPU_HALF_EVEN="2"
	else
		export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))
	fi

	echo "##########################################"
	echo "Number of Threads being used $CPU_HALF_EVEN"
	echo "##########################################"
	echo " "
	##############################Downloading Libraries############################
	cd Downloads
	wget -c https://github.com/madler/zlib/archive/refs/tags/v$Zlib_Version.tar.gz
	wget -c https://github.com/HDFGroup/hdf5/archive/refs/tags/hdf5-$HDF5_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-c/archive/refs/tags/v$Netcdf_C_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-fortran/archive/refs/tags/v$Netcdf_Fortran_Version.tar.gz
	wget -c https://download.sourceforge.net/libpng/libpng-$Libpng_Version.tar.gz
	wget -c https://www.ece.uvic.ca/~frodo/jasper/software/jasper-$Jasper_Version.zip
	wget -c https://github.com/pmodels/mpich/releases/download/v$Mpich_Version/mpich-$Mpich_Version.tar.gz
	wget -c https://parallel-netcdf.github.io/Release/pnetcdf-$Pnetcdf_Version.tar.gz
	wget -c https://sourceforge.net/projects/opengrads/files/grads2/2.2.1.oga.1/Linux%20%2864%20Bits%29/opengrads-2.2.1.oga.1-bundle-x86_64-pc-linux-gnu-glibc_2.17.tar.gz

	echo " "
	#############################Compilers############################
	export CC=gcc
	export CXX=g++
	export FC=gfortran
	export F77=gfortran
	export CFLAGS="-fPIC -fPIE -O3 "

	#IF statement for GNU compiler issue
	export GCC_VERSION=$(/usr/bin/gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(/usr/bin/gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(/usr/bin/g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		export fallow_argument=-fallow-argument-mismatch
		export boz_argument=-fallow-invalid-boz
	else
		export fallow_argument=
		export boz_argument=
	fi

	export FFLAGS="$fallow_argument -m64"
	export FCFLAGS="$fallow_argument -m64"

	echo "##########################################"
	echo "FFLAGS = $FFLAGS"
	echo "FCFLAGS = $FCFLAGS"
	echo "CFLAGS = $CFLAGS"
	echo "##########################################"

	echo " "
	#############################zlib############################
	#Uncalling compilers due to comfigure issue with zlib$Zlib_Version
	#With CC & CXX definied ./configure uses different compiler Flags

	cd $WRFCHEM_FOLDER/Downloads
	tar -xvzf v$Zlib_Version.tar.gz
	cd zlib-$Zlib_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log
	./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "
	##############################MPICH############################
	cd $WRFCHEM_FOLDER/Downloads
	tar -xvzf mpich-$Mpich_Version.tar.gz
	cd mpich-$Mpich_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	F90= ./configure --prefix=$DIR/MPICH --with-device=ch3 FFLAGS="$fallow_argument -m64" FCFLAGS="$fallow_argument -m64" 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PATH=$DIR/MPICH/bin:$PATH
	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx

	echo " "
	#############################libpng############################
	cd $WRFCHEM_FOLDER/Downloads
	export LDFLAGS=-L$DIR/grib2/lib
	export CPPFLAGS=-I$DIR/grib2/include
	tar -xvzf libpng-$Libpng_Version.tar.gz
	cd libpng-$Libpng_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check
	echo " "
	#############################JasPer############################
	cd $WRFCHEM_FOLDER/Downloads
	unzip jasper-$Jasper_Version.zip
	cd jasper-$Jasper_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export JASPERLIB=$DIR/grib2/lib
	export JASPERINC=$DIR/grib2/include

	echo " "
	#############################hdf5 library for netcdf4 functionality############################
	cd $WRFCHEM_FOLDER/Downloads
	tar -xvzf hdf5-$HDF5_Version.tar.gz
	cd hdf5-hdf5-$HDF5_Version
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 --with-zlib=$DIR/grib2 --enable-hl --enable-fortran --enable-parallel 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export HDF5=$DIR/grib2
	export PHDF5=$DIR/grib2
	export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH

	echo " "

	#############################Install Parallel-netCDF##############################
	#Make file created with half of available cpu cores
	#Hard path for MPI added
	##################################################################################
	cd $WRFCHEM_FOLDER/Downloads
	tar -xzvf pnetcdf-$Pnetcdf_Version.tar.gz
	cd pnetcdf-$Pnetcdf_Version
	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx
	autoreconf -i -f 2>&1 | tee autoreconf.log
	./configure --prefix=$DIR/grib2 --enable-shared --enable-static 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PNETCDF=$DIR/grib2

	echo " "

	##############################Install NETCDF C Library############################
	cd $WRFCHEM_FOLDER/Downloads
	tar -xzvf v$Netcdf_C_Version.tar.gz
	cd netcdf-c-$Netcdf_C_Version/
	export CPPFLAGS=-I$DIR/grib2/include
	export LDFLAGS=-L$DIR/grib2/lib
	export LIBS="-lhdf5_hl -lhdf5 -lz -lcurl -lgfortran -lgcc -lm -ldl -lpnetcdf"
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --disable-dap --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-pnetcdf --enable-cdf5 --enable-parallel-tests 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PATH=$DIR/NETCDF/bin:$PATH
	export NETCDF=$DIR/NETCDF
	echo " "
	##############################NetCDF fortran library############################
	cd $WRFCHEM_FOLDER/Downloads
	tar -xvzf v$Netcdf_Fortran_Version.tar.gz
	cd netcdf-fortran-$Netcdf_Fortran_Version/
	export LD_LIBRARY_PATH=$DIR/NETCDF/lib:$LD_LIBRARY_PATH
	export CPPFLAGS="-I$DIR/NETCDF/include -I$DIR/grib2/include"
	export LDFLAGS="-L$DIR/NETCDF/lib -L$DIR/grib2/lib"
	export LIBS="-lnetcdf -lpnetcdf -lcurl -lhdf5_hl -lhdf5 -lz -lm -ldl -lgcc -lgfortran"
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-parallel-tests --enable-hdf5 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "
	#################################### System Environment Tests ##############

	cd $WRFCHEM_FOLDER/Downloads
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_NETCDF_MPI_tests.tar
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_tests.tar

	tar -xvf Fortran_C_tests.tar -C $WRFCHEM_FOLDER/Tests/Environment
	tar -xvf Fortran_C_NETCDF_MPI_tests.tar -C $WRFCHEM_FOLDER/Tests/Compatibility
	export one="1"
	echo " "
	############## Testing Environment #####

	cd $WRFCHEM_FOLDER/Tests/Environment
	cp ${NETCDF}/include/netcdf.inc .

	echo " "
	echo " "
	echo "Environment Testing "
	echo "Test 1"
	$FC TEST_1_fortran_only_fixed.f
	./a.out | tee env_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 1 Passed"
	else
		echo "Environment Compiler Test 1 Failed"
		exit
	fi
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 2"
	$FC TEST_2_fortran_only_free.f90
	./a.out | tee env_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 2 Passed"
	else
		echo "Environment Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 3"
	$CC TEST_3_c_only.c
	./a.out | tee env_test3.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test3.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 3 Passed"
	else
		echo "Environment Compiler Test 3 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 4"
	$CC -c -m64 TEST_4_fortran+c_c.c
	$FC -c -m64 TEST_4_fortran+c_f.f90
	$FC -m64 TEST_4_fortran+c_f.o TEST_4_fortran+c_c.o
	./a.out | tee env_test4.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test4.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 4 Passed"
	else
		echo "Environment Compiler Test 4 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	############## Testing Environment #####

	cd $WRFCHEM_FOLDER/Tests/Compatibility

	cp ${NETCDF}/include/netcdf.inc .

	echo " "
	echo " "
	echo "Library Compatibility Tests "
	echo "Test 1"
	$FC -c 01_fortran+c+netcdf_f.f
	$CC -c 01_fortran+c+netcdf_c.c
	$FC 01_fortran+c+netcdf_f.o 01_fortran+c+netcdf_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	./a.out | tee comp_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 1 Passed"
	else
		echo "Compatibility Compiler Test 1 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "

	echo "Test 2"
	$MPIFC -c 02_fortran+c+netcdf+mpi_f.f
	$MPICC -c 02_fortran+c+netcdf+mpi_c.c
	$MPIFC 02_fortran+c+netcdf+mpi_f.o \
		02_fortran+c+netcdf+mpi_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	$DIR/MPICH/bin/mpirun ./a.out | tee comp_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 2 Passed"
	else
		echo "Compatibility Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."
	echo " "

	echo " All tests completed and passed"
	echo " "

	###############################NCEPlibs#####################################
	#The libraries are built and installed with
	# ./make_ncep_libs.sh -s MACHINE -c COMPILER -d NCEPLIBS_DIR -o OPENMP [-m mpi] [-a APPLICATION]
	#It is recommended to install the NCEPlibs into their own directory, which must be created before running the installer. Further information on the command line arguments can be obtained with
	# ./make_ncep_libs.sh -h

	#If iand error occurs go to https://github.com/NCAR/NCEPlibs/pull/16/files make adjustment and re-run ./make_ncep_libs.sh
	############################################################################

	cd $WRFCHEM_FOLDER/Downloads
	git clone https://github.com/NCAR/NCEPlibs.git
	cd NCEPlibs
	mkdir $DIR/nceplibs

	export JASPER_INC=$DIR/grib2/include
	export PNG_INC=$DIR/grib2/include
	export NETCDF=$DIR/NETCDF

	#for loop to edit linux.gnu for nceplibs to install
	#make if statement for gcc-9 or older
	export GCC_VERSION=$(/usr/bin/gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(/usr/bin/gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(/usr/bin/g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		y="24 28 32 36 40 45 49 53 56 60 64 68 69 73 74 79"
		for X in $y; do
			sed -i "${X}s/= /= $fallow_argument $boz_argument /g" $WRFCHEM_FOLDER/Downloads/NCEPlibs/macros.make.linux.gnu
		done
	else
		echo ""
		echo "Loop not needed"
	fi

	if [ ${auto_config} -eq 1 ]; then
		echo yes | ./make_ncep_libs.sh -s linux -c gnu -d $DIR/nceplibs -o 0 -m 1 -a upp
	else
		./make_ncep_libs.sh -s linux -c gnu -d $DIR/nceplibs -o 0 -m 1 -a upp
	fi

	export PATH=$DIR/nceplibs:$PATH

	echo " "
	################################UPPv4.1######################################
	#Previous verison of UPP
	#WRF Support page recommends UPPV4.1 due to too many changes to WRF and UPP code
	#since the WRF was written
	#Option 8 gfortran compiler with distributed memory
	#############################################################################
	cd $WRFCHEM_FOLDER/
	git clone -b dtc_post_v4.1.0 --recurse-submodules https://github.com/NOAA-EMC/EMC_post UPPV4.1
	cd UPPV4.1
	mkdir postprd
	export NCEPLIBS_DIR=$DIR/nceplibs
	export NETCDF=$DIR/NETCDF

	if [ ${auto_config} -eq 1 ]; then
		echo 8 | ./configure #Option 8 gfortran compiler with distributed memory
	else
		./configure #Option 8 gfortran compiler with distributed memory
	fi

	echo " "
	#make if statement for gcc-9 or older
	export GCC_VERSION=$(/usr/bin/gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(/usr/bin/gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(/usr/bin/g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		z="58 63"
		for X in $z; do
			sed -i "${X}s/(FOPT)/(FOPT) $fallow_argument $boz_argument  /g" $WRFCHEM_FOLDER/UPPV4.1/configure.upp
		done
	else
		echo ""
		echo "Loop not needed"
	fi

	./compile
	cd $WRFCHEM_FOLDER/UPPV4.1/scripts
	echo $PASSWD | sudo -S cpan install XML::LibXML
	chmod +x run_unipost

	echo " "
	######################## ARWpost V3.1  ############################
	## ARWpost
	##Configure #3
	###################################################################
	cd $WRFCHEM_FOLDER/Downloads
	wget -c http://www2.mmm.ucar.edu/wrf/src/ARWpost_V3.tar.gz
	tar -xvzf ARWpost_V3.tar.gz -C $WRFCHEM_FOLDER/
	cd $WRFCHEM_FOLDER/ARWpost
	./clean -a
	sed -i -e 's/-lnetcdf/-lnetcdff -lnetcdf/g' $WRFCHEM_FOLDER/ARWpost/src/Makefile
	export NETCDF=$DIR/NETCDF

	if [ ${auto_config} -eq 1 ]; then
		echo 3 | ./configure #Option 3 gfortran compiler with distributed memory
	else
		./configure #Option 3 gfortran compiler with distributed memory
	fi

	export GCC_VERSION=$(/usr/bin/gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(/usr/bin/gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(/usr/bin/g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		sed -i '32s/-ffree-form -O -fno-second-underscore -fconvert=big-endian -frecord-marker=4/-ffree-form -O -fno-second-underscore -fconvert=big-endian -frecord-marker=4 ${fallow_argument} /g' configure.arwp
	fi

	sed -i -e 's/-C -P -traditional/-P -traditional/g' $WRFCHEM_FOLDER/ARWpost/configure.arwp
	./compile

	export PATH=$WRFCHEM_FOLDER/ARWpost/ARWpost.exe:$PATH

	echo " "
	################################ OpenGrADS ##################################
	#Verison 2.2.1 32bit of Linux
	#############################################################################
	if [[ $GRADS_PICK -eq 1 ]]; then

		cd $WRFCHEM_FOLDER/Downloads
		tar -xzvf opengrads-2.2.1.oga.1-bundle-x86_64-pc-linux-gnu-glibc_2.17.tar.gz -C $WRFCHEM_FOLDER/
		cd $WRFCHEM_FOLDER/
		mv $WRFCHEM_FOLDER/opengrads-2.2.1.oga.1 $WRFCHEM_FOLDER/GrADS
		cd GrADS/Contents
		wget -c https://github.com/regisgrundig/SIMOP/blob/master/g2ctl.pl
		chmod +x g2ctl.pl
		wget -c https://sourceforge.net/projects/opengrads/files/wgrib2/0.1.9.4/wgrib2-v0.1.9.4-bin-i686-glib2.5-linux-gnu.tar.gz
		tar -xzvf wgrib2-v0.1.9.4-bin-i686-glib2.5-linux-gnu.tar.gz
		cd wgrib2-v0.1.9.4/bin
		mv wgrib2 $WRFCHEM_FOLDER/GrADS/Contents
		cd $WRFCHEM_FOLDER/GrADS/Contents
		rm wgrib2-v0.1.9.4-bin-i686-glib2.5-linux-gnu.tar.gz
		rm -r wgrib2-v0.1.9.4

		export PATH=$WRFCHEM_FOLDER/GrADS/Contents:$PATH

	fi

	echo " "

	################################## GrADS ###############################
	# Version  2.2.1
	# Sublibs library instructions: http://cola.gmu.edu/grads/gadoc/supplibs2.html
	# GrADS instructions: http://cola.gmu.edu/grads/downloads.php
	########################################################################
	if [[ $GRADS_PICK -eq 2 ]]; then

		echo $PASSWD | sudo -S apt -y install grads

	fi

	##################### NCAR COMMAND LANGUAGE           ##################
	########### NCL compiled via Conda                    ##################
	########### This is the preferred method by NCAR      ##################
	########### https://www.ncl.ucar.edu/index.shtml      ##################
	echo " "
	#Installing Miniconda3 to WRF directory and updating libraries
	pip install --upgrade --force-reinstall zstandard
	pip install --upgrade --force-reinstall zstd
	pip3 install --upgrade --force-reinstall zstandard
	pip3 install --upgrade --force-reinstall zstd
	export Miniconda_Install_DIR=$WRFCHEM_FOLDER/miniconda3

	mkdir -p $Miniconda_Install_DIR

	wget -c https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $Miniconda_Install_DIR/miniconda.sh
	bash $Miniconda_Install_DIR/miniconda.sh -b -u -p $Miniconda_Install_DIR

	rm -rf $Miniconda_Install_DIR/miniconda.sh

	export PATH=$WRFHYDRO_FOLDER/miniconda3/bin:$PATH

	source $Miniconda_Install_DIR/etc/profile.d/conda.sh

	$Miniconda_Install_DIR/bin/conda init bash
	$Miniconda_Install_DIR/bin/conda init zsh
	$Miniconda_Install_DIR/bin/conda init tcsh
	$Miniconda_Install_DIR/bin/conda init xonsh
	$Miniconda_Install_DIR/bin/conda init powershell

	conda config --add channels conda-forge
	conda config --set auto_activate_base false
	conda update -n root --all -y

	echo " "

	echo " "
	#Installing NCL via Conda
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda init bash
	conda activate base
	conda create -n ncl_stable -c conda-forge ncl -y
	conda activate ncl_stable

	conda deactivate
	conda deactivate
	conda deactivate

	echo " "

	############################OBSGRID###############################
	## OBSGRID
	## Downloaded from git tagged releases
	## Option #2
	########################################################################
	cd $WRFCHEM_FOLDER/
	git clone https://github.com/wrf-model/OBSGRID.git
	cd $WRFCHEM_FOLDER/OBSGRID

	./clean -a
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda init bash
	conda activate ncl_stable

	export HOME=$(
		cd
		pwd
	)
	export DIR=$WRFCHEM_FOLDER/Libs
	export NETCDF=$DIR/NETCDF

	if [ ${auto_config} -eq 1 ]; then
		echo 2 | ./configure 2>&1 | tee configure.log #Option 2 for gfortran/gcc and distribunted memory
	else
		./configure 2>&1 | tee configure.log #Option 2 for gfortran/gcc and distribunted memory
	fi

	sed -i '27s/-lnetcdf -lnetcdff/ -lnetcdff -lnetcdf/g' configure.oa

	sed -i '31s/-lncarg -lncarg_gks -lncarg_c -lX11 -lm -lcairo/-lncarg -lncarg_gks -lncarg_c -lX11 -lm -lcairo -lfontconfig -lpixman-1 -lfreetype -lhdf5 -lhdf5_hl /g' configure.oa

	sed -i '39s/-frecord-marker=4/-frecord-marker=4 ${fallow_argument} /g' configure.oa

	sed -i '44s/=	/=	${fallow_argument} /g' configure.oa

	sed -i '45s/-C -P -traditional/-P -traditional/g' configure.oa

	echo " "

	./compile 2>&1 | tee compile.obsgrid.log

	conda deactivate
	conda deactivate
	conda deactivate

	# IF statement to check that all files were created.
	cd $WRFCHEM_FOLDER/OBSGRID
	n=$(ls ./*.exe | wc -l)
	if (($n == 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing OBSGRID. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files. Exiting the script."
		read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
		exit
	fi

	echo " "
	############################## RIP4 #####################################
	mkdir $WRFCHEM_FOLDER/RIP4
	cd $WRFCHEM_FOLDER/Downloads
	wget -c https://www2.mmm.ucar.edu/wrf/src/RIP_47.tar.gz
	tar -xvzf RIP_47.tar.gz -C $WRFCHEM_FOLDER/RIP4
	cd $WRFCHEM_FOLDER/RIP4/RIP_47
	mv * ..
	cd $WRFCHEM_FOLDER/RIP4
	rm -rd RIP_47
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda activate ncl_stable
	conda install -c conda-forge ncl c-compiler fortran-compiler cxx-compiler -y

	export RIP_ROOT=$WRFCHEM_FOLDER/RIP4
	export NETCDF=$DIR/NETCDF
	export NCARG_ROOT=$WRFCHEM_FOLDER/miniconda3/envs/ncl_stable

	sed -i '349s|-L${NETCDF}/lib -lnetcdf $NETCDFF|-L${NETCDF}/lib $NETCDFF -lnetcdff -lnetcdf -lnetcdf -lnetcdff_C -lhdf5 |g' $WRFCHEM_FOLDER/RIP4/configure

	sed -i '27s|NETCDFLIB	= -L${NETCDF}/lib -lnetcdf CONFIGURE_NETCDFF_LIB|NETCDFLIB	= -L</usr/lib/x86_64-linux-gnu/libm.a> -lm -L${NETCDF}/lib CONFIGURE_NETCDFF_LIB -lnetcdf -lhdf5 -lhdf5_hl -lgfortran -lgcc -lz |g' $WRFCHEM_FOLDER/RIP4/arch/preamble

	sed -i '31s|-L${NCARG_ROOT}/lib -lncarg -lncarg_gks -lncarg_c -lX11 -lXext -lpng -lz CONFIGURE_NCARG_LIB| -L${NCARG_ROOT}/lib -lncarg -lncarg_gks -lncarg_c -lX11 -lXext -lpng -lz -lcairo -lfontconfig -lpixman-1 -lfreetype -lexpat -lpthread -lbz2 -lXrender -lgfortran -lgcc -L</usr/lib/x86_64-linux-gnu/> -lm -lhdf5 -lhdf5_hl |g' $WRFCHEM_FOLDER/RIP4/arch/preamble

	sed -i '33s| -O|-fallow-argument-mismatch -O |g' $WRFCHEM_FOLDER/RIP4/arch/configure.defaults

	sed -i '35s|=|= -L$WRFCHEM_FOLDER/LIBS/grib2/lib -lhdf5 -lhdf5_hl |g' $WRFCHEM_FOLDER/RIP4/arch/configure.defaults

	if [ ${auto_config} -eq 1 ]; then
		echo 3 | ./configure #Option 3 gfortran compiler with distributed memory
	else
		./configure #Option 3 gfortran compiler with distributed memory
	fi

	./compile

	conda deactivate
	conda deactivate
	conda deactivate

	# IF statement to check that all files were created.
	cd $WRFCHEM_FOLDER/RIP4
	n=$(find . -type l -ls | wc -l)
	if (($n == 12)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing RIP4. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files. Exiting the script."
		read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
		exit
	fi

	echo " "

	echo " "
	##################### WRF Python           ##################
	########### WRf-Python compiled via Conda  ##################
	########### This is the preferred method by NCAR      ##################
	##### https://wrf-python.readthedocs.io/en/latest/installation.html  ##################
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
conda env create -f $HOME/WRF-MOSIT/wrf-python-stable.yml

	echo " "

	######################### Climate Data Operators ############
	######################### CDO compiled via Conda ###########
	####################### This is the preferred method #######
	################### https://bairdlangenbrunner.github.io/python-for-climate-scientists/conda/setting-up-conda-environments.html #######################

	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda init bash
	conda activate base
	conda create --name cdo_stable -y
	source activate cdo_stable
	conda install -c conda-forge cdo -y
	conda update --all -y
	conda deactivate
	conda deactivate
	conda deactivate

	################################## QGIS #####################################
	#QGIS (Quantum Geographic Information System) is a free and open-source platform that allows users to
	#analyze, view, and edit geospatial data. It supports both vector and raster layers, as well as various #web services, and is extensible through community-developed plugins. Key features include map
	#creation, spatial analysis, and data management.
	#############################################################################

	conda env create -f $HOME/WRF-MOSIT/qgis.3.28.8.yml

	echo " "


	############################WRFDA 3DVAR###############################
	## WRFDA v${WPS_VERSION} 3DVAR
	## Downloaded from git tagged releases
	## Does not include RTTOV Libarary for radiation data.  If wanted will need to install library then reconfigure
	##Note: if you intend to run both 3DVAR and 4DVAR experiments, it is not necessary to compile the code twice.
	#Option 34 for gfortran/gcc and distribunted memory
	########################################################################
	cd $WRFCHEM_FOLDER/Downloads
	cd $WRFCHEM_FOLDER/Downloads
	wget -c https://github.com/wrf-model/WRF/releases/download/v${WRF_VERSION}/v${WRF_VERSION}.tar.gz -O WRF-${WRF_VERSION}.tar.gz
	mkdir $WRFCHEM_FOLDER/WRFDA
	tar -xvzf WRF-${WRF_VERSION}.tar.gz -C $WRFCHEM_FOLDER/WRFDA

	# If statment for changing folder name
	if [ -d "$WRFCHEM_FOLDER/WRFDA/WRF" ]; then
		mv -f $WRFCHEM_FOLDER/WRFDA/WRF $WRFCHEM_FOLDER/WRFDA/WRFV${WRF_VERSION}
	fi
	cd $WRFCHEM_FOLDER/WRFDA/WRFV${WRF_VERSION}

	mv * $WRFCHEM_FOLDER/WRFDA
	cd $WRFCHEM_FOLDER/WRFDA
	rm -rf WRFV${WRF_VERSION}/
	cd $WRFCHEM_FOLDER/WRFDA

	ulimit -s unlimited
	export WRF_CHEM=1
	export WRFIO_NCD_LARGE_FILE_SUPPORT=1

	./clean -a

	# SED statements to fix configure error
	sed -i '186s/==/=/g' $WRFCHEM_FOLDER/WRFDA/configure
	sed -i '318s/==/=/g' $WRFCHEM_FOLDER/WRFDA/configure
	sed -i '919s/==/=/g' $WRFCHEM_FOLDER/WRFDA/configure

	if [ ${auto_config} -eq 1 ]; then
		echo 34 | ./configure wrfda 2>&1 | tee configure.log #Option 34 for gfortran/gcc and distribunted memory
	else
		./configure wrfda 2>&1 | tee configure.log #Option 18 for gfortran/gcc and distribunted memory
	fi
	echo " "
	./compile -j $CPU_HALF_EVEN all_wrfvar 2>&1 | tee compile.chem.wrfvar.log
	echo " "

	# IF statement to check that all files were created.
	cd $WRFCHEM_FOLDER/WRFDA/var/da
	n=$(ls ./*.exe | wc -l)
	cd $WRFCHEM_FOLDER/WRFDA/var/obsproc/src
	m=$(ls ./*.exe | wc -l)
	if ((($n == 43) && ($m == 1))); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WRFDA. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		cd $WRFCHEM_FOLDER/WRFDA
		./compile -j $CPU_HALF_EVEN all_wrfvar 2>&1 | tee compile.chem.wrfvar2.log
		cd $WRFCHEM_FOLDER/WRFDA/var/da
		n=$(ls ./*.exe | wc -l)
		cd $WRFCHEM_FOLDER/WRFDA/var/obsproc/src
		m=$(ls ./*.exe | wc -l)
		if ((($n == 43) && ($m == 1))); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WRFDA. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "

	############################ WRFCHEM ${WPS_VERSION} #################################
	## WRF CHEM v${WPS_VERSION}
	## Downloaded from git tagged releases
	# option 34, option 1 for gfortran and distributed memory w/basic nesting
	# If the script comes back asking to locate a file (libfl.a)
	# Use locate command to find file. in a new terminal and then copy that location
	#locate *name of file*
	#Optimization set to 0 due to buffer overflow dump
	#sed -i -e 's/="-O"/="-O0/' configure_kpp
	# io_form_boundary
	# io_form_history
	# io_form_auxinput2
	# io_form_auxhist2
	# Note that you need set nocolons = .true. in the section &time_control of namelist.input
	########################################################################
	#Setting up WRF-CHEM/KPP
	cd $WRFCHEM_FOLDER/Downloads

	ulimit -s unlimited
	export WRF_EM_CORE=1
	export WRF_NMM_CORE=0
	export WRF_CHEM=1
	export WRF_KPP=1
	export YACC='/usr/bin/yacc -d'
	export FLEX=/usr/bin/flex
	export FLEX_LIB_DIR=/usr/lib/x86_64-linux-gnu/
	export KPP_HOME=$WRFCHEM_FOLDER/WRFV${WRF_VERSION}/chem/KPP/kpp/kpp-2.1
	export WRF_SRC_ROOT_DIR=$WRFCHEM_FOLDER/WRFV${WRF_VERSION}
	export PATH=$KPP_HOME/bin:$PATH
	export SED=/usr/bin/sed
	export WRFIO_NCD_LARGE_FILE_SUPPORT=1

	#Downloading WRF code

	cd $WRFCHEM_FOLDER/Downloads
	wget -c https://github.com/wrf-model/WRF/releases/download/v${WRF_VERSION}/v${WRF_VERSION}.tar.gz -O WRF-${WRF_VERSION}.tar.gz
	tar -xvzf WRF-${WRF_VERSION}.tar.gz -C $WRFCHEM_FOLDER/

	# If statment for changing folder name
	if [ -d "$WRFCHEM_FOLDER/WRF" ]; then
		mv -f $WRFCHEM_FOLDER/WRF $WRFCHEM_FOLDER/WRFV${WRF_VERSION}
	fi
	cd $WRFCHEM_FOLDER/WRFV${WRF_VERSION}

	cd chem/KPP
	sed -i -e 's/="-O"/="-O0"/' configure_kpp
	cd -

	./clean -a

	if [ ${auto_config} -eq 1 ]; then
		sed -i '443s/.*/  $response = "34 \\n";/g' $WRFCHEM_FOLDER/WRFV${WRF_VERSION}/arch/Config.pl # Answer for compiler choice
		sed -i '909s/.*/  $response = "1 \\n";/g' $WRFCHEM_FOLDER/WRFV${WRF_VERSION}/arch/Config.pl  #Answer for basic nesting
		./configure 2>&1 | tee configure.log
	else
		./configure 2>&1 | tee configure.log #Option 34 gfortran compiler with distributed memory option 1 for basic nesting
	fi

	./compile -j $CPU_HALF_EVEN em_real 2>&1 | tee compile.wrf1.log
	./compile -j $CPU_HALF_EVEN emi_conv 2>&1 | tee compile.emis.log

	export WRF_DIR=$WRFCHEM_FOLDER/WRFV${WRF_VERSION}

	# IF statement to check that all files were created.
	cd $WRFCHEM_FOLDER/WRFV${WRF_VERSION}/main
	n=$(ls ./*.exe | wc -l)
	if (($n >= 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		cd $WRFCHEM_FOLDER/WRFV${WRF_VERSION}
		./compile -j $CPU_HALF_EVEN em_real 2>&1 | tee compile.wrf2.log
		cd $WRFCHEM_FOLDER/WRFV${WRF_VERSION}/main
		n=$(ls ./*.exe | wc -l)
		if (($n >= 3)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "
	############################WPSV${WPS_VERSION}#####################################
	## WPS v${WPS_VERSION}
	## Downloaded from git tagged releases
	#Option 3 for gfortran and distributed memory
	########################################################################

	cd $WRFCHEM_FOLDER/Downloads
	wget -c https://github.com/wrf-model/WPS/archive/refs/tags/v${WPS_VERSION}.tar.gz -O WPS-${WPS_VERSION}.tar.gz
	tar -xvzf WPS-${WPS_VERSION}.tar.gz -C $WRFCHEM_FOLDER/
	cd $WRFCHEM_FOLDER/WPS-${WPS_VERSION}

	./clean -a

	if [ ${auto_config} -eq 1 ]; then
		echo 3 | ./configure 2>&1 | tee configure.log #Option 3 for gfortran and distributed memory
	else
		./configure 2>&1 | tee configure.log #Option 3 gfortran compiler with distributed memory
	fi
	./compile 2>&1 | tee compile.wps.log

	echo " "

	# IF statement to check that all files were created.
	cd $WRFCHEM_FOLDER/WPS-${WPS_VERSION}
	n=$(ls ./*.exe | wc -l)
	if (($n == 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		./compile 2>&1 | tee compile.wps2.log
		cd $WRFCHEM_FOLDER/WPS-${WPS_VERSION}
		n=$(ls ./*.exe | wc -l)
		if (($n == 3)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "

	######################## WPS Domain Setup Tools ########################
	## DomainWizard
	cd $WRFCHEM_FOLDER/Downloads
	wget -c http://esrl.noaa.gov/gsd/wrfportal/domainwizard/WRFDomainWizard.zip
	mkdir $WRFCHEM_FOLDER/WRFDomainWizard
	unzip WRFDomainWizard.zip -d $WRFCHEM_FOLDER/WRFDomainWizard
	chmod +x $WRFCHEM_FOLDER/WRFDomainWizard/run_DomainWizard

	echo " "
	######################## WPF Portal Setup Tools ########################
	## WRFPortal
	cd $WRFCHEM_FOLDER/Downloads
	wget -c https://esrl.noaa.gov/gsd/wrfportal/portal/wrf-portal.zip
	mkdir $WRFCHEM_FOLDER/WRFPortal
	unzip wrf-portal.zip -d $WRFCHEM_FOLDER/WRFPortal
	chmod +x $WRFCHEM_FOLDER/WRFPortal/runWRFPortal

	echo " "
	######################## Static Geography Data inc/ Optional ####################
	# http://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	# These files are large so if you only need certain ones comment the others off
	# All files downloaded and untarred is 200GB
	# https://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	#################################################################################
	cd $WRFCHEM_FOLDER/Downloads
	mkdir $WRFCHEM_FOLDER/GEOG
	mkdir $WRFCHEM_FOLDER/GEOG/WPS_GEOG

	echo " "
	echo "Mandatory WRF Preprocessing System (WPS) Geographical Input Data Mandatory Fields Downloads"
	echo " "
	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_high_res_mandatory.tar.gz
	tar -xvzf geog_high_res_mandatory.tar.gz -C $WRFCHEM_FOLDER/GEOG/

	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_low_res_mandatory.tar.gz
	tar -xvzf geog_low_res_mandatory.tar.gz -C $WRFCHEM_FOLDER/GEOG/
	mv $WRFCHEM_FOLDER/GEOG/WPS_GEOG_LOW_RES/ $WRFCHEM_FOLDER/GEOG/WPS_GEOG

	if [ ${WPS_Specific_Applications} -eq 1 ]; then
		echo " "
		echo " WPS Geographical Input Data Mandatory for Specific Applications"
		echo " "
		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_thompson28_chem.tar.gz
		tar -xvzf geog_thompson28_chem.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_noahmp.tar.gz
		tar -xvzf geog_noahmp.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/irrigation.tar.gz
		tar -xvzf irrigation.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_px.tar.gz
		tar -xvzf geog_px.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_urban.tar.gz
		tar -xvzf geog_urban.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_ssib.tar.gz
		tar -xvzf geog_ssib.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/lake_depth.tar.bz2
		tar -xvf lake_depth.tar.bz2 -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/topobath_30s.tar.bz2
		tar -xvf topobath_30s.tar.bz2 -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/gsl_gwd.tar.bz2
		tar -xvf gsl_gwd.tar.bz2 -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG
	fi

	if [ ${Optional_GEOG} -eq 1 ]; then

		echo " "
		echo "Optional WPS Geographical Input Data"
		echo " "

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_older_than_2000.tar.gz
		tar -xvzf geog_older_than_2000.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s_with_lakes.tar.gz
		tar -xvzf modis_landuse_20class_15s_with_lakes.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_alt_lsm.tar.gz
		tar -xvzf geog_alt_lsm.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/nlcd2006_ll_9s.tar.bz2
		tar -xvf nlcd2006_ll_9s.tar.bz2 -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/updated_Iceland_LU.tar.gz
		tar -xvf updated_Iceland_LU.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s.tar.bz2
		tar -xvf modis_landuse_20class_15s.tar.bz2 -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

	fi

fi

if [ "$Ubuntu_64bit_Intel" = "1" ] && [ "$WRFCHEM_PICK" = "1" ]; then

	############################# Basic package managment ############################

	echo $PASSWD | sudo -S apt -y update
	echo $PASSWD | sudo -S apt -y upgrade && sudo -S apt -y autoremove

	# download the key to system keyring; this and the following echo command are
	# needed in order to install the Intel compilers
	wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB |
		gpg --dearmor | sudo tee /usr/share/keyrings/oneapi-archive-keyring.gpg >/dev/null

	# add signed entry to apt sources and configure the APT client to use Intel repository:
	echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list

	# this update should get the Intel package info from the Intel repository
	echo $PASSWD | sudo -S apt -y update

	# necessary binary packages (especially pkg-config and build-essential)
	echo $PASSWD | sudo -S apt -y install autoconf automake bison build-essential byacc cmake csh curl default-jdk default-jre emacs flex g++ gawk gcc gfortran git ksh libcurl4-openssl-dev libjpeg-dev libncurses6 libpixman-1-dev libpng-dev libtool libxml2 libxml2-dev m4 make  ncview okular openbox pipenv pkg-config  python3 python3-dev python3-pip python3-dateutil tcsh unzip xauth xorg time

	# install the Intel compilers
	echo $PASSWD | sudo -S apt -y install intel-basekit
	echo $PASSWD | sudo -S apt -y install intel-hpckit
	echo $PASSWD | sudo -S apt -y install intel-oneapi-python

	echo $PASSWD | sudo -S apt -y update

	# make sure some critical packages have been installed
	which cmake pkg-config make gcc g++ gfortran

	# add the Intel compiler file paths to various environment variables
	source /opt/intel/oneapi/setvars.sh

	# some of the libraries we install below need one or more of these variables
	export CC=icc
	export CXX=icpc
	export FC=ifort
	export F77=ifort
	export F90=ifort
	export MPIFC=mpiifort
	export MPIF77=mpiifort
	export MPIF90=mpiifort
	export MPICC=mpiicc
	export MPICXX=mpiicpc
	export CFLAGS="-fPIC -fPIE -O3 -diag-disable=10441 "
	export FFLAGS="-m64"
	export FCFLAGS="-m64"
	############################# CPU Core Management ####################################

	export CPU_CORE=$(nproc) # number of available threads on system
	export CPU_6CORE="6"
	export CPU_HALF=$(($CPU_CORE / 2)) # half of availble cores on system
	# Forces CPU cores to even number to avoid partial core export. ie 7 cores would be 3.5 cores.
	export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))

	# If statement for low core systems.  Forces computers to only use 1 core if there are 4 cores or less on the system.
	if [ $CPU_CORE -le $CPU_6CORE ]; then
		export CPU_HALF_EVEN="2"
	else
		export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))
	fi

	echo "##########################################"
	echo "Number of Threads being used $CPU_HALF_EVEN"
	echo "##########################################"

	############################## Directory Listing ############################
	# makes necessary directories
	#
	############################################################################

	export HOME=$(
		cd
		pwd
	)
	export WRFCHEM_FOLDER=$HOME/WRFCHEM_Intel
	export DIR=$WRFCHEM_FOLDER/Libs
	mkdir $WRFCHEM_FOLDER
	cd $WRFCHEM_FOLDER
	mkdir Downloads
	mkdir WRFDA
	mkdir Libs
	mkdir Libs/grib2
	mkdir Libs/NETCDF
	mkdir Libs/MPICH

	mkdir -p Tests/Environment
	mkdir -p Tests/Compatibility

	echo " "
	############################## Downloading Libraries ############################

	cd $WRFCHEM_FOLDER/Downloads
	wget -c https://github.com/madler/zlib/archive/refs/tags/v$Zlib_Version.tar.gz
	wget -c https://github.com/HDFGroup/hdf5/archive/refs/tags/hdf5-$HDF5_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-c/archive/refs/tags/v$Netcdf_C_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-fortran/archive/refs/tags/v$Netcdf_Fortran_Version.tar.gz
	wget -c https://download.sourceforge.net/libpng/libpng-$Libpng_Version.tar.gz
	wget -c https://www.ece.uvic.ca/~frodo/jasper/software/jasper-$Jasper_Version.zip
	wget -c https://parallel-netcdf.github.io/Release/pnetcdf-$Pnetcdf_Version.tar.gz
	wget -c https://sourceforge.net/projects/opengrads/files/grads2/2.2.1.oga.1/Linux%20%2864%20Bits%29/opengrads-2.2.1.oga.1-bundle-x86_64-pc-linux-gnu-glibc_2.17.tar.gz

	echo " "
	############################# ZLib ############################

	cd $WRFCHEM_FOLDER/Downloads
	tar -xvzf v$Zlib_Version.tar.gz
	cd zlib-$Zlib_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	# make check | tee zlib.makecheck.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log

	echo " "
	############################# LibPNG ############################

	cd $WRFCHEM_FOLDER/Downloads

	# other libraries below need these variables to be set
	export LDFLAGS=-L$DIR/grib2/lib
	export CPPFLAGS=-I$DIR/grib2/include

	tar -xvzf libpng-$Libpng_Version.tar.gz
	cd libpng-$Libpng_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	#make -j $CPU_HALF_EVEN check | tee libpng.makecheck.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log

	echo " "
	############################# JasPer ############################

	cd $WRFCHEM_FOLDER/Downloads
	unzip jasper-$Jasper_Version.zip
	cd jasper-$Jasper_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log

	# other libraries below need these variables to be set
	export JASPERLIB=$DIR/grib2/lib
	export JASPERINC=$DIR/grib2/include

	echo " "
	############################# HDF5 library for NetCDF4 & parallel functionality ############################

	cd $WRFCHEM_FOLDER/Downloads
	tar -xvzf hdf5-$HDF5_Version.tar.gz
	cd hdf5-hdf5-$HDF5_Version
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 --with-zlib=$DIR/grib2 --enable-hl --enable-fortran --enable-parallel 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log

	# other libraries below need these variables to be set
	export HDF5=$DIR/grib2
	export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH
	export PATH=$HDF5/bin:$PATH
	export PHDF5=$DIR/grib2

	echo " "

	#############################Install Parallel-netCDF##############################
	#Make file created with half of available cpu cores
	#Hard path for MPI added
	##################################################################################
	cd $WRFCHEM_FOLDER/Downloads
	tar -xzvf pnetcdf-$Pnetcdf_Version.tar.gz
	cd pnetcdf-$Pnetcdf_Version
	autoreconf -i -f 2>&1 | tee autoreconf.log
	./configure --prefix=$DIR/grib2 --enable-shared --enable-static 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PNETCDF=$DIR/grib2

	echo " "

	############################## Install NETCDF-C Library ############################

	cd $WRFCHEM_FOLDER/Downloads
	tar -xzvf v$Netcdf_C_Version.tar.gz
	cd netcdf-c-$Netcdf_C_Version/

	# these variables need to be set for the NetCDF-C install to work
	export CPPFLAGS=-I$DIR/grib2/include
	export LDFLAGS=-L$DIR/grib2/lib
	export LIBS="-lhdf5_hl -lhdf5 -lz -lcurl -lgfortran -lgcc -lm -ldl -lpnetcdf"
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --disable-dap --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-pnetcdf --enable-cdf5 --enable-parallel-tests 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log

	# other libraries below need these variables to be set
	export PATH=$DIR/NETCDF/bin:$PATH
	export NETCDF=$DIR/NETCDF

	echo " "
	############################## NetCDF-Fortran library ############################

	cd $WRFCHEM_FOLDER/Downloads
	tar -xvzf v$Netcdf_Fortran_Version.tar.gz
	cd netcdf-fortran-$Netcdf_Fortran_Version/

	# these variables need to be set for the NetCDF-Fortran install to work
	export LD_LIBRARY_PATH=$DIR/NETCDF/lib:$LD_LIBRARY_PATH
	export CPPFLAGS="-I$DIR/NETCDF/include -I$DIR/grib2/include"
	export LDFLAGS="-L$DIR/NETCDF/lib -L$DIR/grib2/lib"
	export LIBS="-lnetcdf -lpnetcdf -lcurl -lhdf5_hl -lhdf5 -lz -lm -ldl -lgcc -lgfortran"
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-parallel-tests --enable-hdf5 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log

	echo " "
	#################################### System Environment Tests ##############

	cd $WRFCHEM_FOLDER/Downloads
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_NETCDF_MPI_tests.tar
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_tests.tar

	tar -xvf Fortran_C_tests.tar -C $WRFCHEM_FOLDER/Tests/Environment
	tar -xvf Fortran_C_NETCDF_MPI_tests.tar -C $WRFCHEM_FOLDER/Tests/Compatibility

	export one="1"
	echo " "
	############## Testing Environment #####

	cd $WRFCHEM_FOLDER/Tests/Environment

	echo " "
	echo " "
	echo "Environment Testing "
	echo "Test 1"
	$FC TEST_1_fortran_only_fixed.f
	./a.out | tee env_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 1 Passed"
	else
		echo "Environment Compiler Test 1 Failed"
		exit
	fi
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 2"
	$FC TEST_2_fortran_only_free.f90
	./a.out | tee env_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 2 Passed"
	else
		echo "Environment Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 3"
	$CC TEST_3_c_only.c
	./a.out | tee env_test3.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test3.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 3 Passed"
	else
		echo "Environment Compiler Test 3 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 4"
	$CC -c -m64 TEST_4_fortran+c_c.c
	$FC -c -m64 TEST_4_fortran+c_f.f90
	$FC -m64 TEST_4_fortran+c_f.o TEST_4_fortran+c_c.o
	./a.out | tee env_test4.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test4.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 4 Passed"
	else
		echo "Environment Compiler Test 4 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	############## Testing Environment #####

	cd $WRFCHEM_FOLDER/Tests/Compatibility

	cp ${NETCDF}/include/netcdf.inc .

	echo " "
	echo " "
	echo "Library Compatibility Tests "
	echo "Test 1"
	$FC -c 01_fortran+c+netcdf_f.f
	$CC -c 01_fortran+c+netcdf_c.c
	$FC 01_fortran+c+netcdf_f.o 01_fortran+c+netcdf_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	./a.out | tee comp_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 1 Passed"
	else
		echo "Compatibility Compiler Test 1 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "

	echo "Test 2"
	$MPIFC -c 02_fortran+c+netcdf+mpi_f.f
	$MPICC -c 02_fortran+c+netcdf+mpi_c.c
	$MPIFC 02_fortran+c+netcdf+mpi_f.o \
		02_fortran+c+netcdf+mpi_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	mpirun ./a.out | tee comp_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 2 Passed"
	else
		echo "Compatibility Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."
	echo " "

	echo " All tests completed and passed"
	echo " "
	###############################NCEPlibs#####################################
	#The libraries are built and installed with
	# ./make_ncep_libs.sh -s MACHINE -c COMPILER -d NCEPLIBS_DIR -o OPENMP [-m mpi] [-a APPLICATION]
	#It is recommended to install the NCEPlibs into their own directory, which must be created before running the installer. Further information on the command line arguments can be obtained with
	# ./make_ncep_libs.sh -h

	#If iand error occurs go to https://github.com/NCAR/NCEPlibs/pull/16/files make adjustment and re-run ./make_ncep_libs.sh
	############################################################################

	cd $WRFCHEM_FOLDER/Downloads
	git clone https://github.com/NCAR/NCEPlibs.git
	cd NCEPlibs
	mkdir $DIR/nceplibs

	export JASPER_INC=$DIR/grib2/include
	export PNG_INC=$DIR/grib2/include
	export NETCDF=$DIR/NETCDF

	if [ ${auto_config} -eq 1 ]; then
		echo yes | ./make_ncep_libs.sh -s linux -c intel -d $DIR/nceplibs -o 0 -m 1 -a upp
	else
		./make_ncep_libs.sh -s linux -c intel -d $DIR/nceplibs -o 0 -m 1 -a upp
	fi
	export PATH=$DIR/nceplibs:$PATH

	echo " "
	################################UPPv4.1######################################
	#Previous verison of UPP
	#WRF Support page recommends UPPV4.1 due to too many changes to WRF and UPP code
	#since the WRF was written
	#Option 8 gfortran compiler with distributed memory
	#############################################################################
	cd $WRFCHEM_FOLDER
	git clone -b dtc_post_v4.1.0 --recurse-submodules https://github.com/NOAA-EMC/EMC_post UPPV4.1
	cd UPPV4.1
	mkdir postprd
	export NCEPLIBS_DIR=$DIR/nceplibs
	export NETCDF=$DIR/NETCDF

	if [ ${auto_config} -eq 1 ]; then
		echo 4 | ./configure #Option 4 intel compiler with distributed memory
	else
		./configure #Option 4 intel compiler with distributed memory
	fi

	sed -i '24s/ mpif90/ mpiifort/g' $WRFCHEM_FOLDER/UPPV4.1/configure.upp
	sed -i '25s/ mpif90/ mpiifort/g' $WRFCHEM_FOLDER/UPPV4.1/configure.upp
	sed -i '26s/ mpicc/ mpiicc/g' $WRFCHEM_FOLDER/UPPV4.1/configure.upp

	./compile
	cd $WRFCHEM_FOLDER/UPPV4.1/scripts
	echo $PASSWD | sudo -S cpan install XML::LibXML
	chmod +x run_unipost

	# IF statement to check that all files were created.
	cd $WRFCHEM_FOLDER/UPPV4.1/exec
	n=$(ls ./*.exe | wc -l)
	if (($n == 1)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing UPPV4.1. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files. Exiting the script."
		read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
		exit
	fi

	echo " "

	######################## ARWpost V3.1  ############################
	## ARWpost
	##Configure #3
	###################################################################
	cd $WRFCHEM_FOLDER/Downloads
	wget -c http://www2.mmm.ucar.edu/wrf/src/ARWpost_V3.tar.gz
	tar -xvzf ARWpost_V3.tar.gz -C ${WRF_FOLDER}
	cd $WRFCHEM_FOLDER/ARWpost
	./clean -a
	sed -i -e 's/-lnetcdf/-lnetcdff -lnetcdf/g' $WRFCHEM_FOLDER/ARWpost/src/Makefile
	export NETCDF=$DIR/NETCDF

	if [ ${auto_config} -eq 1 ]; then
		echo 2 | ./configure #Option 2 intel compiler with distributed memory
	else
		./configure #Option 2 intel compiler with distributed memory
	fi

	sed -i -e 's/-C -P -traditional/-P -traditional/g' $WRFCHEM_FOLDER/ARWpost/configure.arwp
	./compile

	export PATH=$WRFCHEM_FOLDER/ARWpost/ARWpost.exe:$PATH

	echo " "
	################################OpenGrADS######################################
	#Verison 2.2.1 64bit of Linux
	#############################################################################
	if [[ $GRADS_PICK -eq 1 ]]; then
		cd $WRFCHEM_FOLDER/Downloads
		tar -xzvf opengrads-2.2.1.oga.1-bundle-x86_64-pc-linux-gnu-glibc_2.17.tar.gz -C $WRFCHEM_FOLDER/
		cd $WRFCHEM_FOLDER/
		mv $WRFCHEM_FOLDER/opengrads-2.2.1.oga.1 $WRFCHEM_FOLDER/GrADS
		cd GrADS/Contents
		wget -c https://github.com/regisgrundig/SIMOP/blob/master/g2ctl.pl
		chmod +x g2ctl.pl
		wget -c https://sourceforge.net/projects/opengrads/files/wgrib2/0.1.9.4/wgrib2-v0.1.9.4-bin-x86_64-glibc2.5-linux-gnu.tar.gz
		tar -xzvf wgrib2-v0.1.9.4-bin-x86_64-glibc2.5-linux-gnu.tar.gz
		cd wgrib2-v0.1.9.4/bin
		mv wgrib2 $WRFCHEM_FOLDER/GrADS/Contents
		cd $WRFCHEM_FOLDER/GrADS/Contents
		rm wgrib2-v0.1.9.4-bin-x86_64-glibc2.5-linux-gnu.tar.gz
		rm -r wgrib2-v0.1.9.4

		export PATH=$WRFCHEM_FOLDER/GrADS/Contents:$PATH
	fi
	################################## GrADS ###############################
	# Version  2.2.1
	# Sublibs library instructions: http://cola.gmu.edu/grads/gadoc/supplibs2.html
	# GrADS instructions: http://cola.gmu.edu/grads/downloads.php
	########################################################################
	if [[ $GRADS_PICK -eq 2 ]]; then

		echo $PASSWD | sudo -S apt -y install grads

	fi

	##################### NCAR COMMAND LANGUAGE           ##################
	########### NCL compiled via Conda                    ##################
	########### This is the preferred method by NCAR      ##################
	########### https://www.ncl.ucar.edu/index.shtml      ##################
	echo " "
	#Installing Miniconda3 to WRF directory and updating libraries
	pip install --upgrade --force-reinstall zstandard
	pip install --upgrade --force-reinstall zstd
	pip3 install --upgrade --force-reinstall zstandard
	pip3 install --upgrade --force-reinstall zstd
	export Miniconda_Install_DIR=$WRFCHEM_FOLDER/miniconda3

	mkdir -p $Miniconda_Install_DIR

	wget -c https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $Miniconda_Install_DIR/miniconda.sh
	bash $Miniconda_Install_DIR/miniconda.sh -b -u -p $Miniconda_Install_DIR

	rm -rf $Miniconda_Install_DIR/miniconda.sh

	export PATH=$WRFCHEM_FOLDER/miniconda3/bin:$PATH

	source $Miniconda_Install_DIR/etc/profile.d/conda.sh

	$Miniconda_Install_DIR/bin/conda init bash
	$Miniconda_Install_DIR/bin/conda init zsh
	$Miniconda_Install_DIR/bin/conda init tcsh
	$Miniconda_Install_DIR/bin/conda init xonsh
	$Miniconda_Install_DIR/bin/conda init powershell

	conda config --add channels conda-forge
	conda config --set auto_activate_base false
	conda update -n root --all -y

	#Special Thanks to @_WaylonWalker for code development

	#Installing NCL via Conda
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda init bash
	conda activate base
	conda create -n ncl_stable -c conda-forge ncl -y
	conda activate ncl_stable

	conda deactivate
	conda deactivate
	conda deactivate

	echo " "

	##################### WRF Python           ##################
	########### WRf-Python compiled via Conda  ##################
	########### This is the preferred method by NCAR      ##################
	##### https://wrf-python.readthedocs.io/en/latest/installation.html  ##################
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
conda env create -f $HOME/WRF-MOSIT/wrf-python-stable.yml

	######################### Climate Data Operators ############
	######################### CDO compiled via Conda ###########
	####################### This is the preferred method #######
	################### https://bairdlangenbrunner.github.io/python-for-climate-scientists/conda/setting-up-conda-environments.html #######################

	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda init bash
	conda activate base
	conda create --name cdo_stable -y
	source activate cdo_stable
	conda install -c conda-forge cdo -y
	conda update --all -y
	conda deactivate
	conda deactivate
	conda deactivate

	echo " "

	################################## QGIS #####################################
	#QGIS (Quantum Geographic Information System) is a free and open-source platform that allows users to
	#analyze, view, and edit geospatial data. It supports both vector and raster layers, as well as various #web services, and is extensible through community-developed plugins. Key features include map
	#creation, spatial analysis, and data management.
	#############################################################################

	conda env create -f $HOME/WRF-MOSIT/qgis.3.28.8.yml

	echo " "

	############################WRFDA 3DVAR###############################
	## WRFDA v${WPS_VERSION} 3DVAR
	## Downloaded from git tagged releases
	## Does not include RTTOV Libarary for radiation data.  If wanted will need to install library then reconfigure
	##Note: if you intend to run both 3DVAR and 4DVAR experiments, it is not necessary to compile the code twice.
	#Option 34 for gfortran/gcc and distribunted memory
	########################################################################
	cd $WRFCHEM_FOLDER/Downloads
	cd $WRFCHEM_FOLDER/Downloads
	wget -c https://github.com/wrf-model/WRF/releases/download/v${WRF_VERSION}/v${WRF_VERSION}.tar.gz -O WRF-${WRF_VERSION}.tar.gz
	mkdir $WRFCHEM_FOLDER/WRFDA
	tar -xvzf WRF-${WRF_VERSION}.tar.gz -C $WRFCHEM_FOLDER/WRFDA
	# If statment for changing folder name
	if [ -d "$WRFCHEM_FOLDER/WRFDA/WRF" ]; then
		mv -f $WRFCHEM_FOLDER/WRFDA/WRF $WRFCHEM_FOLDER/WRFDA/WRFV${WRF_VERSION}
	fi
	cd $WRFCHEM_FOLDER/WRFDA/WRFV${WRF_VERSION}
	mv * $WRFCHEM_FOLDER/WRFDA
	cd $WRFCHEM_FOLDER/WRFDA
	rm -rf WRFV${WRF_VERSION}/
	cd $WRFCHEM_FOLDER/WRFDA

	ulimit -s unlimited
	export WRF_CHEM=1
	export WRFIO_NCD_LARGE_FILE_SUPPORT=1

	./clean -a

	if [ ${auto_config} -eq 1 ]; then
		echo 15 | ./configure wrfda 2>&1 | tee configure.log #Option 15 for intel and distribunted memory
	else
		./configure wrfda 2>&1 | tee configure.log #Option 15 for intel and distribunted memory
	fi
	echo " "

	#Need to remove mpich/GNU config calls to Intel config calls
	sed -i '169s|mpif90 -f90=$(SFC)|mpiifort|g' $WRFCHEM_FOLDER/WRFDA/configure.wrf
	sed -i '170s|mpicc -cc=$(SCC)|mpiicc|g' $WRFCHEM_FOLDER/WRFDA/configure.wrf
	sed -i '177s|-w -O3|-diag-disable=10441 -w -O3|g' $WRFCHEM_FOLDER/WRFDA/configure.wrf
	./compile -j $CPU_HALF_EVEN all_wrfvar 2>&1 | tee compile.chem.wrfvar.log
	echo " "

	# IF statement to check that all files were created.
	cd $WRFCHEM_FOLDER/WRFDA/var/da
	n=$(ls ./*.exe | wc -l)
	cd $WRFCHEM_FOLDER/WRFDA/var/obsproc/src
	m=$(ls ./*.exe | wc -l)
	if ((($n == 43) && ($m == 1))); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WRFDA. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		cd $WRFCHEM_FOLDER/WRFDA
		./compile -j $CPU_HALF_EVEN all_wrfvar 2>&1 | tee compile.chem.wrfvar2.log
		cd $WRFCHEM_FOLDER/WRFDA/var/da
		n=$(ls ./*.exe | wc -l)
		cd $WRFCHEM_FOLDER/WRFDA/var/obsproc/src
		m=$(ls ./*.exe | wc -l)
		if ((($n == 43) && ($m == 1))); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WRFDA. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi
	echo " "

	############################ WRF ${WPS_VERSION}  #################################
	## WRF v${WPS_VERSION}
	## Downloaded from git tagged releases
	# option 15, option 1 for intel and distributed memory w/basic nesting
	# large file support enable with WRFiO_NCD_LARGE_FILE_SUPPORT=1
	########################################################################

	cd $WRFCHEM_FOLDER/Downloads

	ulimit -s unlimited
	export WRF_EM_CORE=1
	export WRF_NMM_CORE=0
	export WRF_CHEM=1
	export WRF_KPP=1
	export YACC='/usr/bin/yacc -d'
	export FLEX=/usr/bin/flex
	export FLEX_LIB_DIR=/usr/lib/x86_64-linux-gnu/
	export KPP_HOME=$WRFCHEM_FOLDER/WRFV${WRF_VERSION}/chem/KPP/kpp/kpp-2.1
	export WRF_SRC_ROOT_DIR=$WRFCHEM_FOLDER/WRFV${WRF_VERSION}
	export PATH=$KPP_HOME/bin:$PATH
	export SED=/usr/bin/sed
	export WRFIO_NCD_LARGE_FILE_SUPPORT=1

	cd $WRFCHEM_FOLDER/Downloads
	wget -c https://github.com/wrf-model/WRF/releases/download/v${WRF_VERSION}/v${WRF_VERSION}.tar.gz -O WRF-${WRF_VERSION}.tar.gz
	tar -xvzf WRF-${WRF_VERSION}.tar.gz -C $WRFCHEM_FOLDER/
	# If statment for changing folder name
	if [ -d "$WRFCHEM_FOLDER/WRF" ]; then
		mv -f $WRFCHEM_FOLDER/WRF $WRFCHEM_FOLDER/WRFV${WRF_VERSION}
	fi
	cd $WRFCHEM_FOLDER/WRFV${WRF_VERSION}

	cd chem/KPP
	sed -i -e 's/="-O"/="-O0"/' configure_kpp
	cd -

	export WRFIO_NCD_LARGE_FILE_SUPPORT=1
	./clean -a

	if [ ${auto_config} -eq 1 ]; then
		sed -i '443s/.*/  $response = "15 \\n";/g' $WRFCHEM_FOLDER/WRFV${WRF_VERSION}/arch/Config.pl # Answer for compiler choice
		sed -i '909s/.*/  $response = "1 \\n";/g' $WRFCHEM_FOLDER/WRFV${WRF_VERSION}/arch/Config.pl  #Answer for basic nesting
		./configure 2>&1 | tee configure.log
	else
		./configure 2>&1 | tee configure.log #Option 15 intel compiler with distributed memory option 1 for basic nesting
	fi

	#Need to remove mpich/GNU config calls to Intel config calls
	sed -i '169s|mpif90 -f90=$(SFC)|mpiifort|g' $WRFCHEM_FOLDER/WRFV${WRF_VERSION}/configure.wrf
	sed -i '170s|mpicc -cc=$(SCC)|mpiicc|g' $WRFCHEM_FOLDER/WRFV${WRF_VERSION}/configure.wrf
	sed -i '177s|-w -O3|-diag-disable=10441 -w -O3|g' $WRFCHEM_FOLDER/WRFV${WRF_VERSION}/configure.wrf
	./compile -j $CPU_HALF_EVEN em_real 2>&1 | tee compile.wrf1_extra_flag.log
	./compile -j $CPU_HALF_EVEN emi_conv 2>&1 | tee compile.emis.log

	export WRF_DIR=$WRFCHEM_FOLDER/WRFV${WRF_VERSION}

	# IF statement to check that all files were created.
	# IF statement to check that all files were created.
	cd $WRFCHEM_FOLDER/WRFV${WRF_VERSION}/main
	n=$(ls ./*.exe | wc -l)
	if (($n >= 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		cd $WRFCHEM_FOLDER/WRFV${WRF_VERSION}
		./compile -j $CPU_HALF_EVEN em_real 2>&1 | tee compile.wrf2.log
		cd $WRFCHEM_FOLDER/WRFV${WRF_VERSION}/main
		n=$(ls ./*.exe | wc -l)
		if (($n >= 3)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "
	############################WPSV${WPS_VERSION}#####################################
	## WPS v${WPS_VERSION}
	## Downloaded from git tagged releases
	#Option 3 for gfortran and distributed memory
	########################################################################

	cd $WRFCHEM_FOLDER/Downloads
	wget -c https://github.com/wrf-model/WPS/archive/refs/tags/v${WPS_VERSION}.tar.gz -O WPS-${WPS_VERSION}.tar.gz
	tar -xvzf WPS-${WPS_VERSION}.tar.gz -C $WRFCHEM_FOLDER/
	cd $WRFCHEM_FOLDER/WPS-${WPS_VERSION}
	./clean -a

	if [ ${auto_config} -eq 1 ]; then
		echo 19 | ./configure 2>&1 | tee configure.log #Option 19 for intel and distributed memory
	else
		./configure 2>&1 | tee configure.log #Option 19 intel compiler with distributed memory
	fi

	sed -i '67s|mpif90|mpiifort|g' $WRFCHEM_FOLDER/WPS-${WPS_VERSION}/configure.wps
	sed -i '68s|mpicc|mpiicc|g' $WRFCHEM_FOLDER/WPS-${WPS_VERSION}/configure.wps

	./compile 2>&1 | tee compile.wps.log

	echo " "
	# IF statement to check that all files were created.
	cd $WRFCHEM_FOLDER/WPS-${WPS_VERSION}
	n=$(ls ./*.exe | wc -l)
	if (($n == 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		./compile 2>&1 | tee compile.wps2.log
		cd $WRFCHEM_FOLDER/WPS-${WPS_VERSION}
		n=$(ls ./*.exe | wc -l)
		if (($n == 3)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "

	######################## WPS Domain Setup Tools ########################
	## DomainWizard
	cd $WRFCHEM_FOLDER/Downloads
	wget -c http://esrl.noaa.gov/gsd/wrfportal/domainwizard/WRFDomainWizard.zip
	mkdir $WRFCHEM_FOLDER/WRFDomainWizard
	unzip WRFDomainWizard.zip -d $WRFCHEM_FOLDER/WRFDomainWizard
	chmod +x $WRFCHEM_FOLDER/WRFDomainWizard/run_DomainWizard

	echo " "
	######################## WPF Portal Setup Tools ########################
	## WRFPortal
	cd $WRFCHEM_FOLDER/Downloads
	wget -c https://esrl.noaa.gov/gsd/wrfportal/portal/wrf-portal.zip
	mkdir $WRFCHEM_FOLDER/WRFPortal
	unzip wrf-portal.zip -d $WRFCHEM_FOLDER/WRFPortal
	chmod +x $WRFCHEM_FOLDER/WRFPortal/runWRFPortal

	echo " "

	######################## Static Geography Data inc/ Optional ####################
	# http://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	# These files are large so if you only need certain ones comment the others off
	# All files downloaded and untarred is 200GB
	# https://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	#################################################################################
	cd $WRFCHEM_FOLDER/Downloads
	mkdir $WRFCHEM_FOLDER/GEOG
	mkdir $WRFCHEM_FOLDER/GEOG/WPS_GEOG

	echo " "
	echo "Mandatory WRF Preprocessing System (WPS) Geographical Input Data Mandatory Fields Downloads"
	echo " "
	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_high_res_mandatory.tar.gz
	tar -xvzf geog_high_res_mandatory.tar.gz -C $WRFCHEM_FOLDER/GEOG/

	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_low_res_mandatory.tar.gz
	tar -xvzf geog_low_res_mandatory.tar.gz -C $WRFCHEM_FOLDER/GEOG/
	mv $WRFCHEM_FOLDER/GEOG/WPS_GEOG_LOW_RES/ $WRFCHEM_FOLDER/GEOG/WPS_GEOG

	if [ ${WPS_Specific_Applications} -eq 1 ]; then
		echo " "
		echo " WPS Geographical Input Data Mandatory for Specific Applications"
		echo " "

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_thompson28_chem.tar.gz
		tar -xvzf geog_thompson28_chem.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_noahmp.tar.gz
		tar -xvzf geog_noahmp.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/irrigation.tar.gz
		tar -xvzf irrigation.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_px.tar.gz
		tar -xvzf geog_px.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_urban.tar.gz
		tar -xvzf geog_urban.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_ssib.tar.gz
		tar -xvzf geog_ssib.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/lake_depth.tar.bz2
		tar -xvf lake_depth.tar.bz2 -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/topobath_30s.tar.bz2
		tar -xvf topobath_30s.tar.bz2 -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/gsl_gwd.tar.bz2
		tar -xvf gsl_gwd.tar.bz2 -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG
	fi

	if [ ${Optional_GEOG} -eq 1 ]; then
		echo " "
		echo "Optional WPS Geographical Input Data"
		echo " "

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_older_than_2000.tar.gz
		tar -xvzf geog_older_than_2000.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s_with_lakes.tar.gz
		tar -xvzf modis_landuse_20class_15s_with_lakes.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_alt_lsm.tar.gz
		tar -xvzf geog_alt_lsm.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/nlcd2006_ll_9s.tar.bz2
		tar -xvf nlcd2006_ll_9s.tar.bz2 -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/updated_Iceland_LU.tar.gz
		tar -xvf updated_Iceland_LU.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s.tar.bz2
		tar -xvf modis_landuse_20class_15s.tar.bz2 -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG
	fi

fi

if [ "$macos_64bit_GNU" = "1" ] && [ "$WRFCHEM_PICK" = "1" ] && [ "$MAC_CHIP" = "Intel" ]; then

	#############################basic package managment############################
sleep 1
brew install autoconf
sleep 1
brew install bison
sleep 1
brew install byacc
sleep 1
brew install cmake
sleep 1
brew install curl
sleep 1
brew install flex
sleep 1
brew install gdal
sleep 1
brew install gedit
sleep 1
brew install git
sleep 1
brew install gnu-sed
sleep 1
brew install imagemagick
sleep 1
brew install java
sleep 1
brew install ksh
sleep 1
brew install libtool
sleep 1
brew install m4
sleep 1
brew install make
sleep 1
brew install python@3.10
sleep 1
brew install tcsh
sleep 1
brew install wget
sleep 1
brew install xauth
sleep 1
brew install xorgproto
sleep 1
brew install xorgrgb
sleep 1
brew install xquartz

export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
export PATH=/usr/local/bin:$PATH

	##############################Directory Listing############################

	export HOME=$(
		cd
		pwd
	)
	mkdir $HOME/WRFCHEM
	export WRFCHEM_FOLDER=$HOME/WRFCHEM
	cd $WRFCHEM_FOLDER/
	mkdir Downloads
	mkdir WRFDA
	mkdir Libs
	export DIR=$WRFCHEM_FOLDER/Libs
	mkdir -p Libs/grib2
	mkdir -p Libs/NETCDF
	mkdir -p Tests/Environment
	mkdir -p Tests/Compatibility

	#############################Core Management####################################
	export CPU_CORE=$(sysctl -n hw.ncpu) # number of available threads on system
	export CPU_6CORE="6"
	export CPU_HALF=$(($CPU_CORE / 2))
	#1/2 of availble cores on system
	export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))
	#Forces CPU cores to even number to avoid partial core export. ie 7 cores would be 3.5 cores.

	if [ $CPU_CORE -le $CPU_6CORE ]; then #If statement for low core systems.  Forces computers to only use 1 core if there are 4 cores or less on the system.
		export CPU_HALF_EVEN="2"
	else
		export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))
	fi

	echo "##########################################"
	echo "Number of Threads being used $CPU_HALF_EVEN"
	echo "##########################################"
	echo " "

	##############################Downloading Libraries############################

	cd $WRFCHEM_FOLDER/Downloads
	wget -c https://github.com/madler/zlib/archive/refs/tags/v$Zlib_Version.tar.gz
	wget -c https://github.com/HDFGroup/hdf5/archive/refs/tags/hdf5-$HDF5_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-c/archive/refs/tags/v$Netcdf_C_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-fortran/archive/refs/tags/v$Netcdf_Fortran_Version.tar.gz
	wget -c https://download.sourceforge.net/libpng/libpng-$Libpng_Version.tar.gz
	wget -c https://www.ece.uvic.ca/~frodo/jasper/software/jasper-$Jasper_Version.zip
	wget -c https://github.com/pmodels/mpich/releases/download/v$Mpich_Version/mpich-$Mpich_Version.tar.gz
	wget -c https://parallel-netcdf.github.io/Release/pnetcdf-$Pnetcdf_Version.tar.gz


	echo " "

	#############################Compilers############################

	#Symlink to avoid clang conflicts with compilers
	#default gcc path /usr/bin/gcc
	#default homebrew path /usr/local/bin

	echo $PASSWD | sudo -S ln -sf /usr/local/bin/gcc-12 /usr/local/bin/gcc
	echo $PASSWD | sudo -S ln -sf /usr/local/bin/g++-12 /usr/local/bin/g++
	echo $PASSWD | sudo -S ln -sf /usr/local/bin/gfortran-12 /usr/local/bin/gfortran
	echo $PASSWD | sudo -S ln -sf /usr/local/bin/python3.10 /usr/local/bin/python3

	export CC=gcc
	export CXX=g++
	export FC=gfortran
	export F77=gfortran
	export CFLAGS="-fPIC -fPIE -Wno-implicit-function-declaration -Wall"

	echo " "

	#IF statement for GNU compiler issue
	export GCC_VERSION=$(gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		export fallow_argument=-fallow-argument-mismatch
		export boz_argument=-fallow-invalid-boz
	else
		export fallow_argument=
		export boz_argument=
	fi

	export FFLAGS="$fallow_argument -m64"
	export FCFLAGS="$fallow_argument -m64"

	echo "##########################################"
	echo "FFLAGS = $FFLAGS"
	echo "FCFLAGS = $FCFLAGS"
	echo "CFLAGS = $CFLAGS"
	echo "##########################################"

	echo " "

	#############################zlib############################
	#Uncalling compilers due to comfigure issue with zlib1.2.12
	#With CC & CXX definied ./configure uses different compiler Flags

	cd $WRFCHEM_FOLDER/Downloads
	tar -xvzf v$Zlib_Version.tar.gz
	cd zlib-$Zlib_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log
	./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "

	##############################MPICH############################
	cd $WRFCHEM_FOLDER/Downloads
	tar -xvzf mpich-$Mpich_Version.tar.gz
	cd mpich-$Mpich_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	F90= ./configure --prefix=$DIR/MPICH --with-device=ch3 FFLAGS="$fallow_argument -m64" FCFLAGS="$fallow_argument -m64" 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee install.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PATH=$DIR/MPICH/bin:$PATH
	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx

	echo " "

	#############################libpng############################
	cd $WRFCHEM_FOLDER/Downloads
	export LDFLAGS=-L$DIR/grib2/lib
	export CPPFLAGS=-I$DIR/grib2/include
	tar -xvzf libpng-$Libpng_Version.tar.gz
	cd libpng-$Libpng_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check
	#make check

	echo " "
	#############################JasPer############################

	cd $WRFCHEM_FOLDER/Downloads
	unzip jasper-$Jasper_Version.zip
	cd jasper-$Jasper_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee install.log
	export JASPERLIB=$DIR/grib2/lib
	export JASPERINC=$DIR/grib2/include

	echo " "
	#############################hdf5 library for netcdf4 functionality############################

	cd $WRFCHEM_FOLDER/Downloads
	tar -xvzf hdf5-$HDF5_Version.tar.gz
	cd hdf5-hdf5-$HDF5_Version
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 --with-zlib=$DIR/grib2 --enable-hl --enable-fortran --enable-parallel 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export HDF5=$DIR/grib2
	export PHDF5=$DIR/grib2
	export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH

	echo " "

	#############################Install Parallel-netCDF##############################
	#Make file created with half of available cpu cores
	#Hard path for MPI added
	##################################################################################
	cd $WRFCHEM_FOLDER/Downloads
	tar -xvzf pnetcdf-$Pnetcdf_Version.tar.gz
	cd pnetcdf-$Pnetcdf_Version
	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx
	autoreconf -i -f 2>&1 | tee autoreconf.log
	./configure --prefix=$DIR/grib2 --enable-shared --enable-static 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PNETCDF=$DIR/grib2

	echo " "

	##############################Install NETCDF C Library############################
	cd $WRFCHEM_FOLDER/Downloads
	tar -xzvf v$Netcdf_C_Version.tar.gz
	cd netcdf-c-$Netcdf_C_Version/
	export CPPFLAGS=-I$DIR/grib2/include
	export LDFLAGS=-L$DIR/grib2/lib
	export LIBS="-lhdf5_hl -lhdf5 -lz -lcurl -lgfortran -lgcc -lm -ldl -lpnetcdf"
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --disable-dap --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-pnetcdf --enable-cdf5 --enable-parallel-tests 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PATH=$DIR/NETCDF/bin:$PATH
	export NETCDF=$DIR/NETCDF
	echo " "

	##############################NetCDF fortran library############################
	cd $WRFCHEM_FOLDER/Downloads
	tar -xvzf v$Netcdf_Fortran_Version.tar.gz
	cd netcdf-fortran-$Netcdf_Fortran_Version/
	export LD_LIBRARY_PATH=$DIR/NETCDF/lib:$LD_LIBRARY_PATH
	export CPPFLAGS="-I$DIR/NETCDF/include -I$DIR/grib2/include"
	export LDFLAGS="-L$DIR/NETCDF/lib -L$DIR/grib2/lib"
	export LIBS="-lnetcdf -lpnetcdf -lcurl -lhdf5_hl -lhdf5 -lz -lm -ldl -lgcc -lgfortran"
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-parallel-tests --enable-hdf5 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "

	#################################### System Environment Tests ##############
	mkdir -p $WRFCHEM_FOLDER/Tests/Environment
	mkdir -p $WRFCHEM_FOLDER/Tests/Compatibility

	cd $WRFCHEM_FOLDER/Downloads
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_NETCDF_MPI_tests.tar
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_tests.tar

	tar -xvf Fortran_C_tests.tar -C $WRFCHEM_FOLDER/Tests/Environment
	tar -xvf Fortran_C_NETCDF_MPI_tests.tar -C $WRFCHEM_FOLDER/Tests/Compatibility
	export one="1"
	echo " "
	############## Testing Environment #####

	cd $WRFCHEM_FOLDER/Tests/Environment

	echo " "
	echo " "
	echo "Environment Testing "
	echo "Test 1"
	$FC TEST_1_fortran_only_fixed.f
	./a.out | tee env_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 1 Passed"
	else
		echo "Environment Compiler Test 1 Failed"
		exit
	fi
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 2"
	$FC TEST_2_fortran_only_free.f90
	./a.out | tee env_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 2 Passed"
	else
		echo "Environment Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 3"
	$CC TEST_3_c_only.c
	./a.out | tee env_test3.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test3.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 3 Passed"
	else
		echo "Environment Compiler Test 3 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 4"
	$CC -c -m64 TEST_4_fortran+c_c.c
	$FC -c -m64 TEST_4_fortran+c_f.f90
	$FC -m64 TEST_4_fortran+c_f.o TEST_4_fortran+c_c.o
	./a.out | tee env_test4.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test4.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 4 Passed"
	else
		echo "Environment Compiler Test 4 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	############## Testing Environment #####

	cd $WRFCHEM_FOLDER/Tests/Compatibility

	cp ${NETCDF}/include/netcdf.inc .

	echo " "
	echo " "
	echo "Library Compatibility Tests "
	echo "Test 1"
	$FC -c 01_fortran+c+netcdf_f.f
	$CC -c 01_fortran+c+netcdf_c.c
	$FC 01_fortran+c+netcdf_f.o 01_fortran+c+netcdf_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	./a.out | tee comp_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 1 Passed"
	else
		echo "Compatibility Compiler Test 1 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "

	echo "Test 2"
	$MPIFC -c 02_fortran+c+netcdf+mpi_f.f
	$MPICC -c 02_fortran+c+netcdf+mpi_c.c
	$MPIFC 02_fortran+c+netcdf+mpi_f.o \
		02_fortran+c+netcdf+mpi_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	$DIR/MPICH/bin/mpirun ./a.out | tee comp_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 2 Passed"
	else
		echo "Compatibility Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."
	echo " "

	echo " All tests completed and passed"
	echo " "

	#Installing Miniconda3 to WRF directory and updating libraries
	pip install --upgrade --force-reinstall zstandard
	pip install --upgrade --force-reinstall zstd
	pip3 install --upgrade --force-reinstall zstandard
	pip3 install --upgrade --force-reinstall zstd
	export Miniconda_Install_DIR=$WRFCHEM_FOLDER/miniconda3

	mkdir -p $Miniconda_Install_DIR

	wget -c https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O $Miniconda_Install_DIR/miniconda.sh
	bash $Miniconda_Install_DIR/miniconda.sh -b -u -p $Miniconda_Install_DIR

	rm -rf $Miniconda_Install_DIR/miniconda.sh

	export PATH=$WRFHYDRO_FOLDER/miniconda3/bin:$PATH

	source $Miniconda_Install_DIR/etc/profile.d/conda.sh

	$Miniconda_Install_DIR/bin/conda init bash
	$Miniconda_Install_DIR/bin/conda init zsh
	$Miniconda_Install_DIR/bin/conda init tcsh
	$Miniconda_Install_DIR/bin/conda init xonsh
	$Miniconda_Install_DIR/bin/conda init powershell

	conda config --add channels conda-forge
	conda config --set auto_activate_base false
	conda update -n root --all -y

	echo " "

	#Installing NCL via Conda
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda init bash
	conda activate base
	conda create -n ncl_stable -c conda-forge ncl -y
	conda activate ncl_stable

	conda deactivate
	conda deactivate
	conda deactivate
	echo " "

	##################### WRF Python           ##################
	########### WRf-Python compiled via Conda  ##################
	########### This is the preferred method by NCAR      ##################
	##### https://wrf-python.readthedocs.io/en/latest/installation.html  ##################
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
conda env create -f $HOME/WRF-MOSIT/wrf-python-stable.yml

	######################### Climate Data Operators ############
	######################### CDO compiled via Conda ###########
	####################### This is the preferred method #######
	################### https://bairdlangenbrunner.github.io/python-for-climate-scientists/conda/setting-up-conda-environments.html #######################

	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda init bash
	conda activate base
	conda create --name cdo_stable -y
	source activate cdo_stable
	conda install -c conda-forge cdo -y
	conda update --all -y
	conda deactivate
	conda deactivate
	conda deactivate

	echo " "

	################################## QGIS #####################################
	#QGIS (Quantum Geographic Information System) is a free and open-source platform that allows users to
	#analyze, view, and edit geospatial data. It supports both vector and raster layers, as well as various #web services, and is extensible through community-developed plugins. Key features include map
	#creation, spatial analysis, and data management.
	#############################################################################

	conda env create -f $HOME/WRF-MOSIT/qgis.3.28.8.yml

	echo " "

	############################ WRFCHEM ${WPS_VERSION} #################################
	## WRF CHEM v${WPS_VERSION}
	## Downloaded from git tagged releases
	# option 17, option 1 for gfortran and distributed memory w/basic nesting
	# If the script comes back asking to locate a file (libfl.a)
	# Use locate command to find file. in a new terminal and then copy that location
	#locate *name of file*
	#Optimization set to 0 due to buffer overflow dump
	#sed -i -e 's/="-O"/="-O0/' configure_kpp
	########################################################################
	#Setting up WRF-CHEM/KPP
	cd $WRFCHEM_FOLDER/Downloads

	ulimit -s unlimited
	export MALLOC_CHECK_=0
	export WRF_EM_CORE=1
	export WRF_NMM_CORE=0
	export WRF_CHEM=1

	export WRFIO_NCD_LARGE_FILE_SUPPORT=1

	#Downloading WRF code
	cd $WRFCHEM_FOLDER/Downloads
	wget -c https://github.com/wrf-model/WRF/releases/download/v${WRF_VERSION}/v${WRF_VERSION}.tar.gz -O WRF-${WRF_VERSION}.tar.gz
	tar -xvzf WRF-${WRF_VERSION}.tar.gz -C $WRFCHEM_FOLDER/

	# If statment for changing folder name
	if [ -d "$WRFCHEM_FOLDER/WRF" ]; then
		mv -f $WRFCHEM_FOLDER/WRF $WRFCHEM_FOLDER/WRFV${WRF_VERSION}
	fi
	cd $WRFCHEM_FOLDER/WRFV${WRF_VERSION}

	./clean -a

	if [ ${auto_config} -eq 1 ]; then
		sed -i'' -e '443s/.*/  $response = "17 \\n";/g' $WRFCHEM_FOLDER/WRFV${WRF_VERSION}/arch/Config.pl # Answer for compiler choice
		sed -i'' -e '909s/.*/  $response = "1 \\n";/g' $WRFCHEM_FOLDER/WRFV${WRF_VERSION}/arch/Config.pl  #Answer for basic nesting
		./configure 2>&1 | tee configure.log
	else
		./configure 2>&1 | tee configure.log #Option 17 gfortran compiler with distributed memory option 1 for basic nesting
	fi

	sed -i'' -e 's/-w  -c/-w  -c -fPIC -fPIE -O3 -Wno-implicit-function-declaration/g' $WRFCHEM_FOLDER/WRFV${WRF_VERSION}/configure.wrf

	./compile em_real 2>&1 | tee compile.wrf.log
	./compile emi_conv 2>&1 | tee compile.emis.log

	export WRF_DIR=$WRFCHEM_FOLDER/WRFV${WRF_VERSION}

	# IF statement to check that all files were created.
	cd $WRFCHEM_FOLDER/WRFV${WRF_VERSION}/main
	n=$(ls ./*.exe | wc -l)
	if (($n >= 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		cd $WRFCHEM_FOLDER/WRFV${WRF_VERSION}
		./compile -j $CPU_HALF_EVEN em_real 2>&1 | tee compile.wrf2.log
		cd $WRFCHEM_FOLDER/WRFV${WRF_VERSION}/main
		n=$(ls ./*.exe | wc -l)
		if (($n >= 3)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "
	############################WPSV${WPS_VERSION}#####################################
	## WPS v${WPS_VERSION}
	## Downloaded from git tagged releases
	#Option 3 for gfortran and distributed memory
	########################################################################

	cd $WRFCHEM_FOLDER/Downloads
	wget -c https://github.com/wrf-model/WPS/archive/refs/tags/v${WPS_VERSION}.tar.gz -O WPS-${WPS_VERSION}.tar.gz
	tar -xvzf WPS-${WPS_VERSION}.tar.gz -C $WRFCHEM_FOLDER/
	cd $WRFCHEM_FOLDER/WPS-${WPS_VERSION}
	./clean -a

	if [ ${auto_config} -eq 1 ]; then
		echo 19 | ./configure 2>&1 | tee configure.log #Option 19 for gfortran and distributed memory
	else
		./configure 2>&1 | tee configure.log #Option 19 gfortran compiler with distributed memory
	fi

	./compile 2>&1 | tee compile.wps.log

	# IF statement to check that all files were created.
	cd $WRFCHEM_FOLDER/WPS-${WPS_VERSION}
	n=$(ls ./*.exe | wc -l)
	if (($n == 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		./compile 2>&1 | tee compile.wps2.log
		cd $WRFCHEM_FOLDER/WPS-${WPS_VERSION}
		n=$(ls ./*.exe | wc -l)
		if (($n == 3)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "

	############################WRFDA 3DVAR###############################
	## WRFDA v${WPS_VERSION} 3DVAR
	## Downloaded from git tagged releases
	## Does not include RTTOV Libarary for radiation data.  If wanted will need to install library then reconfigure
	##Note: if you intend to run both 3DVAR and 4DVAR experiments, it is not necessary to compile the code twice.
	#Option 34 for gfortran/gcc and distribunted memory
	########################################################################
	cd $WRFCHEM_FOLDER/Downloads
	cd $WRFCHEM_FOLDER/Downloads
	wget -c https://github.com/wrf-model/WRF/releases/download/v${WRF_VERSION}/v${WRF_VERSION}.tar.gz -O WRF-${WRF_VERSION}.tar.gz
	mkdir $WRFCHEM_FOLDER/WRFDA
	tar -xvzf WRF-${WRF_VERSION}.tar.gz -C $WRFCHEM_FOLDER/WRFDA
	# If statment for changing folder name
	if [ -d "$WRFCHEM_FOLDER/WRFDA/WRF" ]; then
		mv -f $WRFCHEM_FOLDER/WRFDA/WRF $WRFCHEM_FOLDER/WRFDA/WRFV${WRF_VERSION}
	fi
	cd $WRFCHEM_FOLDER/WRFDA/WRFV${WRF_VERSION}
	mv * $WRFCHEM_FOLDER/WRFDA
	cd $WRFCHEM_FOLDER/WRFDA
	rm -rf WRFV${WRF_VERSION}/
	cd $WRFCHEM_FOLDER/WRFDA

	ulimit -s unlimited
	export WRF_CHEM=1
	export WRFIO_NCD_LARGE_FILE_SUPPORT=1

	./clean -a

	if [ ${auto_config} -eq 1 ]; then
		echo 17 | ./configure wrfda 2>&1 | tee configure.log #Option 17 for gfortran/gcc and distribunted memory
	else
		./configure wrfda 2>&1 | tee configure.log #Option 17 for gfortran/gcc and distribunted memory
	fi
	echo " "
	./compile all_wrfvar 2>&1 | tee compile.chem.wrfvar.log
	echo " "

	# IF statement to check that all files were created.
	cd $WRFCHEM_FOLDER/WRFDA/var/da
	n=$(ls ./*.exe | wc -l)
	cd $WRFCHEM_FOLDER/WRFDA/var/obsproc/src
	m=$(ls ./*.exe | wc -l)
	if ((($n == 43) && ($m == 1))); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WRFDA. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		cd $WRFCHEM_FOLDER/WRFDA
		./compile -j $CPU_HALF_EVEN all_wrfvar 2>&1 | tee compile.chem.wrfvar2.log
		cd $WRFCHEM_FOLDER/WRFDA/var/da
		n=$(ls ./*.exe | wc -l)
		cd $WRFCHEM_FOLDER/WRFDA/var/obsproc/src
		m=$(ls ./*.exe | wc -l)
		if ((($n == 43) && ($m == 1))); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WRFDA. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi
	echo " "

	######################## WPS Domain Setup Tools ########################
	## DomainWizard

	cd $WRFCHEM_FOLDER/Downloads
	wget http://esrl.noaa.gov/gsd/wrfportal/domainwizard/WRFDomainWizard.zip
	mkdir $WRFCHEM_FOLDER/WRFDomainWizard
	unzip WRFDomainWizard.zip -d $WRFCHEM_FOLDER/WRFDomainWizard
	chmod +x $WRFCHEM_FOLDER/WRFDomainWizard/run_DomainWizard

	echo " "
	######################## WPF Portal Setup Tools ########################
	## WRFPortal
	cd $WRFCHEM_FOLDER/Downloads
	wget https://esrl.noaa.gov/gsd/wrfportal/portal/wrf-portal.zip
	mkdir $WRFCHEM_FOLDER/WRFPortal
	unzip wrf-portal.zip -d $WRFCHEM_FOLDER/WRFPortal
	chmod +x $WRFCHEM_FOLDERWRFPortal/runWRFPortal

	echo " "
	######################## Static Geography Data inc/ Optional ####################
	# http://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	# These files are large so if you only need certain ones comment the others off
	# All files downloaded and untarred is 200GB
	# https://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	#################################################################################
	cd $WRFCHEM_FOLDER/Downloads
	mkdir $WRFCHEM_FOLDER/GEOG
	mkdir $WRFCHEM_FOLDER/GEOG/WPS_GEOG

	echo " "
	echo "Mandatory WRF Preprocessing System (WPS) Geographical Input Data Mandatory Fields Downloads"
	echo " "
	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_high_res_mandatory.tar.gz
	tar -xvzf geog_high_res_mandatory.tar.gz -C $WRFCHEM_FOLDER/GEOG/

	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_low_res_mandatory.tar.gz
	tar -xvzf geog_low_res_mandatory.tar.gz -C $WRFCHEM_FOLDER/GEOG/
	mv $WRFCHEM_FOLDER/GEOG/WPS_GEOG_LOW_RES/ $WRFCHEM_FOLDER/GEOG/WPS_GEOG

	if [ ${WPS_Specific_Applications} -eq 1 ]; then
		echo " "
		echo " WPS Geographical Input Data Mandatory for Specific Applications"
		echo " "

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_thompson28_chem.tar.gz
		tar -xvzf geog_thompson28_chem.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_noahmp.tar.gz
		tar -xvzf geog_noahmp.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/irrigation.tar.gz
		tar -xvzf irrigation.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_px.tar.gz
		tar -xvzf geog_px.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_urban.tar.gz
		tar -xvzf geog_urban.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_ssib.tar.gz
		tar -xvzf geog_ssib.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/lake_depth.tar.bz2
		tar -xvf lake_depth.tar.bz2 -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/topobath_30s.tar.bz2
		tar -xvf topobath_30s.tar.bz2 -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/gsl_gwd.tar.bz2
		tar -xvf gsl_gwd.tar.bz2 -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

	fi

	if [ ${Optional_GEOG} -eq 1 ]; then

		echo " "
		echo "Optional WPS Geographical Input Data"
		echo " "

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_older_than_2000.tar.gz
		tar -xvzf geog_older_than_2000.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s_with_lakes.tar.gz
		tar -xvzf modis_landuse_20class_15s_with_lakes.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_alt_lsm.tar.gz
		tar -xvzf geog_alt_lsm.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/nlcd2006_ll_9s.tar.bz2
		tar -xvf nlcd2006_ll_9s.tar.bz2 -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/updated_Iceland_LU.tar.gz
		tar -xvf updated_Iceland_LU.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s.tar.bz2
		tar -xvf modis_landuse_20class_15s.tar.bz2 -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

	fi

fi

if [ "$macos_64bit_GNU" = "1" ] && [ "$WRFCHEM_PICK" = "1" ] && [ "$MAC_CHIP" = "ARM" ]; then

	#############################basic package managment############################
sleep 1
brew install autoconf
sleep 1
brew install bison
sleep 1
brew install byacc
sleep 1
brew install cmake
sleep 1
brew install curl
sleep 1
brew install flex
sleep 1
brew install gdal
sleep 1
brew install gedit
sleep 1
brew install git
sleep 1
brew install gnu-sed
sleep 1
brew install imagemagick
sleep 1
brew install java
sleep 1
brew install ksh
sleep 1
brew install libtool
sleep 1
brew install m4
sleep 1
brew install make
sleep 1
brew install python@3.10
sleep 1
brew install tcsh
sleep 1
brew install wget
sleep 1
brew install xauth
sleep 1
brew install xorgproto
sleep 1
brew install xorgrgb
sleep 1
brew install xquartz

export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
export PATH=/usr/local/bin:$PATH

	##############################Directory Listing############################

	export HOME=$(
		cd
		pwd
	)
	mkdir $HOME/WRFCHEM
	export WRFCHEM_FOLDER=$HOME/WRFCHEM
	cd $WRFCHEM_FOLDER/
	mkdir Downloads
	mkdir WRFDA
	mkdir Libs
	export DIR=$WRFCHEM_FOLDER/Libs
	mkdir -p Libs/grib2
	mkdir -p Libs/NETCDF
	mkdir -p Tests/Environment
	mkdir -p Tests/Compatibility

	#############################Core Management####################################
	export CPU_CORE=$(sysctl -n hw.ncpu) # number of available threads on system
	export CPU_6CORE="6"
	export CPU_HALF=$(($CPU_CORE / 2))
	#1/2 of availble cores on system
	export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))
	#Forces CPU cores to even number to avoid partial core export. ie 7 cores would be 3.5 cores.

	if [ $CPU_CORE -le $CPU_6CORE ]; then #If statement for low core systems.  Forces computers to only use 1 core if there are 4 cores or less on the system.
		export CPU_HALF_EVEN="2"
	else
		export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))
	fi

	echo "##########################################"
	echo "Number of Threads being used $CPU_HALF_EVEN"
	echo "##########################################"
	echo " "

	##############################Downloading Libraries############################

	cd $WRFCHEM_FOLDER/Downloads
	wget -c https://github.com/madler/zlib/archive/refs/tags/v$Zlib_Version.tar.gz
	wget -c https://github.com/HDFGroup/hdf5/archive/refs/tags/hdf5-$HDF5_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-c/archive/refs/tags/v$Netcdf_C_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-fortran/archive/refs/tags/v$Netcdf_Fortran_Version.tar.gz
	wget -c https://download.sourceforge.net/libpng/libpng-$Libpng_Version.tar.gz
	wget -c https://www.ece.uvic.ca/~frodo/jasper/software/jasper-$Jasper_Version.zip
	wget -c https://github.com/pmodels/mpich/releases/download/v$Mpich_Version/mpich-$Mpich_Version.tar.gz
	wget -c https://parallel-netcdf.github.io/Release/pnetcdf-$Pnetcdf_Version.tar.gz


	echo " "

	#############################Compilers############################

	#Symlink to avoid clang conflicts with compilers
	#default gcc path /usr/bin/gcc
	#default homebrew path /usr/local/bin
	echo $PASSWD | sudo -S unlink /opt/homebrew/bin/gfortran
	echo $PASSWD | sudo -S unlink /opt/homebrew/bin/gcc
	echo $PASSWD | sudo -S unlink /opt/homebrew/bin/g++

	source ~./bashrc
	gcc --version
	g++ --version
	gfortran --version

	cd /opt/homebrew/bin

	echo $PASSWD | sudo -S ln -sf gcc-12 gcc
	echo $PASSWD | sudo -S ln -sf g++-12 g++
	echo $PASSWD | sudo -S ln -sf gfortran-12 gfortran

	cd
	source ~/.bashrc
	source ~/.bash_profile
	gcc --version
	g++ --version
	gfortran --version

	export CC=gcc
	export CXX=g++
	export FC=gfortran
	export F77=gfortran
	export CFLAGS="-fPIC -fPIE -Wno-implicit-function-declaration -Wall"

	echo " "

	#IF statement for GNU compiler issue
	export GCC_VERSION=$(gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		export fallow_argument=-fallow-argument-mismatch
		export boz_argument=-fallow-invalid-boz
	else
		export fallow_argument=
		export boz_argument=
	fi

	export FFLAGS="$fallow_argument -m64"
	export FCFLAGS="$fallow_argument -m64"

	echo "##########################################"
	echo "FFLAGS = $FFLAGS"
	echo "FCFLAGS = $FCFLAGS"
	echo "CFLAGS = $CFLAGS"
	echo "##########################################"

	echo " "

	#############################zlib############################
	#Uncalling compilers due to comfigure issue with zlib1.2.12
	#With CC & CXX definied ./configure uses different compiler Flags

	cd $WRFCHEM_FOLDER/Downloads
	tar -xvzf v$Zlib_Version.tar.gz
	cd zlib-$Zlib_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log
	./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "

	##############################MPICH############################
	cd $WRFCHEM_FOLDER/Downloads
	tar -xvzf mpich-$Mpich_Version.tar.gz
	cd mpich-$Mpich_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	F90= ./configure --prefix=$DIR/MPICH --with-device=ch3 FFLAGS="$fallow_argument -m64" FCFLAGS="$fallow_argument -m64" 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee install.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PATH=$DIR/MPICH/bin:$PATH
	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx

	echo " "

	#############################libpng############################
	cd $WRFCHEM_FOLDER/Downloads
	export LDFLAGS=-L$DIR/grib2/lib
	export CPPFLAGS=-I$DIR/grib2/include
	tar -xvzf libpng-$Libpng_Version.tar.gz
	cd libpng-$Libpng_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check
	#make check

	echo " "
	#############################JasPer############################

	cd $WRFCHEM_FOLDER/Downloads
	unzip jasper-$Jasper_Version.zip
	cd jasper-$Jasper_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee install.log
	export JASPERLIB=$DIR/grib2/lib
	export JASPERINC=$DIR/grib2/include

	echo " "
	#############################hdf5 library for netcdf4 functionality############################

	cd $WRFCHEM_FOLDER/Downloads
	tar -xvzf hdf5-$HDF5_Version.tar.gz
	cd hdf5-hdf5-$HDF5_Version
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 --with-zlib=$DIR/grib2 --enable-hl --enable-fortran --enable-parallel 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export HDF5=$DIR/grib2
	export PHDF5=$DIR/grib2
	export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH

	echo " "

	#############################Install Parallel-netCDF##############################
	#Make file created with half of available cpu cores
	#Hard path for MPI added
	##################################################################################
	cd $WRFCHEM_FOLDER/Downloads
	tar -xvzf pnetcdf-$Pnetcdf_Version.tar.gz
	cd pnetcdf-$Pnetcdf_Version
	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx
	autoreconf -i -f 2>&1 | tee autoreconf.log
	./configure --prefix=$DIR/grib2 --enable-shared --enable-static 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PNETCDF=$DIR/grib2

	echo " "

	##############################Install NETCDF C Library############################
	cd $WRFCHEM_FOLDER/Downloads
	tar -xzvf v$Netcdf_C_Version.tar.gz
	cd netcdf-c-$Netcdf_C_Version/
	export CPPFLAGS=-I$DIR/grib2/include
	export LDFLAGS=-L$DIR/grib2/lib
	export LIBS="-lhdf5_hl -lhdf5 -lz -lcurl -lgfortran -lgcc -lm -ldl -lpnetcdf"
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --disable-dap --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-pnetcdf --enable-cdf5 --enable-parallel-tests 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PATH=$DIR/NETCDF/bin:$PATH
	export NETCDF=$DIR/NETCDF
	echo " "

	##############################NetCDF fortran library############################
	cd $WRFCHEM_FOLDER/Downloads
	tar -xvzf v$Netcdf_Fortran_Version.tar.gz
	cd netcdf-fortran-$Netcdf_Fortran_Version/
	export LD_LIBRARY_PATH=$DIR/NETCDF/lib:$LD_LIBRARY_PATH
	export CPPFLAGS="-I$DIR/NETCDF/include -I$DIR/grib2/include"
	export LDFLAGS="-L$DIR/NETCDF/lib -L$DIR/grib2/lib"
	export LIBS="-lnetcdf -lpnetcdf -lcurl -lhdf5_hl -lhdf5 -lz -lm -ldl -lgcc -lgfortran"
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-parallel-tests --enable-hdf5 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "

	#################################### System Environment Tests ##############
	mkdir -p $WRFCHEM_FOLDER/Tests/Environment
	mkdir -p $WRFCHEM_FOLDER/Tests/Compatibility

	cd $WRFCHEM_FOLDER/Downloads
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_NETCDF_MPI_tests.tar
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_tests.tar

	tar -xvf Fortran_C_tests.tar -C $WRFCHEM_FOLDER/Tests/Environment
	tar -xvf Fortran_C_NETCDF_MPI_tests.tar -C $WRFCHEM_FOLDER/Tests/Compatibility
	export one="1"
	echo " "
	############## Testing Environment #####

	cd $WRFCHEM_FOLDER/Tests/Environment

	echo " "
	echo " "
	echo "Environment Testing "
	echo "Test 1"
	$FC TEST_1_fortran_only_fixed.f
	./a.out | tee env_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 1 Passed"
	else
		echo "Environment Compiler Test 1 Failed"
		exit
	fi
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 2"
	$FC TEST_2_fortran_only_free.f90
	./a.out | tee env_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 2 Passed"
	else
		echo "Environment Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 3"
	$CC TEST_3_c_only.c
	./a.out | tee env_test3.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test3.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 3 Passed"
	else
		echo "Environment Compiler Test 3 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 4"
	$CC -c -m64 TEST_4_fortran+c_c.c
	$FC -c -m64 TEST_4_fortran+c_f.f90
	$FC -m64 TEST_4_fortran+c_f.o TEST_4_fortran+c_c.o
	./a.out | tee env_test4.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test4.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 4 Passed"
	else
		echo "Environment Compiler Test 4 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	############## Testing Environment #####

	cd $WRFCHEM_FOLDER/Tests/Compatibility

	cp ${NETCDF}/include/netcdf.inc .

	echo " "
	echo " "
	echo "Library Compatibility Tests "
	echo "Test 1"
	$FC -c 01_fortran+c+netcdf_f.f
	$CC -c 01_fortran+c+netcdf_c.c
	$FC 01_fortran+c+netcdf_f.o 01_fortran+c+netcdf_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	./a.out | tee comp_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 1 Passed"
	else
		echo "Compatibility Compiler Test 1 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "

	echo "Test 2"
	$MPIFC -c 02_fortran+c+netcdf+mpi_f.f
	$MPICC -c 02_fortran+c+netcdf+mpi_c.c
	$MPIFC 02_fortran+c+netcdf+mpi_f.o \
		02_fortran+c+netcdf+mpi_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	$DIR/MPICH/bin/mpirun ./a.out | tee comp_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 2 Passed"
	else
		echo "Compatibility Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."
	echo " "

	echo " All tests completed and passed"
	echo " "

	#Installing Miniconda3 to WRF directory and updating libraries
	pip install --upgrade --force-reinstall zstandard
	pip install --upgrade --force-reinstall zstd
	pip3 install --upgrade --force-reinstall zstandard
	pip3 install --upgrade --force-reinstall zstd
	export Miniconda_Install_DIR=$WRFCHEM_FOLDER/miniconda3

	mkdir -p $Miniconda_Install_DIR

	wget -c https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O $Miniconda_Install_DIR/miniconda.sh
	bash $Miniconda_Install_DIR/miniconda.sh -b -u -p $Miniconda_Install_DIR

	rm -rf $Miniconda_Install_DIR/miniconda.sh

	export PATH=$WRFHYDRO_FOLDER/miniconda3/bin:$PATH

	source $Miniconda_Install_DIR/etc/profile.d/conda.sh

	$Miniconda_Install_DIR/bin/conda init bash
	$Miniconda_Install_DIR/bin/conda init zsh
	$Miniconda_Install_DIR/bin/conda init tcsh
	$Miniconda_Install_DIR/bin/conda init xonsh
	$Miniconda_Install_DIR/bin/conda init powershell

	conda config --add channels conda-forge
	conda config --set auto_activate_base false
	conda update -n root --all -y

	echo " "

	#Installing NCL via Conda
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda init bash
	conda activate base
	conda create -n ncl_stable -c conda-forge ncl -y
	conda activate ncl_stable

	conda deactivate
	conda deactivate
	conda deactivate
	echo " "

	##################### WRF Python           ##################
	########### WRf-Python compiled via Conda  ##################
	########### This is the preferred method by NCAR      ##################
	##### https://wrf-python.readthedocs.io/en/latest/installation.html  ##################
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
conda env create -f $HOME/WRF-MOSIT/wrf-python-stable.yml

	######################### Climate Data Operators ############
	######################### CDO compiled via Conda ###########
	####################### This is the preferred method #######
	################### https://bairdlangenbrunner.github.io/python-for-climate-scientists/conda/setting-up-conda-environments.html #######################

	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda init bash
	conda activate base
	conda create --name cdo_stable -y
	source activate cdo_stable
	conda install -c conda-forge cdo -y
	conda update --all -y
	conda deactivate
	conda deactivate
	conda deactivate

	echo " "

	################################## QGIS #####################################
	#QGIS (Quantum Geographic Information System) is a free and open-source platform that allows users to
	#analyze, view, and edit geospatial data. It supports both vector and raster layers, as well as various #web services, and is extensible through community-developed plugins. Key features include map
	#creation, spatial analysis, and data management.
	#############################################################################

	conda env create -f $HOME/WRF-MOSIT/qgis.3.28.8.yml

	echo " "

	############################ WRFCHEM ${WPS_VERSION} #################################
	## WRF CHEM v${WPS_VERSION}
	## Downloaded from git tagged releases
	# option 17, option 1 for gfortran and distributed memory w/basic nesting
	# If the script comes back asking to locate a file (libfl.a)
	# Use locate command to find file. in a new terminal and then copy that location
	#locate *name of file*
	#Optimization set to 0 due to buffer overflow dump
	#sed -i -e 's/="-O"/="-O0/' configure_kpp
	########################################################################
	#Setting up WRF-CHEM/KPP
	cd $WRFCHEM_FOLDER/Downloads

	ulimit -s unlimited
	export MALLOC_CHECK_=0
	export WRF_EM_CORE=1
	export WRF_NMM_CORE=0
	export WRF_CHEM=1

	export WRFIO_NCD_LARGE_FILE_SUPPORT=1

	#Downloading WRF code
	cd $WRFCHEM_FOLDER/Downloads
	wget -c https://github.com/wrf-model/WRF/releases/download/v${WRF_VERSION}/v${WRF_VERSION}.tar.gz -O WRF-${WRF_VERSION}.tar.gz
	tar -xvzf WRF-${WRF_VERSION}.tar.gz -C $WRFCHEM_FOLDER/

	# If statment for changing folder name
	if [ -d "$WRFCHEM_FOLDER/WRF" ]; then
		mv -f $WRFCHEM_FOLDER/WRF $WRFCHEM_FOLDER/WRFV${WRF_VERSION}
	fi
	cd $WRFCHEM_FOLDER/WRFV${WRF_VERSION}

	./clean -a

	if [ ${auto_config} -eq 1 ]; then
		sed -i'' -e '443s/.*/  $response = "17 \\n";/g' $WRFCHEM_FOLDER/WRFV${WRF_VERSION}/arch/Config.pl # Answer for compiler choice
		sed -i'' -e '909s/.*/  $response = "1 \\n";/g' $WRFCHEM_FOLDER/WRFV${WRF_VERSION}/arch/Config.pl  #Answer for basic nesting
		./configure 2>&1 | tee configure.log
	else
		./configure 2>&1 | tee configure.log #Option 17 gfortran compiler with distributed memory option 1 for basic nesting
	fi

	sed -i'' -e 's/-w  -c/-w  -c -fPIC -fPIE -O3 -Wno-implicit-function-declaration/g' $WRFCHEM_FOLDER/WRFV${WRF_VERSION}/configure.wrf

	./compile em_real 2>&1 | tee compile.wrf.log
	./compile emi_conv 2>&1 | tee compile.emis.log

	export WRF_DIR=$WRFCHEM_FOLDER/WRFV${WRF_VERSION}

	# IF statement to check that all files were created.
	cd $WRFCHEM_FOLDER/WRFV${WRF_VERSION}/main
	n=$(ls ./*.exe | wc -l)
	if (($n >= 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		cd $WRFCHEM_FOLDER/WRFV${WRF_VERSION}
		./compile -j $CPU_HALF_EVEN em_real 2>&1 | tee compile.wrf2.log
		cd $WRFCHEM_FOLDER/WRFV${WRF_VERSION}/main
		n=$(ls ./*.exe | wc -l)
		if (($n >= 3)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "
	############################WPSV${WPS_VERSION}#####################################
	## WPS v${WPS_VERSION}
	## Downloaded from git tagged releases
	#Option 3 for gfortran and distributed memory
	########################################################################

	cd $WRFCHEM_FOLDER/Downloads
	wget -c https://github.com/wrf-model/WPS/archive/refs/tags/v${WPS_VERSION}.tar.gz -O WPS-${WPS_VERSION}.tar.gz
	tar -xvzf WPS-${WPS_VERSION}.tar.gz -C $WRFCHEM_FOLDER/
	cd $WRFCHEM_FOLDER/WPS-${WPS_VERSION}
	./clean -a

	if [ ${auto_config} -eq 1 ]; then
		echo 19 | ./configure 2>&1 | tee configure.log #Option 19 for gfortran and distributed memory
	else
		./configure 2>&1 | tee configure.log #Option 19 gfortran compiler with distributed memory
	fi

	./compile 2>&1 | tee compile.wps.log

	# IF statement to check that all files were created.
	cd $WRFCHEM_FOLDER/WPS-${WPS_VERSION}
	n=$(ls ./*.exe | wc -l)
	if (($n == 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		./compile 2>&1 | tee compile.wps2.log
		cd $WRFCHEM_FOLDER/WPS-${WPS_VERSION}
		n=$(ls ./*.exe | wc -l)
		if (($n == 3)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "

	############################WRFDA 3DVAR###############################
	## WRFDA v${WPS_VERSION} 3DVAR
	## Downloaded from git tagged releases
	## Does not include RTTOV Libarary for radiation data.  If wanted will need to install library then reconfigure
	##Note: if you intend to run both 3DVAR and 4DVAR experiments, it is not necessary to compile the code twice.
	#Option 34 for gfortran/gcc and distribunted memory
	########################################################################
	cd $WRFCHEM_FOLDER/Downloads
	cd $WRFCHEM_FOLDER/Downloads
	wget -c https://github.com/wrf-model/WRF/releases/download/v${WRF_VERSION}/v${WRF_VERSION}.tar.gz -O WRF-${WRF_VERSION}.tar.gz
	mkdir $WRFCHEM_FOLDER/WRFDA
	tar -xvzf WRF-${WRF_VERSION}.tar.gz -C $WRFCHEM_FOLDER/WRFDA
	# If statment for changing folder name
	if [ -d "$WRFCHEM_FOLDER/WRFDA/WRF" ]; then
		mv -f $WRFCHEM_FOLDER/WRFDA/WRF $WRFCHEM_FOLDER/WRFDA/WRFV${WRF_VERSION}
	fi
	cd $WRFCHEM_FOLDER/WRFDA/WRFV${WRF_VERSION}
	mv * $WRFCHEM_FOLDER/WRFDA
	cd $WRFCHEM_FOLDER/WRFDA
	rm -rf WRFV${WRF_VERSION}/
	cd $WRFCHEM_FOLDER/WRFDA

	ulimit -s unlimited
	export WRF_CHEM=1
	export WRFIO_NCD_LARGE_FILE_SUPPORT=1

	./clean -a

	if [ ${auto_config} -eq 1 ]; then
		echo 17 | ./configure wrfda 2>&1 | tee configure.log #Option 17 for gfortran/gcc and distribunted memory
	else
		./configure wrfda 2>&1 | tee configure.log #Option 17 for gfortran/gcc and distribunted memory
	fi
	echo " "
	./compile all_wrfvar 2>&1 | tee compile.chem.wrfvar.log
	echo " "

	# IF statement to check that all files were created.
	cd $WRFCHEM_FOLDER/WRFDA/var/da
	n=$(ls ./*.exe | wc -l)
	cd $WRFCHEM_FOLDER/WRFDA/var/obsproc/src
	m=$(ls ./*.exe | wc -l)
	if ((($n == 43) && ($m == 1))); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WRFDA. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		cd $WRFCHEM_FOLDER/WRFDA
		./compile -j $CPU_HALF_EVEN all_wrfvar 2>&1 | tee compile.chem.wrfvar2.log
		cd $WRFCHEM_FOLDER/WRFDA/var/da
		n=$(ls ./*.exe | wc -l)
		cd $WRFCHEM_FOLDER/WRFDA/var/obsproc/src
		m=$(ls ./*.exe | wc -l)
		if ((($n == 43) && ($m == 1))); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WRFDA. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi
	echo " "

	######################## WPS Domain Setup Tools ########################
	## DomainWizard

	cd $WRFCHEM_FOLDER/Downloads
	wget http://esrl.noaa.gov/gsd/wrfportal/domainwizard/WRFDomainWizard.zip
	mkdir $WRFCHEM_FOLDER/WRFDomainWizard
	unzip WRFDomainWizard.zip -d $WRFCHEM_FOLDER/WRFDomainWizard
	chmod +x $WRFCHEM_FOLDER/WRFDomainWizard/run_DomainWizard

	echo " "
	######################## WPF Portal Setup Tools ########################
	## WRFPortal
	cd $WRFCHEM_FOLDER/Downloads
	wget https://esrl.noaa.gov/gsd/wrfportal/portal/wrf-portal.zip
	mkdir $WRFCHEM_FOLDER/WRFPortal
	unzip wrf-portal.zip -d $WRFCHEM_FOLDER/WRFPortal
	chmod +x $WRFCHEM_FOLDERWRFPortal/runWRFPortal

	echo " "
	######################## Static Geography Data inc/ Optional ####################
	# http://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	# These files are large so if you only need certain ones comment the others off
	# All files downloaded and untarred is 200GB
	# https://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	#################################################################################
	cd $WRFCHEM_FOLDER/Downloads
	mkdir $WRFCHEM_FOLDER/GEOG
	mkdir $WRFCHEM_FOLDER/GEOG/WPS_GEOG

	echo " "
	echo "Mandatory WRF Preprocessing System (WPS) Geographical Input Data Mandatory Fields Downloads"
	echo " "
	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_high_res_mandatory.tar.gz
	tar -xvzf geog_high_res_mandatory.tar.gz -C $WRFCHEM_FOLDER/GEOG/

	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_low_res_mandatory.tar.gz
	tar -xvzf geog_low_res_mandatory.tar.gz -C $WRFCHEM_FOLDER/GEOG/
	mv $WRFCHEM_FOLDER/GEOG/WPS_GEOG_LOW_RES/ $WRFCHEM_FOLDER/GEOG/WPS_GEOG

	if [ ${WPS_Specific_Applications} -eq 1 ]; then
		echo " "
		echo " WPS Geographical Input Data Mandatory for Specific Applications"
		echo " "

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_thompson28_chem.tar.gz
		tar -xvzf geog_thompson28_chem.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_noahmp.tar.gz
		tar -xvzf geog_noahmp.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/irrigation.tar.gz
		tar -xvzf irrigation.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_px.tar.gz
		tar -xvzf geog_px.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_urban.tar.gz
		tar -xvzf geog_urban.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_ssib.tar.gz
		tar -xvzf geog_ssib.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/lake_depth.tar.bz2
		tar -xvf lake_depth.tar.bz2 -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/topobath_30s.tar.bz2
		tar -xvf topobath_30s.tar.bz2 -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/gsl_gwd.tar.bz2
		tar -xvf gsl_gwd.tar.bz2 -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

	fi

	if [ ${Optional_GEOG} -eq 1 ]; then

		echo " "
		echo "Optional WPS Geographical Input Data"
		echo " "

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_older_than_2000.tar.gz
		tar -xvzf geog_older_than_2000.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s_with_lakes.tar.gz
		tar -xvzf modis_landuse_20class_15s_with_lakes.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_alt_lsm.tar.gz
		tar -xvzf geog_alt_lsm.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/nlcd2006_ll_9s.tar.bz2
		tar -xvf nlcd2006_ll_9s.tar.bz2 -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/updated_Iceland_LU.tar.gz
		tar -xvf updated_Iceland_LU.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s.tar.bz2
		tar -xvf modis_landuse_20class_15s.tar.bz2 -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

	fi

fi

if [ "$Centos_64bit_GNU" = "1" ] && [ "$WRFCHEM_PICK" = "1" ]; then

	#############################basic package managment############################
	echo $PASSWD | sudo -S yum install epel-release -y
	echo $PASSWD | sudo -S yum install dnf -y
	echo $PASSWD | sudo -S dnf install epel-release -y
	echo $PASSWD | sudo -S dnf install dnf -y
	echo $PASSWD | sudo -S dnf -y update
	echo $PASSWD | sudo -S dnf -y upgrade
	echo $PASSWD | sudo -S dnf -y install autoconf automake bzip2 bzip2-devel byacc cairo-devel cmake cpp curl curl-devel flex  fontconfig-devel fontconfig-devel.x86_64 gcc gcc-c++ gcc-gfortran git java-11-openjdk java-11-openjdk-devel ksh libX11-devel libX11-devel.x86_64 libXaw libXaw-devel libXext-devel libXext-devel.x86_64 libXmu-devel libXrender-devel libXrender-devel.x86_64 libstdc++ libstdc++-devel  libxml2 libxml2-devel m4  .x86_64 nfs-utils perl pkgconfig  pixman-devel python3 python3-devel tcsh time unzip wget
	echo $PASSWD | sudo -S dnf -y groupinstall "Development Tools"
	echo $PASSWD | sudo -S dnf -y update
	echo $PASSWD | sudo -S dnf -y upgrade
	echo " "

	##############################Directory Listing############################
	export HOME=$(
		cd
		pwd
	)

	mkdir $HOME/WRFCHEM
	export WRFCHEM_FOLDER=$HOME/WRFCHEM
	cd $WRFCHEM_FOLDER/
	mkdir Downloads
	mkdir WRFPLUS
	mkdir WRFDA
	mkdir Libs
	export DIR=$WRFCHEM_FOLDER/Libs
	mkdir Libs/grib2
	mkdir Libs/NETCDF
	mkdir Libs/MPICH
	mkdir -p Tests/Environment
	mkdir -p Tests/Compatibility

	echo " "
	#############################Core Management####################################

	export CPU_CORE=$(nproc) # number of available threads on system
	export CPU_6CORE="6"
	export CPU_HALF=$(($CPU_CORE / 2))                    #half of availble cores on system
	export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2))) #Forces CPU cores to even number to avoid partial core export. ie 7 cores would be 3.5 cores.

	if [ $CPU_CORE -le $CPU_6CORE ]; then #If statement for low core systems.  Forces computers to only use 1 core if there are 4 cores or less on the system.
		export CPU_HALF_EVEN="2"
	else
		export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))
	fi

	echo "##########################################"
	echo "Number of Threads being used $CPU_HALF_EVEN"
	echo "##########################################"

	echo " "
	##############################Downloading Libraries############################
	#Force use of ipv4 with -4
	cd Downloads
	wget -c https://github.com/madler/zlib/archive/refs/tags/v$Zlib_Version.tar.gz
	wget -c https://github.com/HDFGroup/hdf5/archive/refs/tags/hdf5-$HDF5_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-c/archive/refs/tags/v$Netcdf_C_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-fortran/archive/refs/tags/v$Netcdf_Fortran_Version.tar.gz
	wget -c https://github.com/pmodels/mpich/releases/download/v$Mpich_Version/mpich-$Mpich_Version.tar.gz
	wget -c https://download.sourceforge.net/libpng/libpng-$Libpng_Version.tar.gz
	wget -c https://www.ece.uvic.ca/~frodo/jasper/software/jasper-$Jasper_Version.zip
	wget -c https://parallel-netcdf.github.io/Release/pnetcdf-$Pnetcdf_Version.tar.gz
	wget -c https://sourceforge.net/projects/opengrads/files/grads2/2.2.1.oga.1/Linux%20%2864%20Bits%29/opengrads-2.2.1.oga.1-bundle-x86_64-pc-linux-gnu-glibc_2.17.tar.gz

	echo " "
	####################################Compilers#####################################
	export CC=gcc
	export CXX=g++
	export FC=gfortran
	export F77=gfortran
	export CFLAGS="-fPIC -fPIE -O3"

	#IF statement for GNU compiler issue
	export GCC_VERSION=$(gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		export fallow_argument=-fallow-argument-mismatch
		export boz_argument=-fallow-invalid-boz
	else
		export fallow_argument=
		export boz_argument=
	fi

	export FFLAGS="$fallow_argument -m64"
	export FCFLAGS="$fallow_argument -m64"

	echo "##########################################"
	echo "FFLAGS = $FFLAGS"
	echo "FCFLAGS = $FCFLAGS"
	echo "CFLAGS = $CFLAGS"
	echo "##########################################"

	echo " "
	#############################zlib############################
	#Uncalling compilers due to comfigure issue with zlib$Zlib_Version
	#With CC & CXX definied ./configure uses different compiler Flags

	cd $WRFCHEM_FOLDER/Downloads
	tar -xvzf v$Zlib_Version.tar.gz
	cd zlib-$Zlib_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log
	./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "
	##############################MPICH############################
	#F90= due to compiler issues with mpich install
	cd $WRFCHEM_FOLDER/Downloads
	tar -xvzf mpich-$Mpich_Version.tar.gz
	cd mpich-$Mpich_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	F90= ./configure --prefix=$DIR/MPICH --with-device=ch3 FFLAGS=$fallow_argument FCFLAGS=$fallow_argument 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	# make check

	export PATH=$DIR/MPICH/bin:$PATH
	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx

	echo " "
	#############################libpng############################
	cd $WRFCHEM_FOLDER/Downloads
	export LDFLAGS=-L$DIR/grib2/lib
	export CPPFLAGS=-I$DIR/grib2/include
	tar -xvzf libpng-$Libpng_Version.tar.gz
	cd libpng-$Libpng_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check
	echo " "
	#############################JasPer############################
	cd $WRFCHEM_FOLDER/Downloads
	unzip jasper-$Jasper_Version.zip
	cd jasper-$Jasper_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	./configure --prefix=$DIR/grib2
	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export JASPERLIB=$DIR/grib2/lib
	export JASPERINC=$DIR/grib2/include

	echo " "
	#############################hdf5 library for netcdf4 functionality############################
	cd $WRFCHEM_FOLDER/Downloads
	tar -xvzf hdf5-$HDF5_Version.tar.gz
	cd hdf5-hdf5-$HDF5_Version
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 --with-zlib=$DIR/grib2 --enable-hl --enable-fortran --enable-parallel 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export HDF5=$DIR/grib2
	export PHDF5=$DIR/grib2
	export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH

	echo " "
	#############################Install Parallel-netCDF##############################
	#Make file created with half of available cpu cores
	#Hard path for MPI added
	##################################################################################
	cd $WRFCHEM_FOLDER/Downloads
	tar -xvzf pnetcdf-$Pnetcdf_Version.tar.gz
	cd pnetcdf-$Pnetcdf_Version
	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx
	autoreconf -i -f 2>&1 | tee autoreconf.log
	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 --enable-shared --enable-static 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PNETCDF=$DIR/grib2

	echo " "

	##############################Install NETCDF C Library############################
	cd $WRFCHEM_FOLDER/Downloads
	tar -xzvf v$Netcdf_C_Version.tar.gz
	cd netcdf-c-$Netcdf_C_Version/
	export CPPFLAGS=-I$DIR/grib2/include
	export LDFLAGS=-L$DIR/grib2/lib
	export LIBS="-lhdf5_hl -lhdf5 -lz -lcurl -lgfortran -lgcc -lm -ldl -lpnetcdf"
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --disable-dap --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-pnetcdf --enable-cdf5 --enable-parallel-tests 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PATH=$DIR/NETCDF/bin:$PATH
	export NETCDF=$DIR/NETCDF
	echo " "
	##############################NetCDF fortran library############################
	cd $WRFCHEM_FOLDER/Downloads
	tar -xvzf v$Netcdf_Fortran_Version.tar.gz
	cd netcdf-fortran-$Netcdf_Fortran_Version/
	export LD_LIBRARY_PATH=$DIR/NETCDF/lib:$LD_LIBRARY_PATH
	export CPPFLAGS="-I$DIR/NETCDF/include -I$DIR/grib2/include"
	export LDFLAGS="-L$DIR/NETCDF/lib -L$DIR/grib2/lib"
	export LIBS="-lnetcdf -lpnetcdf -lcurl -lhdf5_hl -lhdf5 -lz -lm -ldl -lgcc -lgfortran"
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-parallel-tests --enable-hdf5 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "
	#################################### System Environment Tests ##############

	cd $WRFCHEM_FOLDER/Downloads
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_NETCDF_MPI_tests.tar
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_tests.tar

	tar -xvf Fortran_C_tests.tar -C $WRFCHEM_FOLDER/Tests/Environment
	tar -xvf Fortran_C_NETCDF_MPI_tests.tar -C $WRFCHEM_FOLDER/Tests/Compatibility

	export one="1"
	echo " "
	############## Testing Environment #####

	cd $WRFCHEM_FOLDER/Tests/Environment

	cp ${NETCDF}/include/netcdf.inc .

	echo " "
	echo " "
	echo "Environment Testing "
	echo "Test 1"
	$FC TEST_1_fortran_only_fixed.f
	./a.out | tee env_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 1 Passed"
	else
		echo "Environment Compiler Test 1 Failed"
		exit
	fi
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 2"
	$FC TEST_2_fortran_only_free.f90
	./a.out | tee env_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 2 Passed"
	else
		echo "Environment Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 3"
	$CC TEST_3_c_only.c
	./a.out | tee env_test3.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test3.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 3 Passed"
	else
		echo "Environment Compiler Test 3 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 4"
	$CC -c -m64 TEST_4_fortran+c_c.c
	$FC -c -m64 TEST_4_fortran+c_f.f90
	$FC -m64 TEST_4_fortran+c_f.o TEST_4_fortran+c_c.o
	./a.out | tee env_test4.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test4.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 4 Passed"
	else
		echo "Environment Compiler Test 4 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	############## Testing Environment #####

	cd $WRFCHEM_FOLDER/Tests/Compatibility

	cp ${NETCDF}/include/netcdf.inc .

	echo " "
	echo " "
	echo "Library Compatibility Tests "
	echo "Test 1"
	$FC -c 01_fortran+c+netcdf_f.f
	$CC -c 01_fortran+c+netcdf_c.c
	$FC 01_fortran+c+netcdf_f.o 01_fortran+c+netcdf_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	./a.out | tee comp_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 1 Passed"
	else
		echo "Compatibility Compiler Test 1 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "

	echo "Test 2"
	$MPIFC -c 02_fortran+c+netcdf+mpi_f.f
	$MPICC -c 02_fortran+c+netcdf+mpi_c.c
	$MPIFC 02_fortran+c+netcdf+mpi_f.o \
		02_fortran+c+netcdf+mpi_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	$DIR/MPICH/bin/mpirun ./a.out | tee comp_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 2 Passed"
	else
		echo "Compatibility Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."
	echo " "

	echo " All tests completed and passed"
	echo " "

	###############################NCEPlibs#####################################
	#The libraries are built and installed with
	# ./make_ncep_libs.sh -s MACHINE -c COMPILER -d NCEPLIBS_DIR -o OPENMP [-m mpi] [-a APPLICATION]
	#It is recommended to install the NCEPlibs into their own directory, which must be created before running the installer. Further information on the command line arguments can be obtained with
	# ./make_ncep_libs.sh -h

	#If iand error occurs go to https://github.com/NCAR/NCEPlibs/pull/16/files make adjustment and re-run ./make_ncep_libs.sh
	############################################################################

	cd $WRFCHEM_FOLDER/Downloads
	git clone https://github.com/NCAR/NCEPlibs.git
	cd NCEPlibs
	mkdir $DIR/nceplibs

	export JASPER_INC=$DIR/grib2/include
	export PNG_INC=$DIR/grib2/include
	export NETCDF=$DIR/NETCDF

	#for loop to edit linux.gnu for nceplibs to install
	#make if statement for gcc-9 or older
	export GCC_VERSION=$(gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		y="24 28 32 36 40 45 49 53 56 60 64 68 69 73 74 79"
		for X in $y; do
			sed -i "${X}s/= /= $fallow_argument $boz_argument /g" $WRFCHEM_FOLDER/Downloads/NCEPlibs/macros.make.linux.gnu
		done
	else
		echo ""
		echo "Loop not needed"
	fi

	if [ ${auto_config} -eq 1 ]; then
		echo yes | ./make_ncep_libs.sh -s linux -c gnu -d $DIR/nceplibs -o 0 -m 1 -a upp | tee make.install.log
	else
		./make_ncep_libs.sh -s linux -c gnu -d $DIR/nceplibs -o 0 -m 1 -a upp | tee make.install.log
	fi

	export PATH=$DIR/nceplibs:$PATH

	echo " "
	################################UPPv4.1######################################
	#Previous verison of UPP
	#WRF Support page recommends UPPV4.1 due to too many changes to WRF and UPP code
	#since the WRF was written
	#Option 8 gfortran compiler with distributed memory
	#############################################################################
	cd $WRFCHEM_FOLDER/
	git clone -b dtc_post_v4.1.0 --recurse-submodules https://github.com/NOAA-EMC/EMC_post UPPV4.1
	cd UPPV4.1
	mkdir postprd
	export NCEPLIBS_DIR=$DIR/nceplibs
	export NETCDF=$DIR/NETCDF

	if [ ${auto_config} -eq 1 ]; then
		echo 8 | ./configure #Option 8 gfortran compiler with distributed memory
	else
		./configure #Option 8 gfortran compiler with distributed memory
	fi

	#make if statement for gcc-9 or older
	export GCC_VERSION=$(gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		z="58 63"
		for X in $z; do
			sed -i "${X}s/(FOPT)/(FOPT) $fallow_argument $boz_argument  /g" $WRFCHEM_FOLDER/UPPV4.1/configure.upp
		done
	else
		echo ""
		echo "Loop not needed"
	fi

	./compile
	cd $WRFCHEM_FOLDER/UPPV4.1/scripts
	echo $PASSWD | sudo -S cpan install XML::LibXML
	chmod +x run_unipost

	# IF statement to check that all files were created.
	cd $WRFCHEM_FOLDER/UPPV4.1/exec
	n=$(ls ./*.exe | wc -l)
	if (($n == 1)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing UPPV4.1. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files. Exiting the script."
		read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
		exit
	fi

	echo " "

	######################## ARWpost V3.1  ############################
	## ARWpost
	##Configure #3
	###################################################################
	cd $WRFCHEM_FOLDER/Downloads
	wget -c http://www2.mmm.ucar.edu/wrf/src/ARWpost_V3.tar.gz
	tar -xvzf ARWpost_V3.tar.gz -C $WRFCHEM_FOLDER/
	cd $WRFCHEM_FOLDER/ARWpost
	./clean -a
	sed -i -e 's/-lnetcdf/-lnetcdff -lnetcdf/g' $WRFCHEM_FOLDER/ARWpost/src/Makefile
	export NETCDF=$DIR/NETCDF

	if [ ${auto_config} -eq 1 ]; then
		echo 3 | ./configure #Option 3 gfortran compiler with distributed memory
	else
		./configure #Option 3 gfortran compiler with distributed memory
	fi

	export GCC_VERSION=$(gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		sed -i '32s/-ffree-form -O -fno-second-underscore -fconvert=big-endian -frecord-marker=4/-ffree-form -O -fno-second-underscore -fconvert=big-endian -frecord-marker=4 ${fallow_argument} /g' configure.arwp
	fi

	sed -i -e 's/-C -P -traditional/-P -traditional/g' $WRFCHEM_FOLDER/ARWpost/configure.arwp
	./compile

	export PATH=$WRFCHEM_FOLDER/ARWpost/ARWpost.exe:$PATH

	echo " "
	################################ OpenGrADS ##################################
	#Verison 2.2.1 32bit of Linux
	#############################################################################
	if [[ $GRADS_PICK -eq 1 ]]; then
		cd $WRFCHEM_FOLDER/Downloads
		tar -xzvf opengrads-2.2.1.oga.1-bundle-x86_64-pc-linux-gnu-glibc_2.17.tar.gz -C $WRFCHEM_FOLDER/
		cd $WRFCHEM_FOLDER/
		mv $WRFCHEM_FOLDER/opengrads-2.2.1.oga.1 $WRFCHEM_FOLDER/GrADS
		cd GrADS/Contents
		wget -c https://github.com/regisgrundig/SIMOP/blob/master/g2ctl.pl
		chmod +x g2ctl.pl
		wget -c https://sourceforge.net/projects/opengrads/files/wgrib2/0.1.9.4/wgrib2-v0.1.9.4-bin-i686-glib2.5-linux-gnu.tar.gz
		tar -xzvf wgrib2-v0.1.9.4-bin-i686-glib2.5-linux-gnu.tar.gz
		cd wgrib2-v0.1.9.4/bin
		mv wgrib2 $WRFCHEM_FOLDER/GrADS/Contents
		cd $WRFCHEM_FOLDER/GrADS/Contents
		rm wgrib2-v0.1.9.4-bin-i686-glib2.5-linux-gnu.tar.gz
		rm -r wgrib2-v0.1.9.4

		export PATH=$WRFCHEM_FOLDER/GrADS/Contents:$PATH

		echo " "
	fi
	################################## GrADS ###############################
	# Version  2.2.1
	# Sublibs library instructions: http://cola.gmu.edu/grads/gadoc/supplibs2.html
	# GrADS instructions: http://cola.gmu.edu/grads/downloads.php
	########################################################################
	if [[ $GRADS_PICK -eq 2 ]]; then
		cd $WRFCHEM_FOLDER/Downloads
		wget -c ftp://cola.gmu.edu/grads/2.2/grads-2.2.1-bin-centos7.4-x86_64.tar.gz
		tar -xzvf grads-2.2.1-bin-centos7.4-x86_64.tar.gz -C $WRFCHEM_FOLDER
		cd $WRFCHEM_FOLDER/grads-2.2.1/bin
		chmod 775 *

	fi

	##################### NCAR COMMAND LANGUAGE           ##################
	########### NCL compiled via Conda                    ##################
	########### This is the preferred method by NCAR      ##################
	########### https://www.ncl.ucar.edu/index.shtml      ##################
	echo " "
	#Installing Miniconda3 to WRF directory and updating libraries
	pip install --upgrade --force-reinstall zstandard
	pip install --upgrade --force-reinstall zstd
	pip3 install --upgrade --force-reinstall zstandard
	pip3 install --upgrade --force-reinstall zstd
	export Miniconda_Install_DIR=$WRFCHEM_FOLDER/miniconda3

	mkdir -p $Miniconda_Install_DIR

	wget -c https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $Miniconda_Install_DIR/miniconda.sh
	bash $Miniconda_Install_DIR/miniconda.sh -b -u -p $Miniconda_Install_DIR

	rm -rf $Miniconda_Install_DIR/miniconda.sh

	export PATH=$WRFHYDRO_FOLDER/miniconda3/bin:$PATH

	source $Miniconda_Install_DIR/etc/profile.d/conda.sh

	$Miniconda_Install_DIR/bin/conda init bash
	$Miniconda_Install_DIR/bin/conda init zsh
	$Miniconda_Install_DIR/bin/conda init tcsh
	$Miniconda_Install_DIR/bin/conda init xonsh
	$Miniconda_Install_DIR/bin/conda init powershell

	conda config --add channels conda-forge
	conda config --set auto_activate_base false
	conda update -n root --all -y

	echo " "

	echo " "
	#Installing NCL via Conda
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda init bash
	conda activate base
	conda create -n ncl_stable -c conda-forge ncl -y
	conda activate ncl_stable

	conda deactivate
	conda deactivate
	conda deactivate

	echo " "

	############################OBSGRID###############################
	## OBSGRID
	## Downloaded from git tagged releases
	## Option #2
	########################################################################
	cd $WRFCHEM_FOLDER/
	git clone https://github.com/wrf-model/OBSGRID.git
	cd $WRFCHEM_FOLDER/OBSGRID

	./clean -a
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda init bash
	conda activate ncl_stable

	export HOME=$(
		cd
		pwd
	)
	export DIR=$WRFCHEM_FOLDER/Libs
	export NETCDF=$DIR/NETCDF

	if [ ${auto_config} -eq 1 ]; then
		echo 2 | ./configure 2>&1 | tee configure.log #Option 2 for gfortran/gcc and distribunted memory
	else
		./configure 2>&1 | tee configure.log #Option 2 for gfortran/gcc and distribunted memory
	fi

	sed -i '27s/-lnetcdf -lnetcdff/ -lnetcdff -lnetcdf/g' configure.oa

	sed -i '31s/-lncarg -lncarg_gks -lncarg_c -lX11 -lm -lcairo/-lncarg -lncarg_gks -lncarg_c -lX11 -lm -lcairo -lfontconfig -lpixman-1 -lfreetype -lhdf5 -lhdf5_hl /g' configure.oa

	sed -i '39s/-frecord-marker=4/-frecord-marker=4 ${fallow_argument} /g' configure.oa

	sed -i '44s/=	/=	${fallow_argument} /g' configure.oa

	sed -i '45s/-C -P -traditional/-P -traditional/g' configure.oa

	echo " "
	./compile 2>&1 | tee compile.obsgrid.log

	conda deactivate
	conda deactivate
	conda deactivate

	echo " "
	# IF statement to check that all files were created.
	cd $WRFCHEM_FOLDER/OBSGRID
	n=$(ls ./*.exe | wc -l)
	if (($n == 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing OBSGRID. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files. Exiting the script."
		read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
		exit
	fi

	echo " "
	############################## RIP4 #####################################
	mkdir $WRFCHEM_FOLDER/RIP4
	cd $WRFCHEM_FOLDER/Downloads
	wget -c https://www2.mmm.ucar.edu/wrf/src/RIP_47.tar.gz
	tar -xvzf RIP_47.tar.gz -C $WRFCHEM_FOLDER/RIP4
	cd $WRFCHEM_FOLDER/RIP4/RIP_47
	mv * ..
	cd $WRFCHEM_FOLDER/RIP4
	rm -rd RIP_47
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda activate ncl_stable
	conda install -c conda-forge c-compiler fortran-compiler cxx-compiler -y

	export RIP_ROOT=$WRFCHEM_FOLDER/RIP4
	export NETCDF=$DIR/NETCDF
	export NCARG_ROOT=$WRFCHEM_FOLDER/anaconda3/envs/ncl_stable

	sed -i '349s|-L${NETCDF}/lib -lnetcdf $NETCDFF|-L${NETCDF}/lib $NETCDFF -lnetcdff -lnetcdf -lnetcdf -lnetcdff_C -lhdf5 |g' $WRFCHEM_FOLDER/RIP4/configure

	sed -i '27s|NETCDFLIB	= -L${NETCDF}/lib -lnetcdf CONFIGURE_NETCDFF_LIB|NETCDFLIB	= -L</usr/lib/x86_64-linux-gnu/libm.a> -lm -L${NETCDF}/lib CONFIGURE_NETCDFF_LIB -lnetcdf -lhdf5 -lhdf5_hl -lgfortran -lgcc -lz |g' $WRFCHEM_FOLDER/RIP4/arch/preamble

	sed -i '31s|-L${NCARG_ROOT}/lib -lncarg -lncarg_gks -lncarg_c -lX11 -lXext -lpng -lz CONFIGURE_NCARG_LIB| -L${NCARG_ROOT}/lib -lncarg -lncarg_gks -lncarg_c -lX11 -lXext -lpng -lz -lcairo -lfontconfig -lpixman-1 -lfreetype -lexpat -lpthread -lbz2 -lXrender -lgfortran -lgcc -L</usr/lib/x86_64-linux-gnu/> -lm -lhdf5 -lhdf5_hl |g' $WRFCHEM_FOLDER/RIP4/arch/preamble

	sed -i '33s| -O|-fallow-argument-mismatch -O |g' $WRFCHEM_FOLDER/RIP4/arch/configure.defaults

	sed -i '35s|=|= -L$WRFCHEM_FOLDER/LIBS/grib2/lib -lhdf5 -lhdf5_hl |g' $WRFCHEM_FOLDER/RIP4/arch/configure.defaults

	if [ ${auto_config} -eq 1 ]; then
		echo 3 | ./configure #Option 3 gfortran compiler with distributed memory
	else
		./configure #Option 3 gfortran compiler with distributed memory
	fi

	./compile

	conda deactivate
	conda deactivate
	conda deactivate

	echo " "
	##################### WRF Python           ##################
	########### WRf-Python compiled via Conda  ##################
	########### This is the preferred method by NCAR      ##################
	##### https://wrf-python.readthedocs.io/en/latest/installation.html  ##################
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
conda env create -f $HOME/WRF-MOSIT/wrf-python-stable.yml

	echo " "

	################################## QGIS #####################################
	#QGIS (Quantum Geographic Information System) is a free and open-source platform that allows users to
	#analyze, view, and edit geospatial data. It supports both vector and raster layers, as well as various #web services, and is extensible through community-developed plugins. Key features include map
	#creation, spatial analysis, and data management.
	#############################################################################

	conda env create -f $HOME/WRF-MOSIT/qgis.3.28.8.yml

	echo " "


	############################WRFDA 3DVAR###############################
	## WRFDA v${WPS_VERSION} 3DVAR
	## Downloaded from git tagged releases
	## Does not include RTTOV Libarary for radiation data.  If wanted will need to install library then reconfigure
	##Note: if you intend to run both 3DVAR and 4DVAR experiments, it is not necessary to compile the code twice.
	#Option 34 for gfortran/gcc and distribunted memory
	########################################################################
	cd $WRFCHEM_FOLDER/Downloads
	cd $WRFCHEM_FOLDER/Downloads
	wget -c https://github.com/wrf-model/WRF/releases/download/v${WRF_VERSION}/v${WRF_VERSION}.tar.gz -O WRF-${WRF_VERSION}.tar.gz
	mkdir $WRFCHEM_FOLDER/WRFDA
	tar -xvzf WRF-${WRF_VERSION}.tar.gz -C $WRFCHEM_FOLDER/WRFDA
	# If statment for changing folder name
	if [ -d "$WRFCHEM_FOLDER/WRFDA/WRF" ]; then
		mv -f $WRFCHEM_FOLDER/WRFDA/WRF $WRFCHEM_FOLDER/WRFDA/WRFV${WRF_VERSION}
	fi
	cd $WRFCHEM_FOLDER/WRFDA/WRFV${WRF_VERSION}
	mv * $WRFCHEM_FOLDER/WRFDA
	cd $WRFCHEM_FOLDER/WRFDA
	rm -rf WRFV${WRF_VERSION}/
	cd $WRFCHEM_FOLDER/WRFDA

	ulimit -s unlimited
	export WRF_CHEM=1
	export WRFIO_NCD_LARGE_FILE_SUPPORT=1

	./clean -a

	# SED statements to fix configure error
	sed -i '186s/==/=/g' $WRFCHEM_FOLDER/WRFDA/configure
	sed -i '318s/==/=/g' $WRFCHEM_FOLDER/WRFDA/configure
	sed -i '919s/==/=/g' $WRFCHEM_FOLDER/WRFDA/configure

	if [ ${auto_config} -eq 1 ]; then
		echo 34 | ./configure wrfda 2>&1 | tee configure.log #Option 34 for gfortran/gcc and distribunted memory
	else
		./configure wrfda 2>&1 | tee configure.log #Option 18 for gfortran/gcc and distribunted memory
	fi
	echo " "
	./compile -j $CPU_HALF_EVEN all_wrfvar 2>&1 | tee compile.chem.wrfvar.log
	echo " "

	# IF statement to check that all files were created.
	cd $WRFCHEM_FOLDER/WRFDA/var/da
	n=$(ls ./*.exe | wc -l)
	cd $WRFCHEM_FOLDER/WRFDA/var/obsproc/src
	m=$(ls ./*.exe | wc -l)
	if ((($n == 43) && ($m == 1))); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WRFDA. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		cd $WRFCHEM_FOLDER/WRFDA
		./compile -j $CPU_HALF_EVEN all_wrfvar 2>&1 | tee compile.chem.wrfvar2.log
		cd $WRFCHEM_FOLDER/WRFDA/var/da
		n=$(ls ./*.exe | wc -l)
		cd $WRFCHEM_FOLDER/WRFDA/var/obsproc/src
		m=$(ls ./*.exe | wc -l)
		if ((($n == 43) && ($m == 1))); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WRFDA. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi
	echo " "

	############################ WRFCHEM ${WPS_VERSION} #################################
	## WRF CHEM v${WPS_VERSION}
	## Downloaded from git tagged releases
	# option 34, option 1 for gfortran and distributed memory w/basic nesting
	# If the script comes back asking to locate a file (libfl.a)
	# Use locate command to find file. in a new terminal and then copy that location
	#locate *name of file*
	#Optimization set to 0 due to buffer overflow dump
	#sed -i -e 's/="-O"/="-O0/' configure_kpp
	# io_form_boundary
	# io_form_history
	# io_form_auxinput2
	# io_form_auxhist2
	# Note that you need set nocolons = .true. in the section &time_control of namelist.input
	########################################################################
	#Setting up WRF-CHEM/KPP
	cd $WRFCHEM_FOLDER/Downloads

	ulimit -s unlimited
	export WRF_EM_CORE=1
	export WRF_NMM_CORE=0
	export WRF_CHEM=1
	export WRF_KPP=1
	export YACC='/usr/bin/yacc -d'
	export FLEX=/usr/bin/flex
	export FLEX_LIB_DIR=/usr/lib64
	export KPP_HOME=$WRFCHEM_FOLDER/WRFV${WRF_VERSION}/chem/KPP/kpp/kpp-2.1
	export WRF_SRC_ROOT_DIR=$WRFCHEM_FOLDER/WRFV${WRF_VERSION}
	export PATH=$KPP_HOME/bin:$PATH
	export SED=/usr/bin/sed
	export WRFIO_NCD_LARGE_FILE_SUPPORT=1

	#Downloading WRF code

	cd $WRFCHEM_FOLDER/Downloads
	wget -c https://github.com/wrf-model/WRF/releases/download/v${WRF_VERSION}/v${WRF_VERSION}.tar.gz -O WRF-${WRF_VERSION}.tar.gz
	tar -xvzf WRF-${WRF_VERSION}.tar.gz -C $WRFCHEM_FOLDER/
	# If statment for changing folder name
	if [ -d "$WRFCHEM_FOLDER/WRF" ]; then
		mv -f $WRFCHEM_FOLDER/WRF $WRFCHEM_FOLDER/WRFV${WRF_VERSION}
	fi
	cd $WRFCHEM_FOLDER/WRFV${WRF_VERSION}

	cd chem/KPP
	sed -i -e 's/="-O"/="-O0"/' configure_kpp
	cd -

	./clean -a

	if [ ${auto_config} -eq 1 ]; then
		sed -i '443s/.*/  $response = "34 \\n";/g' $WRFCHEM_FOLDER/WRFV${WRF_VERSION}/arch/Config.pl # Answer for compiler choice
		sed -i '909s/.*/  $response = "1 \\n";/g' $WRFCHEM_FOLDER/WRFV${WRF_VERSION}/arch/Config.pl  #Answer for basic nesting
		./configure 2>&1 | tee configure.log
	else
		./configure 2>&1 | tee configure.log #Option 34 gfortran compiler with distributed memory option 1 for basic nesting
	fi

	./compile -j $CPU_HALF_EVEN em_real 2>&1 | tee compile.wrf1.log
	./compile -j $CPU_HALF_EVEN emi_conv 2>&1 | tee compile.emis.log

	export WRF_DIR=$WRFCHEM_FOLDER/WRFV${WRF_VERSION}

	# IF statement to check that all files were created.
	cd $WRFCHEM_FOLDER/WRFV${WRF_VERSION}/main
	n=$(ls ./*.exe | wc -l)
	if (($n >= 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		cd $WRFCHEM_FOLDER/WRFV${WRF_VERSION}
		./compile -j $CPU_HALF_EVEN em_real 2>&1 | tee compile.wrf2.log
		cd $WRFCHEM_FOLDER/WRFV${WRF_VERSION}/main
		n=$(ls ./*.exe | wc -l)
		if (($n >= 3)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "
	############################WPSV${WPS_VERSION}#####################################
	## WPS v${WPS_VERSION}
	## Downloaded from git tagged releases
	#Option 3 for gfortran and distributed memory
	########################################################################

	cd $WRFCHEM_FOLDER/Downloads
	wget -c https://github.com/wrf-model/WPS/archive/refs/tags/v${WPS_VERSION}.tar.gz -O WPS-${WPS_VERSION}.tar.gz
	tar -xvzf WPS-${WPS_VERSION}.tar.gz -C $WRFCHEM_FOLDER/
	cd $WRFCHEM_FOLDER/WPS-${WPS_VERSION}

	./clean -a

	if [ ${auto_config} -eq 1 ]; then
		echo 3 | ./configure 2>&1 | tee configure.log #Option 3 for gfortran and distributed memory
	else
		./configure 2>&1 | tee configure.log #Option 3 gfortran compiler with distributed memory
	fi
	./compile 2>&1 | tee compile.wps.log

	echo " "

	# IF statement to check that all files were created.
	cd $WRFCHEM_FOLDER/WPS-${WPS_VERSION}
	n=$(ls ./*.exe | wc -l)
	if (($n == 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		./compile 2>&1 | tee compile.wps2.log
		cd $WRFCHEM_FOLDER/WPS-${WPS_VERSION}
		n=$(ls ./*.exe | wc -l)
		if (($n == 3)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "

	######################## WPS Domain Setup Tools ########################
	## DomainWizard
	cd $WRFCHEM_FOLDER/Downloads
	wget -c http://esrl.noaa.gov/gsd/wrfportal/domainwizard/WRFDomainWizard.zip
	mkdir $WRFCHEM_FOLDER/WRFDomainWizard
	unzip WRFDomainWizard.zip -d $WRFCHEM_FOLDER/WRFDomainWizard
	chmod +x $WRFCHEM_FOLDER/WRFDomainWizard/run_DomainWizard

	echo " "
	######################## WPF Portal Setup Tools ########################
	## WRFPortal
	cd $WRFCHEM_FOLDER/Downloads
	wget -c https://esrl.noaa.gov/gsd/wrfportal/portal/wrf-portal.zip
	mkdir $WRFCHEM_FOLDER/WRFPortal
	unzip wrf-portal.zip -d $WRFCHEM_FOLDER/WRFPortal
	chmod +x $WRFCHEM_FOLDER/WRFPortal/runWRFPortal

	echo " "

	######################## Static Geography Data inc/ Optional ####################
	# http://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	# These files are large so if you only need certain ones comment the others off
	# All files downloaded and untarred is 200GB
	# https://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	#################################################################################
	cd $WRFCHEM_FOLDER/Downloads
	mkdir $WRFCHEM_FOLDER/GEOG
	mkdir $WRFCHEM_FOLDER/GEOG/WPS_GEOG

	echo " "
	echo "Mandatory WRF Preprocessing System (WPS) Geographical Input Data Mandatory Fields Downloads"
	echo " "
	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_high_res_mandatory.tar.gz
	tar -xvzf geog_high_res_mandatory.tar.gz -C $WRFCHEM_FOLDER/GEOG/

	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_low_res_mandatory.tar.gz
	tar -xvzf geog_low_res_mandatory.tar.gz -C $WRFCHEM_FOLDER/GEOG/
	mv $WRFCHEM_FOLDER/GEOG/WPS_GEOG_LOW_RES/ $WRFCHEM_FOLDER/GEOG/WPS_GEOG

	if [ ${WPS_Specific_Applications} -eq 1 ]; then
		echo " "
		echo " WPS Geographical Input Data Mandatory for Specific Applications"
		echo " "

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_thompson28_chem.tar.gz
		tar -xvzf geog_thompson28_chem.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_noahmp.tar.gz
		tar -xvzf geog_noahmp.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/irrigation.tar.gz
		tar -xvzf irrigation.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG
		mkdir $WRFCHEM_FOLDER/GEOG/WPS_GEOG/irrigation
		mv $WRFCHEM_FOLDER/GEOG/WPS_GEOG/fao $WRFCHEM_FOLDER/GEOG/WPS_GEOG/irrigation

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_px.tar.gz
		tar -xvzf geog_px.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_urban.tar.gz
		tar -xvzf geog_urban.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_ssib.tar.gz
		tar -xvzf geog_ssib.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/lake_depth.tar.bz2
		tar -xvf lake_depth.tar.bz2 -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/topobath_30s.tar.bz2
		tar -xvf topobath_30s.tar.bz2 -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/gsl_gwd.tar.bz2
		tar -xvf gsl_gwd.tar.bz2 -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG
	fi

	if [ ${Optional_GEOG} -eq 1 ]; then
		echo " "
		echo "Optional WPS Geographical Input Data"
		echo " "

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_older_than_2000.tar.gz
		tar -xvzf geog_older_than_2000.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s_with_lakes.tar.gz
		tar -xvzf modis_landuse_20class_15s_with_lakes.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_alt_lsm.tar.gz
		tar -xvzf geog_alt_lsm.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/nlcd2006_ll_9s.tar.bz2
		tar -xvf nlcd2006_ll_9s.tar.bz2 -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/updated_Iceland_LU.tar.gz
		tar -xvf updated_Iceland_LU.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s.tar.bz2
		tar -xvf modis_landuse_20class_15s.tar.bz2 -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG
	fi
fi

if [ "$Centos_64bit_GNU" = "2" ] && [ "$WRFCHEM_PICK" = "1" ]; then

	#############################basic package managment############################
	echo "old version of GNU detected"
	echo $PASSWD | sudo -S yum install centos-release-scl -y
	echo $PASSWD | sudo -S yum clean all
	echo $PASSWD | sudo -S yum remove devtoolset-11*
	echo $PASSWD | sudo -S yum install devtoolset-11
	echo $PASSWD | sudo -S yum install devtoolset-11-\* -y
	source /opt/rh/devtoolset-11/enable
	gcc --version
	echo $PASSWD | sudo -S yum install epel-release -y
	echo $PASSWD | sudo -S yum install dnf -y
	echo $PASSWD | sudo -S dnf install epel-release -y
	echo $PASSWD | sudo -S dnf install dnf -y
	echo $PASSWD | sudo -S dnf -y update
	echo $PASSWD | sudo -S dnf -y upgrade
	echo $PASSWD | sudo -S dnf -y install autoconf automake bzip2 bzip2-devel byacc cairo-devel cmake cpp curl curl-devel flex  fontconfig-devel fontconfig-devel.x86_64 gcc gcc-c++ gcc-gfortran git java-11-openjdk java-11-openjdk-devel ksh libX11-devel libX11-devel.x86_64 libXaw libXaw-devel libXext-devel libXext-devel.x86_64 libXmu-devel libXrender-devel libXrender-devel.x86_64 libstdc++ libstdc++-devel  libxml2 libxml2-devel m4  .x86_64 nfs-utils perl pkgconfig  pixman-devel python3 python3-devel tcsh time unzip wget
	echo $PASSWD | sudo -S dnf -y groupinstall "Development Tools"
	echo $PASSWD | sudo -S dnf -y update
	echo $PASSWD | sudo -S dnf -y upgrade

	echo " "

	##############################Directory Listing############################
	export HOME=$(
		cd
		pwd
	)

	mkdir $HOME/WRFCHEM
	export WRFCHEM_FOLDER=$HOME/WRFCHEM
	cd $WRFCHEM_FOLDER/
	mkdir Downloads
	mkdir WRFPLUS
	mkdir WRFDA
	mkdir Libs
	export DIR=$WRFCHEM_FOLDER/Libs
	mkdir Libs/grib2
	mkdir Libs/NETCDF
	mkdir Libs/MPICH
	mkdir -p Tests/Environment
	mkdir -p Tests/Compatibility

	echo " "
	#############################Core Management####################################

	export CPU_CORE=$(nproc) # number of available threads on system
	export CPU_6CORE="6"
	export CPU_HALF=$(($CPU_CORE / 2))                    #half of availble cores on system
	export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2))) #Forces CPU cores to even number to avoid partial core export. ie 7 cores would be 3.5 cores.

	if [ $CPU_CORE -le $CPU_6CORE ]; then #If statement for low core systems.  Forces computers to only use 1 core if there are 4 cores or less on the system.
		export CPU_HALF_EVEN="2"
	else
		export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))
	fi

	echo "##########################################"
	echo "Number of Threads being used $CPU_HALF_EVEN"
	echo "##########################################"

	echo " "
	##############################Downloading Libraries############################
	#Force use of ipv4 with -4
	cd Downloads
	wget -c https://github.com/madler/zlib/archive/refs/tags/v$Zlib_Version.tar.gz
	wget -c https://github.com/HDFGroup/hdf5/archive/refs/tags/hdf5-$HDF5_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-c/archive/refs/tags/v$Netcdf_C_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-fortran/archive/refs/tags/v$Netcdf_Fortran_Version.tar.gz
	wget -c https://github.com/pmodels/mpich/releases/download/v$Mpich_Version/mpich-$Mpich_Version.tar.gz
	wget -c https://download.sourceforge.net/libpng/libpng-$Libpng_Version.tar.gz
	wget -c https://www.ece.uvic.ca/~frodo/jasper/software/jasper-$Jasper_Version.zip
	wget -c https://parallel-netcdf.github.io/Release/pnetcdf-$Pnetcdf_Version.tar.gz
	wget -c https://sourceforge.net/projects/opengrads/files/grads2/2.2.1.oga.1/Linux%20%2864%20Bits%29/opengrads-2.2.1.oga.1-bundle-x86_64-pc-linux-gnu-glibc_2.17.tar.gz

	echo " "
	####################################Compilers#####################################
	export CC=gcc
	export CXX=g++
	export FC=gfortran
	export F77=gfortran
	export CFLAGS="-fPIC -fPIE -O3"

	#IF statement for GNU compiler issue
	export GCC_VERSION=$(gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		export fallow_argument=-fallow-argument-mismatch
		export boz_argument=-fallow-invalid-boz
	else
		export fallow_argument=
		export boz_argument=
	fi

	export FFLAGS="$fallow_argument -m64"
	export FCFLAGS="$fallow_argument -m64"

	echo "##########################################"
	echo "FFLAGS = $FFLAGS"
	echo "FCFLAGS = $FCFLAGS"
	echo "CFLAGS = $CFLAGS"
	echo "##########################################"

	echo " "
	#############################zlib############################
	#Uncalling compilers due to comfigure issue with zlib$Zlib_Version
	#With CC & CXX definied ./configure uses different compiler Flags

	cd $WRFCHEM_FOLDER/Downloads
	tar -xvzf v$Zlib_Version.tar.gz
	cd zlib-$Zlib_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log
	./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "
	##############################MPICH############################
	#F90= due to compiler issues with mpich install
	cd $WRFCHEM_FOLDER/Downloads
	tar -xvzf mpich-$Mpich_Version.tar.gz
	cd mpich-$Mpich_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	F90= ./configure --prefix=$DIR/MPICH --with-device=ch3 FFLAGS=$fallow_argument FCFLAGS=$fallow_argument 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	# make check

	export PATH=$DIR/MPICH/bin:$PATH
	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx

	echo " "
	#############################libpng############################
	cd $WRFCHEM_FOLDER/Downloads
	export LDFLAGS=-L$DIR/grib2/lib
	export CPPFLAGS=-I$DIR/grib2/include
	tar -xvzf libpng-$Libpng_Version.tar.gz
	cd libpng-$Libpng_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check
	echo " "
	#############################JasPer############################
	cd $WRFCHEM_FOLDER/Downloads
	unzip jasper-$Jasper_Version.zip
	cd jasper-$Jasper_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	./configure --prefix=$DIR/grib2
	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export JASPERLIB=$DIR/grib2/lib
	export JASPERINC=$DIR/grib2/include

	echo " "
	#############################hdf5 library for netcdf4 functionality############################
	cd $WRFCHEM_FOLDER/Downloads
	tar -xvzf hdf5-$HDF5_Version.tar.gz
	cd hdf5-hdf5-$HDF5_Version
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 --with-zlib=$DIR/grib2 --enable-hl --enable-fortran --enable-parallel 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export HDF5=$DIR/grib2
	export PHDF5=$DIR/grib2
	export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH

	echo " "
	#############################Install Parallel-netCDF##############################
	#Make file created with half of available cpu cores
	#Hard path for MPI added
	##################################################################################
	cd $WRFCHEM_FOLDER/Downloads
	tar -xvzf pnetcdf-$Pnetcdf_Version.tar.gz
	cd pnetcdf-$Pnetcdf_Version
	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx
	autoreconf -i -f 2>&1 | tee autoreconf.log
	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 --enable-shared --enable-static 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PNETCDF=$DIR/grib2

	echo " "

	##############################Install NETCDF C Library############################
	cd $WRFCHEM_FOLDER/Downloads
	tar -xzvf v$Netcdf_C_Version.tar.gz
	cd netcdf-c-$Netcdf_C_Version/
	export CPPFLAGS=-I$DIR/grib2/include
	export LDFLAGS=-L$DIR/grib2/lib
	export LIBS="-lhdf5_hl -lhdf5 -lz -lcurl -lgfortran -lgcc -lm -ldl -lpnetcdf"
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --disable-dap --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-pnetcdf --enable-cdf5 --enable-parallel-tests 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PATH=$DIR/NETCDF/bin:$PATH
	export NETCDF=$DIR/NETCDF
	echo " "
	##############################NetCDF fortran library############################
	cd $WRFCHEM_FOLDER/Downloads
	tar -xvzf v$Netcdf_Fortran_Version.tar.gz
	cd netcdf-fortran-$Netcdf_Fortran_Version/

	export LD_LIBRARY_PATH=$DIR/NETCDF/lib:$LD_LIBRARY_PATH
	export CPPFLAGS="-I$DIR/NETCDF/include -I$DIR/grib2/include"
	export LDFLAGS="-L$DIR/NETCDF/lib -L$DIR/grib2/lib"
	export LIBS="-lnetcdf -lpnetcdf -lcurl -lhdf5_hl -lhdf5 -lz -lm -ldl -lgcc -lgfortran"
	autoreconf -i -f 2>&1 | tee autoreconf.log
	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-parallel-tests --enable-hdf5 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "
	#################################### System Environment Tests ##############

	cd $WRFCHEM_FOLDER/Downloads
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_NETCDF_MPI_tests.tar
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_tests.tar

	tar -xvf Fortran_C_tests.tar -C $WRFCHEM_FOLDER/Tests/Environment
	tar -xvf Fortran_C_NETCDF_MPI_tests.tar -C $WRFCHEM_FOLDER/Tests/Compatibility

	export one="1"
	echo " "
	############## Testing Environment #####

	cd $WRFCHEM_FOLDER/Tests/Environment

	cp ${NETCDF}/include/netcdf.inc .

	echo " "
	echo " "
	echo "Environment Testing "
	echo "Test 1"
	$FC TEST_1_fortran_only_fixed.f
	./a.out | tee env_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 1 Passed"
	else
		echo "Environment Compiler Test 1 Failed"
		exit
	fi
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 2"
	$FC TEST_2_fortran_only_free.f90
	./a.out | tee env_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 2 Passed"
	else
		echo "Environment Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 3"
	$CC TEST_3_c_only.c
	./a.out | tee env_test3.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test3.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 3 Passed"
	else
		echo "Environment Compiler Test 3 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 4"
	$CC -c -m64 TEST_4_fortran+c_c.c
	$FC -c -m64 TEST_4_fortran+c_f.f90
	$FC -m64 TEST_4_fortran+c_f.o TEST_4_fortran+c_c.o
	./a.out | tee env_test4.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test4.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 4 Passed"
	else
		echo "Environment Compiler Test 4 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	############## Testing Environment #####

	cd $WRFCHEM_FOLDER/Tests/Compatibility

	cp ${NETCDF}/include/netcdf.inc .

	echo " "
	echo " "
	echo "Library Compatibility Tests "
	echo "Test 1"
	$FC -c 01_fortran+c+netcdf_f.f
	$CC -c 01_fortran+c+netcdf_c.c
	$FC 01_fortran+c+netcdf_f.o 01_fortran+c+netcdf_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	./a.out | tee comp_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 1 Passed"
	else
		echo "Compatibility Compiler Test 1 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "

	echo "Test 2"
	$MPIFC -c 02_fortran+c+netcdf+mpi_f.f
	$MPICC -c 02_fortran+c+netcdf+mpi_c.c
	$MPIFC 02_fortran+c+netcdf+mpi_f.o \
		02_fortran+c+netcdf+mpi_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	$DIR/MPICH/bin/mpirun ./a.out | tee comp_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 2 Passed"
	else
		echo "Compatibility Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."
	echo " "

	echo " All tests completed and passed"
	echo " "

	###############################NCEPlibs#####################################
	#The libraries are built and installed with
	# ./make_ncep_libs.sh -s MACHINE -c COMPILER -d NCEPLIBS_DIR -o OPENMP [-m mpi] [-a APPLICATION]
	#It is recommended to install the NCEPlibs into their own directory, which must be created before running the installer. Further information on the command line arguments can be obtained with
	# ./make_ncep_libs.sh -h

	#If iand error occurs go to https://github.com/NCAR/NCEPlibs/pull/16/files make adjustment and re-run ./make_ncep_libs.sh
	############################################################################

	cd $WRFCHEM_FOLDER/Downloads
	git clone https://github.com/NCAR/NCEPlibs.git
	cd NCEPlibs
	mkdir $DIR/nceplibs

	export JASPER_INC=$DIR/grib2/include
	export PNG_INC=$DIR/grib2/include
	export NETCDF=$DIR/NETCDF

	#for loop to edit linux.gnu for nceplibs to install
	#make if statement for gcc-9 or older
	export GCC_VERSION=$(gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		y="24 28 32 36 40 45 49 53 56 60 64 68 69 73 74 79"
		for X in $y; do
			sed -i "${X}s/= /= $fallow_argument $boz_argument /g" $WRFCHEM_FOLDER/Downloads/NCEPlibs/macros.make.linux.gnu
		done
	else
		echo ""
		echo "Loop not needed"
	fi

	if [ ${auto_config} -eq 1 ]; then
		echo yes | ./make_ncep_libs.sh -s linux -c gnu -d $DIR/nceplibs -o 0 -m 1 -a upp | tee make.install.log
	else
		./make_ncep_libs.sh -s linux -c gnu -d $DIR/nceplibs -o 0 -m 1 -a upp | tee make.install.log
	fi

	export PATH=$DIR/nceplibs:$PATH

	echo " "
	################################UPPv4.1######################################
	#Previous verison of UPP
	#WRF Support page recommends UPPV4.1 due to too many changes to WRF and UPP code
	#since the WRF was written
	#Option 8 gfortran compiler with distributed memory
	#############################################################################
	cd $WRFCHEM_FOLDER/
	git clone -b dtc_post_v4.1.0 --recurse-submodules https://github.com/NOAA-EMC/EMC_post UPPV4.1
	cd UPPV4.1
	mkdir postprd
	export NCEPLIBS_DIR=$DIR/nceplibs
	export NETCDF=$DIR/NETCDF

	if [ ${auto_config} -eq 1 ]; then
		echo 8 | ./configure #Option 8 gfortran compiler with distributed memory
	else
		./configure #Option 8 gfortran compiler with distributed memory
	fi

	#make if statement for gcc-9 or older
	export GCC_VERSION=$(gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		z="58 63"
		for X in $z; do
			sed -i "${X}s/(FOPT)/(FOPT) $fallow_argument $boz_argument  /g" $WRFCHEM_FOLDER/UPPV4.1/configure.upp
		done
	else
		echo ""
		echo "Loop not needed"
	fi

	./compile
	cd $WRFCHEM_FOLDER/UPPV4.1/scripts
	echo $PASSWD | sudo -S cpan install XML::LibXML
	chmod +x run_unipost

	# IF statement to check that all files were created.
	cd $WRFCHEM_FOLDER/UPPV4.1/exec
	n=$(ls ./*.exe | wc -l)
	if (($n == 1)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing UPPV4.1. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files. Exiting the script."
		read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
		exit
	fi

	echo " "

	######################## ARWpost V3.1  ############################
	## ARWpost
	##Configure #3
	###################################################################
	cd $WRFCHEM_FOLDER/Downloads
	wget -c http://www2.mmm.ucar.edu/wrf/src/ARWpost_V3.tar.gz
	tar -xvzf ARWpost_V3.tar.gz -C $WRFCHEM_FOLDER/
	cd $WRFCHEM_FOLDER/ARWpost
	./clean -a
	sed -i -e 's/-lnetcdf/-lnetcdff -lnetcdf/g' $WRFCHEM_FOLDER/ARWpost/src/Makefile
	export NETCDF=$DIR/NETCDF

	if [ ${auto_config} -eq 1 ]; then
		echo 3 | ./configure #Option 3 gfortran compiler with distributed memory
	else
		./configure #Option 3 gfortran compiler with distributed memory
	fi

	export GCC_VERSION=$(gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		sed -i '32s/-ffree-form -O -fno-second-underscore -fconvert=big-endian -frecord-marker=4/-ffree-form -O -fno-second-underscore -fconvert=big-endian -frecord-marker=4 ${fallow_argument} /g' configure.arwp
	fi

	sed -i -e 's/-C -P -traditional/-P -traditional/g' $WRFCHEM_FOLDER/ARWpost/configure.arwp
	./compile

	export PATH=$WRFCHEM_FOLDER/ARWpost/ARWpost.exe:$PATH

	echo " "

	################################## GrADS ###############################
	# Version  2.2.1
	# Sublibs library instructions: http://cola.gmu.edu/grads/gadoc/supplibs2.html
	# GrADS instructions: http://cola.gmu.edu/grads/downloads.php
	########################################################################
	if [[ $GRADS_PICK -eq 2 ]]; then
		cd $WRFCHEM_FOLDER/Downloads
		wget -c ftp://cola.gmu.edu/grads/2.2/grads-2.2.1-bin-centos7.4-x86_64.tar.gz
		tar -xzvf grads-2.2.1-bin-centos7.4-x86_64.tar.gz -C $WRFCHEM_FOLDER
		cd $WRFCHEM_FOLDER/grads-2.2.1/bin
		chmod 775 *

	fi

	##################### NCAR COMMAND LANGUAGE           ##################
	########### NCL compiled via Conda                    ##################
	########### This is the preferred method by NCAR      ##################
	########### https://www.ncl.ucar.edu/index.shtml      ##################
	echo " "
	#Installing Miniconda3 to WRF directory and updating libraries
	pip install --upgrade --force-reinstall zstandard
	pip install --upgrade --force-reinstall zstd
	pip3 install --upgrade --force-reinstall zstandard
	pip3 install --upgrade --force-reinstall zstd
	export Miniconda_Install_DIR=$WRFCHEM_FOLDER/miniconda3

	mkdir -p $Miniconda_Install_DIR

	wget -c https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $Miniconda_Install_DIR/miniconda.sh
	bash $Miniconda_Install_DIR/miniconda.sh -b -u -p $Miniconda_Install_DIR

	rm -rf $Miniconda_Install_DIR/miniconda.sh

	export PATH=$WRFHYDRO_FOLDER/miniconda3/bin:$PATH

	source $Miniconda_Install_DIR/etc/profile.d/conda.sh

	$Miniconda_Install_DIR/bin/conda init bash
	$Miniconda_Install_DIR/bin/conda init zsh
	$Miniconda_Install_DIR/bin/conda init tcsh
	$Miniconda_Install_DIR/bin/conda init xonsh
	$Miniconda_Install_DIR/bin/conda init powershell

	conda config --add channels conda-forge
	conda config --set auto_activate_base false
	conda update -n root --all -y

	echo " "

	echo " "
	#Installing NCL via Conda
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda init bash
	conda activate base
	conda create -n ncl_stable -c conda-forge ncl -y
	conda activate ncl_stable

	conda deactivate
	conda deactivate
	conda deactivate

	echo " "

	############################OBSGRID###############################
	## OBSGRID
	## Downloaded from git tagged releases
	## Option #2
	########################################################################
	cd $WRFCHEM_FOLDER/
	git clone https://github.com/wrf-model/OBSGRID.git
	cd $WRFCHEM_FOLDER/OBSGRID

	./clean -a
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda init bash
	conda activate ncl_stable

	export HOME=$(
		cd
		pwd
	)
	export DIR=$WRFCHEM_FOLDER/Libs
	export NETCDF=$DIR/NETCDF

	if [ ${auto_config} -eq 1 ]; then
		echo 2 | ./configure 2>&1 | tee configure.log #Option 2 for gfortran/gcc and distribunted memory
	else
		./configure 2>&1 | tee configure.log #Option 2 for gfortran/gcc and distribunted memory
	fi

	sed -i '27s/-lnetcdf -lnetcdff/ -lnetcdff -lnetcdf/g' configure.oa

	sed -i '31s/-lncarg -lncarg_gks -lncarg_c -lX11 -lm -lcairo/-lncarg -lncarg_gks -lncarg_c -lX11 -lm -lcairo -lfontconfig -lpixman-1 -lfreetype -lhdf5 -lhdf5_hl /g' configure.oa

	sed -i '39s/-frecord-marker=4/-frecord-marker=4 ${fallow_argument} /g' configure.oa

	sed -i '44s/=	/=	${fallow_argument} /g' configure.oa

	sed -i '45s/-C -P -traditional/-P -traditional/g' configure.oa

	echo " "
	./compile 2>&1 | tee compile.obsgrid.log

	conda deactivate
	conda deactivate
	conda deactivate

	echo " "
	# IF statement to check that all files were created.
	cd $WRFCHEM_FOLDER/OBSGRID
	n=$(ls ./*.exe | wc -l)
	if (($n == 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing OBSGRID. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files. Exiting the script."
		read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
		exit
	fi

	echo " "
	############################## RIP4 #####################################
	mkdir $WRFCHEM_FOLDER/RIP4
	cd $WRFCHEM_FOLDER/Downloads
	wget -c https://www2.mmm.ucar.edu/wrf/src/RIP_47.tar.gz
	tar -xvzf RIP_47.tar.gz -C $WRFCHEM_FOLDER/RIP4
	cd $WRFCHEM_FOLDER/RIP4/RIP_47
	mv * ..
	cd $WRFCHEM_FOLDER/RIP4
	rm -rd RIP_47
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda activate ncl_stable
	conda install -c conda-forge c-compiler fortran-compiler cxx-compiler -y

	export RIP_ROOT=$WRFCHEM_FOLDER/RIP4
	export NETCDF=$DIR/NETCDF
	export NCARG_ROOT=$WRFCHEM_FOLDER/anaconda3/envs/ncl_stable

	sed -i '349s|-L${NETCDF}/lib -lnetcdf $NETCDFF|-L${NETCDF}/lib $NETCDFF -lnetcdff -lnetcdf -lnetcdf -lnetcdff_C -lhdf5 |g' $WRFCHEM_FOLDER/RIP4/configure

	sed -i '27s|NETCDFLIB	= -L${NETCDF}/lib -lnetcdf CONFIGURE_NETCDFF_LIB|NETCDFLIB	= -L</usr/lib/x86_64-linux-gnu/libm.a> -lm -L${NETCDF}/lib CONFIGURE_NETCDFF_LIB -lnetcdf -lhdf5 -lhdf5_hl -lgfortran -lgcc -lz |g' $WRFCHEM_FOLDER/RIP4/arch/preamble

	sed -i '31s|-L${NCARG_ROOT}/lib -lncarg -lncarg_gks -lncarg_c -lX11 -lXext -lpng -lz CONFIGURE_NCARG_LIB| -L${NCARG_ROOT}/lib -lncarg -lncarg_gks -lncarg_c -lX11 -lXext -lpng -lz -lcairo -lfontconfig -lpixman-1 -lfreetype -lexpat -lpthread -lbz2 -lXrender -lgfortran -lgcc -L</usr/lib/x86_64-linux-gnu/> -lm -lhdf5 -lhdf5_hl |g' $WRFCHEM_FOLDER/RIP4/arch/preamble

	sed -i '33s| -O|-fallow-argument-mismatch -O |g' $WRFCHEM_FOLDER/RIP4/arch/configure.defaults

	sed -i '35s|=|= -L$WRFCHEM_FOLDER/LIBS/grib2/lib -lhdf5 -lhdf5_hl |g' $WRFCHEM_FOLDER/RIP4/arch/configure.defaults

	if [ ${auto_config} -eq 1 ]; then
		echo 3 | ./configure #Option 3 gfortran compiler with distributed memory
	else
		./configure #Option 3 gfortran compiler with distributed memory
	fi

	./compile

	conda deactivate
	conda deactivate
	conda deactivate

	echo " "
	##################### WRF Python           ##################
	########### WRf-Python compiled via Conda  ##################
	########### This is the preferred method by NCAR      ##################
	##### https://wrf-python.readthedocs.io/en/latest/installation.html  ##################
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
conda env create -f $HOME/WRF-MOSIT/wrf-python-stable.yml


	################################## QGIS #####################################
	#QGIS (Quantum Geographic Information System) is a free and open-source platform that allows users to
	#analyze, view, and edit geospatial data. It supports both vector and raster layers, as well as various #web services, and is extensible through community-developed plugins. Key features include map
	#creation, spatial analysis, and data management.
	#############################################################################

	conda env create -f $HOME/WRF-MOSIT/qgis.3.28.8.yml

	echo " "



	############################WRFDA 3DVAR###############################
	## WRFDA v${WPS_VERSION} 3DVAR
	## Downloaded from git tagged releases
	## Does not include RTTOV Libarary for radiation data.  If wanted will need to install library then reconfigure
	##Note: if you intend to run both 3DVAR and 4DVAR experiments, it is not necessary to compile the code twice.
	#Option 34 for gfortran/gcc and distribunted memory
	########################################################################
	cd $WRFCHEM_FOLDER/Downloads
	cd $WRFCHEM_FOLDER/Downloads
	wget -c https://github.com/wrf-model/WRF/releases/download/v${WRF_VERSION}/v${WRF_VERSION}.tar.gz -O WRF-${WRF_VERSION}.tar.gz
	mkdir $WRFCHEM_FOLDER/WRFDA
	tar -xvzf WRF-${WRF_VERSION}.tar.gz -C $WRFCHEM_FOLDER/WRFDA
	# If statment for changing folder name
	if [ -d "$WRFCHEM_FOLDER/WRFDA/WRF" ]; then
		mv -f $WRFCHEM_FOLDER/WRFDA/WRF $WRFCHEM_FOLDER/WRFDA/WRFV${WRF_VERSION}
	fi
	cd $WRFCHEM_FOLDER/WRFDA/WRFV${WRF_VERSION}
	mv * $WRFCHEM_FOLDER/WRFDA
	cd $WRFCHEM_FOLDER/WRFDA
	rm -rf WRFV${WRF_VERSION}/
	cd $WRFCHEM_FOLDER/WRFDA

	ulimit -s unlimited
	export WRF_CHEM=1
	export WRFIO_NCD_LARGE_FILE_SUPPORT=1

	./clean -a

	# SED statements to fix configure error
	sed -i '186s/==/=/g' $WRFCHEM_FOLDER/WRFDA/configure
	sed -i '318s/==/=/g' $WRFCHEM_FOLDER/WRFDA/configure
	sed -i '919s/==/=/g' $WRFCHEM_FOLDER/WRFDA/configure

	if [ ${auto_config} -eq 1 ]; then
		echo 34 | ./configure wrfda 2>&1 | tee configure.log #Option 34 for gfortran/gcc and distribunted memory
	else
		./configure wrfda 2>&1 | tee configure.log #Option 18 for gfortran/gcc and distribunted memory
	fi
	echo " "
	./compile -j $CPU_HALF_EVEN all_wrfvar 2>&1 | tee compile.chem.wrfvar.log
	echo " "

	# IF statement to check that all files were created.
	cd $WRFCHEM_FOLDER/WRFDA/var/da
	n=$(ls ./*.exe | wc -l)
	cd $WRFCHEM_FOLDER/WRFDA/var/obsproc/src
	m=$(ls ./*.exe | wc -l)
	if ((($n == 43) && ($m == 1))); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WRFDA. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		cd $WRFCHEM_FOLDER/WRFDA
		./compile -j $CPU_HALF_EVEN all_wrfvar 2>&1 | tee compile.chem.wrfvar2.log
		cd $WRFCHEM_FOLDER/WRFDA/var/da
		n=$(ls ./*.exe | wc -l)
		cd $WRFCHEM_FOLDER/WRFDA/var/obsproc/src
		m=$(ls ./*.exe | wc -l)
		if ((($n == 43) && ($m == 1))); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WRFDA. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi
	echo " "

	############################ WRFCHEM ${WPS_VERSION} #################################
	## WRF CHEM v${WPS_VERSION}
	## Downloaded from git tagged releases
	# option 34, option 1 for gfortran and distributed memory w/basic nesting
	# If the script comes back asking to locate a file (libfl.a)
	# Use locate command to find file. in a new terminal and then copy that location
	#locate *name of file*
	#Optimization set to 0 due to buffer overflow dump
	#sed -i -e 's/="-O"/="-O0/' configure_kpp
	# io_form_boundary
	# io_form_history
	# io_form_auxinput2
	# io_form_auxhist2
	# Note that you need set nocolons = .true. in the section &time_control of namelist.input
	########################################################################
	#Setting up WRF-CHEM/KPP
	cd $WRFCHEM_FOLDER/Downloads

	ulimit -s unlimited
	export WRF_EM_CORE=1
	export WRF_NMM_CORE=0
	export WRF_CHEM=1
	export WRF_KPP=1
	export YACC='/usr/bin/yacc -d'
	export FLEX=/usr/bin/flex
	export FLEX_LIB_DIR=/usr/lib64
	export KPP_HOME=$WRFCHEM_FOLDER/WRFV${WRF_VERSION}/chem/KPP/kpp/kpp-2.1
	export WRF_SRC_ROOT_DIR=$WRFCHEM_FOLDER/WRFV${WRF_VERSION}
	export PATH=$KPP_HOME/bin:$PATH
	export SED=/usr/bin/sed
	export WRFIO_NCD_LARGE_FILE_SUPPORT=1

	#Downloading WRF code

	cd $WRFCHEM_FOLDER/Downloads
	wget -c https://github.com/wrf-model/WRF/releases/download/v${WRF_VERSION}/v${WRF_VERSION}.tar.gz -O WRF-${WRF_VERSION}.tar.gz
	tar -xvzf WRF-${WRF_VERSION}.tar.gz -C $WRFCHEM_FOLDER/
	# If statment for changing folder name
	if [ -d "$WRFCHEM_FOLDER/WRF" ]; then
		mv -f $WRFCHEM_FOLDER/WRF $WRFCHEM_FOLDER/WRFV${WRF_VERSION}
	fi
	cd $WRFCHEM_FOLDER/WRFV${WRF_VERSION}

	cd chem/KPP
	sed -i -e 's/="-O"/="-O0"/' configure_kpp
	cd -

	./clean -a

	if [ ${auto_config} -eq 1 ]; then
		sed -i '443s/.*/  $response = "34 \\n";/g' $WRFCHEM_FOLDER/WRFV${WRF_VERSION}/arch/Config.pl # Answer for compiler choice
		sed -i '909s/.*/  $response = "1 \\n";/g' $WRFCHEM_FOLDER/WRFV${WRF_VERSION}/arch/Config.pl  #Answer for basic nesting
		./configure 2>&1 | tee configure.log
	else
		./configure 2>&1 | tee configure.log #Option 34 gfortran compiler with distributed memory option 1 for basic nesting
	fi

	./compile -j $CPU_HALF_EVEN em_real 2>&1 | tee compile.wrf1.log
	./compile -j $CPU_HALF_EVEN emi_conv 2>&1 | tee compile.emis.log

	export WRF_DIR=$WRFCHEM_FOLDER/WRFV${WRF_VERSION}

	# IF statement to check that all files were created.
	cd $WRFCHEM_FOLDER/WRFV${WRF_VERSION}/main
	n=$(ls ./*.exe | wc -l)
	if (($n >= 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		cd $WRFCHEM_FOLDER/WRFV${WRF_VERSION}
		./compile -j $CPU_HALF_EVEN em_real 2>&1 | tee compile.wrf2.log
		cd $WRFCHEM_FOLDER/WRFV${WRF_VERSION}/main
		n=$(ls ./*.exe | wc -l)
		if (($n >= 3)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "
	############################WPSV${WPS_VERSION}#####################################
	## WPS v${WPS_VERSION}
	## Downloaded from git tagged releases
	#Option 3 for gfortran and distributed memory
	########################################################################

	cd $WRFCHEM_FOLDER/Downloads
	wget -c https://github.com/wrf-model/WPS/archive/refs/tags/v${WPS_VERSION}.tar.gz -O WPS-${WPS_VERSION}.tar.gz
	tar -xvzf WPS-${WPS_VERSION}.tar.gz -C $WRFCHEM_FOLDER/
	cd $WRFCHEM_FOLDER/WPS-${WPS_VERSION}

	./clean -a

	if [ ${auto_config} -eq 1 ]; then
		echo 3 | ./configure 2>&1 | tee configure.log #Option 3 for gfortran and distributed memory
	else
		./configure 2>&1 | tee configure.log #Option 3 gfortran compiler with distributed memory
	fi
	./compile

	echo " "

	# IF statement to check that all files were created.
	cd $WRFCHEM_FOLDER/WPS-${WPS_VERSION}
	n=$(ls ./*.exe | wc -l)
	if (($n == 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		./compile 2>&1 | tee compile.wps2.log
		cd $WRFCHEM_FOLDER/WPS-${WPS_VERSION}
		n=$(ls ./*.exe | wc -l)
		if (($n == 3)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "

	######################## WPS Domain Setup Tools ########################
	## DomainWizard
	cd $WRFCHEM_FOLDER/Downloads
	wget -c http://esrl.noaa.gov/gsd/wrfportal/domainwizard/WRFDomainWizard.zip
	mkdir $WRFCHEM_FOLDER/WRFDomainWizard
	unzip WRFDomainWizard.zip -d $WRFCHEM_FOLDER/WRFDomainWizard
	chmod +x $WRFCHEM_FOLDER/WRFDomainWizard/run_DomainWizard

	echo " "
	######################## WPF Portal Setup Tools ########################
	## WRFPortal
	cd $WRFCHEM_FOLDER/Downloads
	wget -c https://esrl.noaa.gov/gsd/wrfportal/portal/wrf-portal.zip
	mkdir $WRFCHEM_FOLDER/WRFPortal
	unzip wrf-portal.zip -d $WRFCHEM_FOLDER/WRFPortal
	chmod +x $WRFCHEM_FOLDER/WRFPortal/runWRFPortal

	echo " "

	######################## Static Geography Data inc/ Optional ####################
	# http://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	# These files are large so if you only need certain ones comment the others off
	# All files downloaded and untarred is 200GB
	# https://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	#################################################################################
	cd $WRFCHEM_FOLDER/Downloads
	mkdir $WRFCHEM_FOLDER/GEOG
	mkdir $WRFCHEM_FOLDER/GEOG/WPS_GEOG

	echo " "
	echo "Mandatory WRF Preprocessing System (WPS) Geographical Input Data Mandatory Fields Downloads"
	echo " "
	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_high_res_mandatory.tar.gz
	tar -xvzf geog_high_res_mandatory.tar.gz -C $WRFCHEM_FOLDER/GEOG/

	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_low_res_mandatory.tar.gz
	tar -xvzf geog_low_res_mandatory.tar.gz -C $WRFCHEM_FOLDER/GEOG/
	mv $WRFCHEM_FOLDER/GEOG/WPS_GEOG_LOW_RES/ $WRFCHEM_FOLDER/GEOG/WPS_GEOG

	if [ ${WPS_Specific_Applications} -eq 1 ]; then
		echo " "
		echo " WPS Geographical Input Data Mandatory for Specific Applications"
		echo " "

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_thompson28_chem.tar.gz
		tar -xvzf geog_thompson28_chem.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_noahmp.tar.gz
		tar -xvzf geog_noahmp.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/irrigation.tar.gz
		tar -xvzf irrigation.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG
		mkdir $WRFCHEM_FOLDER/GEOG/WPS_GEOG/irrigation
		mv $WRFCHEM_FOLDER/GEOG/WPS_GEOG/fao $WRFCHEM_FOLDER/GEOG/WPS_GEOG/irrigation

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_px.tar.gz
		tar -xvzf geog_px.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_urban.tar.gz
		tar -xvzf geog_urban.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_ssib.tar.gz
		tar -xvzf geog_ssib.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/lake_depth.tar.bz2
		tar -xvf lake_depth.tar.bz2 -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/topobath_30s.tar.bz2
		tar -xvf topobath_30s.tar.bz2 -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/gsl_gwd.tar.bz2
		tar -xvf gsl_gwd.tar.bz2 -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG
	fi

	if [ ${Optional_GEOG} -eq 1 ]; then
		echo " "
		echo "Optional WPS Geographical Input Data"
		echo " "

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_older_than_2000.tar.gz
		tar -xvzf geog_older_than_2000.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s_with_lakes.tar.gz
		tar -xvzf modis_landuse_20class_15s_with_lakes.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_alt_lsm.tar.gz
		tar -xvzf geog_alt_lsm.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/nlcd2006_ll_9s.tar.bz2
		tar -xvf nlcd2006_ll_9s.tar.bz2 -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/updated_Iceland_LU.tar.gz
		tar -xvf updated_Iceland_LU.tar.gz -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s.tar.bz2
		tar -xvf modis_landuse_20class_15s.tar.bz2 -C $WRFCHEM_FOLDER/GEOG/WPS_GEOG
	fi
fi

########################### WRF  ##########################
## WRF installation with parallel process.
# Download and install required library and data files for WRF, WRFPLUS, WRFDA 4DVAR, WPS.
# Tested in Ubuntu 20.0${WPS_VERSION} LTS & Ubuntu 22.04, Rocky Linux 9 & MacOS Ventura 64bit
# Built in 64-bit system
# Built with Intel or GNU compilers
# Tested with current available libraries on 10/10/2023
# If newer libraries exist edit script paths for changes
#Estimated Run Time ~ 90 - 150 Minutes with 10mb/s downloadspeed.
# Special thanks to:
# Youtube's meteoadriatic, GitHub user jamal919.
# University of Manchester's  Doug L
# University of Tunis El Manar's Hosni
# GSL's Jordan S.
# NCAR's Mary B., Christine W., & Carl D.
# DTC's Julie P., Tara J., George M., & John H.
# UCAR's Katelyn F., Jim B., Jordan P., Kevin M.,
##############################################################

if [ "$Ubuntu_64bit_GNU" = "1" ] && [ "$WRF_PICK" = "1" ]; then

	#############################basic package managment############################
	echo $PASSWD | sudo -S apt -y update
	echo $PASSWD | sudo -S apt -y upgrade && sudo -S apt -y autoremove
	echo $PASSWD | sudo -S apt -y install autoconf automake bison build-essential byacc cmake csh curl default-jdk default-jre emacs flex g++ gawk gcc gfortran git ksh libcurl4-openssl-dev libjpeg-dev libncurses6 libpixman-1-dev libpng-dev libtool libxml2 libxml2-dev m4 make  ncview okular openbox pipenv pkg-config  python3 python3-dev python3-pip python3-dateutil tcsh unzip xauth xorg time

	echo " "
	##############################Directory Listing############################
	export HOME=$(
		cd
		pwd
	)

	mkdir $HOME/WRF
	export WRF_FOLDER=$HOME/WRF
	cd ${WRF_FOLDER}/
	mkdir Downloads
	mkdir WRFPLUS
	mkdir WRFDA
	mkdir Libs
	export DIR=${WRF_FOLDER}/Libs
	mkdir Libs/grib2
	mkdir Libs/NETCDF
	mkdir Libs/MPICH
	mkdir -p Tests/Environment
	mkdir -p Tests/Compatibility

	echo " "
	#############################Core Management####################################

	export CPU_CORE=$(nproc) # number of available threads on system
	export CPU_6CORE="6"
	export CPU_HALF=$(($CPU_CORE / 2))                    #half of availble cores on system
	export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2))) #Forces CPU cores to even number to avoid partial core export. ie 7 cores would be 3.5 cores.

	if [ $CPU_CORE -le $CPU_6CORE ]; then #If statement for low core systems.  Forces computers to only use 1 core if there are 4 cores or less on the system.
		export CPU_HALF_EVEN="2"
	else
		export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))
	fi

	echo "##########################################"
	echo "Number of Threads being used $CPU_HALF_EVEN"
	echo "##########################################"

	echo " "
	##############################Downloading Libraries############################
	#Force use of ipv4 with -4
	cd Downloads
	wget -c https://github.com/madler/zlib/archive/refs/tags/v$Zlib_Version.tar.gz
	wget -c https://github.com/HDFGroup/hdf5/archive/refs/tags/hdf5-$HDF5_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-c/archive/refs/tags/v$Netcdf_C_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-fortran/archive/refs/tags/v$Netcdf_Fortran_Version.tar.gz
	wget -c https://download.sourceforge.net/libpng/libpng-$Libpng_Version.tar.gz
	wget -c https://www.ece.uvic.ca/~frodo/jasper/software/jasper-$Jasper_Version.zip
	wget -c https://github.com/pmodels/mpich/releases/download/v$Mpich_Version/mpich-$Mpich_Version.tar.gz
	wget -c https://parallel-netcdf.github.io/Release/pnetcdf-$Pnetcdf_Version.tar.gz
	wget -c https://sourceforge.net/projects/opengrads/files/grads2/2.2.1.oga.1/Linux%20%2864%20Bits%29/opengrads-2.2.1.oga.1-bundle-x86_64-pc-linux-gnu-glibc_2.17.tar.gz

	echo " "
	####################################Compilers#####################################
	export CC=gcc
	export CXX=g++
	export FC=gfortran
	export F77=gfortran
	export CFLAGS="-fPIC -fPIE -O3"

	#IF statement for GNU compiler issue
	export GCC_VERSION=$(/usr/bin/gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(/usr/bin/gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(/usr/bin/g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		export fallow_argument=-fallow-argument-mismatch
		export boz_argument=-fallow-invalid-boz
	else
		export fallow_argument=
		export boz_argument=
	fi

	export FFLAGS="$fallow_argument -m64"
	export FCFLAGS="$fallow_argument -m64"

	echo "##########################################"
	echo "FFLAGS = $FFLAGS"
	echo "FCFLAGS = $FCFLAGS"
	echo "CFLAGS = $CFLAGS"
	echo "##########################################"

	echo " "
	#############################zlib############################
	#Uncalling compilers due to comfigure issue with zlib$Zlib_Version
	#With CC & CXX definied ./configure uses different compiler Flags

	cd ${WRF_FOLDER}/Downloads
	tar -xvzf v$Zlib_Version.tar.gz
	cd zlib-$Zlib_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log
	./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "
	##############################MPICH############################
	#F90= due to compiler issues with mpich install
	cd ${WRF_FOLDER}/Downloads
	tar -xvzf mpich-$Mpich_Version.tar.gz
	cd mpich-$Mpich_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	F90= ./configure --prefix=$DIR/MPICH --with-device=ch3 FFLAGS=$fallow_argument FCFLAGS=$fallow_argument 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	# make check

	export PATH=$DIR/MPICH/bin:$PATH

	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx

	echo " "
	#############################libpng############################
	cd ${WRF_FOLDER}/Downloads
	export LDFLAGS=-L$DIR/grib2/lib
	export CPPFLAGS=-I$DIR/grib2/include
	tar -xvzf libpng-$Libpng_Version.tar.gz
	cd libpng-$Libpng_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check
	echo " "
	#############################JasPer############################
	cd ${WRF_FOLDER}/Downloads
	unzip jasper-$Jasper_Version.zip
	cd jasper-$Jasper_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	./configure --prefix=$DIR/grib2
	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export JASPERLIB=$DIR/grib2/lib
	export JASPERINC=$DIR/grib2/include

	echo " "
	#############################hdf5 library for netcdf4 functionality############################
	cd ${WRF_FOLDER}/Downloads
	tar -xvzf hdf5-$HDF5_Version.tar.gz
	cd hdf5-hdf5-$HDF5_Version
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 --with-zlib=$DIR/grib2 --enable-hl --enable-fortran --enable-parallel 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export HDF5=$DIR/grib2
	export PHDF5=$DIR/grib2
	export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH

	echo " "
	#############################Install Parallel-netCDF##############################
	#Make file created with half of available cpu cores
	#Hard path for MPI added
	##################################################################################
	cd ${WRF_FOLDER}/Downloads
	tar -xzvf pnetcdf-$Pnetcdf_Version.tar.gz
	cd pnetcdf-$Pnetcdf_Version
	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx
	autoreconf -i -f 2>&1 | tee autoreconf.log
	./configure --prefix=$DIR/grib2 --enable-shared --enable-static 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PNETCDF=$DIR/grib2

	echo " "

	##############################Install NETCDF C Library############################
	cd ${WRF_FOLDER}/Downloads
	tar -xzvf v$Netcdf_C_Version.tar.gz
	cd netcdf-c-$Netcdf_C_Version/
	export CPPFLAGS=-I$DIR/grib2/include
	export LDFLAGS=-L$DIR/grib2/lib
	export LIBS="-lhdf5_hl -lhdf5 -lz -lcurl -lgfortran -lgcc -lm -ldl -lpnetcdf"
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --disable-dap --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-pnetcdf --enable-cdf5 --enable-parallel-tests 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PATH=$DIR/NETCDF/bin:$PATH
	export NETCDF=$DIR/NETCDF
	echo " "
	##############################NetCDF fortran library############################
	cd ${WRF_FOLDER}/Downloads
	tar -xvzf v$Netcdf_Fortran_Version.tar.gz
	cd netcdf-fortran-$Netcdf_Fortran_Version/
	export LD_LIBRARY_PATH=$DIR/NETCDF/lib:$LD_LIBRARY_PATH
	export CPPFLAGS="-I$DIR/NETCDF/include -I$DIR/grib2/include"
	export LDFLAGS="-L$DIR/NETCDF/lib -L$DIR/grib2/lib"
	export LIBS="-lnetcdf -lpnetcdf -lcurl -lhdf5_hl -lhdf5 -lz -lm -ldl -lgcc -lgfortran"
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-parallel-tests --enable-hdf5 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "
	#################################### System Environment Tests ##############

	cd ${WRF_FOLDER}/Downloads
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_NETCDF_MPI_tests.tar
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_tests.tar

	tar -xvf Fortran_C_tests.tar -C ${WRF_FOLDER}/Tests/Environment
	tar -xvf Fortran_C_NETCDF_MPI_tests.tar -C ${WRF_FOLDER}/Tests/Compatibility

	export one="1"
	echo " "
	############## Testing Environment #####

	cd ${WRF_FOLDER}/Tests/Environment

	cp ${NETCDF}/include/netcdf.inc .

	echo " "
	echo " "
	echo "Environment Testing "
	echo "Test 1"
	$FC TEST_1_fortran_only_fixed.f
	./a.out | tee env_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 1 Passed"
	else
		echo "Environment Compiler Test 1 Failed"
		exit
	fi
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 2"
	$FC TEST_2_fortran_only_free.f90
	./a.out | tee env_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 2 Passed"
	else
		echo "Environment Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 3"
	$CC TEST_3_c_only.c
	./a.out | tee env_test3.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test3.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 3 Passed"
	else
		echo "Environment Compiler Test 3 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 4"
	$CC -c -m64 TEST_4_fortran+c_c.c
	$FC -c -m64 TEST_4_fortran+c_f.f90
	$FC -m64 TEST_4_fortran+c_f.o TEST_4_fortran+c_c.o
	./a.out | tee env_test4.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test4.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 4 Passed"
	else
		echo "Environment Compiler Test 4 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	############## Testing Environment #####

	cd ${WRF_FOLDER}/Tests/Compatibility

	cp ${NETCDF}/include/netcdf.inc .

	echo " "
	echo " "
	echo "Library Compatibility Tests "
	echo "Test 1"
	$FC -c 01_fortran+c+netcdf_f.f
	$CC -c 01_fortran+c+netcdf_c.c
	$FC 01_fortran+c+netcdf_f.o 01_fortran+c+netcdf_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	./a.out | tee comp_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 1 Passed"
	else
		echo "Compatibility Compiler Test 1 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "

	echo "Test 2"
	$MPIFC -c 02_fortran+c+netcdf+mpi_f.f
	$MPICC -c 02_fortran+c+netcdf+mpi_c.c
	$MPIFC 02_fortran+c+netcdf+mpi_f.o \
		02_fortran+c+netcdf+mpi_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	$DIR/MPICH/bin/mpirun ./a.out | tee comp_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 2 Passed"
	else
		echo "Compatibility Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."
	echo " "

	echo " All tests completed and passed"
	echo " "

	###############################NCEPlibs#####################################
	#The libraries are built and installed with
	# ./make_ncep_libs.sh -s MACHINE -c COMPILER -d NCEPLIBS_DIR -o OPENMP [-m mpi] [-a APPLICATION]
	#It is recommended to install the NCEPlibs into their own directory, which must be created before running the installer. Further information on the command line arguments can be obtained with
	# ./make_ncep_libs.sh -h

	#If iand error occurs go to https://github.com/NCAR/NCEPlibs/pull/16/files make adjustment and re-run ./make_ncep_libs.sh
	############################################################################

	cd ${WRF_FOLDER}/Downloads
	git clone https://github.com/NCAR/NCEPlibs.git
	cd NCEPlibs
	mkdir $DIR/nceplibs

	export JASPER_INC=$DIR/grib2/include
	export PNG_INC=$DIR/grib2/include
	export NETCDF=$DIR/NETCDF

	#for loop to edit linux.gnu for nceplibs to install
	#make if statement for gcc-9 or older
	export GCC_VERSION=$(/usr/bin/gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(/usr/bin/gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(/usr/bin/g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		y="24 28 32 36 40 45 49 53 56 60 64 68 69 73 74 79"
		for X in $y; do
			sed -i "${X}s/= /= $fallow_argument $boz_argument /g" ${WRF_FOLDER}/Downloads/NCEPlibs/macros.make.linux.gnu
		done
	else
		echo ""
		echo "Loop not needed"
	fi

	if [ ${auto_config} -eq 1 ]; then
		echo yes | ./make_ncep_libs.sh -s linux -c gnu -d $DIR/nceplibs -o 0 -m 1 -a upp
	else
		./make_ncep_libs.sh -s linux -c gnu -d $DIR/nceplibs -o 0 -m 1 -a upp
	fi

	export PATH=$DIR/nceplibs:$PATH

	echo " "
	################################UPPv4.1######################################
	#Previous verison of UPP
	#WRF Support page recommends UPPV4.1 due to too many changes to WRF and UPP code
	#since the WRF was written
	#Option 8 gfortran compiler with distributed memory
	#############################################################################
	cd ${WRF_FOLDER}/
	git clone -b dtc_post_v4.1.0 --recurse-submodules https://github.com/NOAA-EMC/EMC_post UPPV4.1
	cd UPPV4.1
	mkdir postprd
	export NCEPLIBS_DIR=$DIR/nceplibs
	export NETCDF=$DIR/NETCDF

	if [ ${auto_config} -eq 1 ]; then
		echo 8 | ./configure #Option 8 gfortran compiler with distributed memory
	else
		./configure #Option 8 gfortran compiler with distributed memory
	fi

	#make if statement for gcc-9 or older
	export GCC_VERSION=$(/usr/bin/gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(/usr/bin/gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(/usr/bin/g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		z="58 63"
		for X in $z; do
			sed -i "${X}s/(FOPT)/(FOPT) $fallow_argument $boz_argument  /g" ${WRF_FOLDER}/UPPV4.1/configure.upp
		done
	else
		echo ""
		echo "Loop not needed"
	fi

	./compile
	cd ${WRF_FOLDER}/UPPV4.1/scripts
	echo $PASSWD | sudo -S cpan install XML::LibXML
	chmod +x run_unipost

	# IF statement to check that all files were created.
	cd ${WRF_FOLDER}/UPPV4.1/exec
	n=$(ls ./*.exe | wc -l)
	if (($n == 1)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing UPPV4.1. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files. Exiting the script."
		read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
		exit
	fi

	echo " "

	######################## ARWpost V3.1  ############################
	## ARWpost
	##Configure #3
	###################################################################
	cd ${WRF_FOLDER}/Downloads
	wget -c http://www2.mmm.ucar.edu/wrf/src/ARWpost_V3.tar.gz
	tar -xvzf ARWpost_V3.tar.gz -C ${WRF_FOLDER}/
	cd ${WRF_FOLDER}/ARWpost
	./clean -a
	sed -i -e 's/-lnetcdf/-lnetcdff -lnetcdf/g' ${WRF_FOLDER}/ARWpost/src/Makefile
	export NETCDF=$DIR/NETCDF

	if [ ${auto_config} -eq 1 ]; then
		echo 3 | ./configure #Option 3 gfortran compiler with distributed memory
	else
		./configure #Option 3 gfortran compiler with distributed memory
	fi

	export GCC_VERSION=$(/usr/bin/gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(/usr/bin/gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(/usr/bin/g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		sed -i '32s/-ffree-form -O -fno-second-underscore -fconvert=big-endian -frecord-marker=4/-ffree-form -O -fno-second-underscore -fconvert=big-endian -frecord-marker=4 ${fallow_argument} /g' configure.arwp
	fi

	sed -i -e 's/-C -P -traditional/-P -traditional/g' ${WRF_FOLDER}/ARWpost/configure.arwp
	./compile

	export PATH=${WRF_FOLDER}/ARWpost/ARWpost.exe:$PATH

	echo " "
	################################ OpenGrADS ##################################
	#Verison 2.2.1 32bit of Linux
	#############################################################################
	if [[ $GRADS_PICK -eq 1 ]]; then
		cd ${WRF_FOLDER}/Downloads
		tar -xzvf opengrads-2.2.1.oga.1-bundle-x86_64-pc-linux-gnu-glibc_2.17.tar.gz -C ${WRF_FOLDER}/
		cd ${WRF_FOLDER}/
		mv ${WRF_FOLDER}/opengrads-2.2.1.oga.1 ${WRF_FOLDER}/GrADS
		cd GrADS/Contents
		wget -c https://github.com/regisgrundig/SIMOP/blob/master/g2ctl.pl
		chmod +x g2ctl.pl
		wget -c https://sourceforge.net/projects/opengrads/files/wgrib2/0.1.9.4/wgrib2-v0.1.9.4-bin-i686-glib2.5-linux-gnu.tar.gz
		tar -xzvf wgrib2-v0.1.9.4-bin-i686-glib2.5-linux-gnu.tar.gz
		cd wgrib2-v0.1.9.4/bin
		mv wgrib2 ${WRF_FOLDER}/GrADS/Contents
		cd ${WRF_FOLDER}/GrADS/Contents
		rm wgrib2-v0.1.9.4-bin-i686-glib2.5-linux-gnu.tar.gz
		rm -r wgrib2-v0.1.9.4

		export PATH=${WRF_FOLDER}/GrADS/Contents:$PATH

		echo " "
	fi
	################################## GrADS ###############################
	# Version  2.2.1
	# Sublibs library instructions: http://cola.gmu.edu/grads/gadoc/supplibs2.html
	# GrADS instructions: http://cola.gmu.edu/grads/downloads.php
	########################################################################
	if [[ $GRADS_PICK -eq 2 ]]; then

		echo $PASSWD | sudo -S apt -y install grads

	fi

	##################### NCAR COMMAND LANGUAGE           ##################
	########### NCL compiled via Conda                    ##################
	########### This is the preferred method by NCAR      ##################
	########### https://www.ncl.ucar.edu/index.shtml      ##################
	#Installing Miniconda3 to WRF-Hydro directory and updating libraries

	pip install --upgrade --force-reinstall zstandard
	pip install --upgrade --force-reinstall zstd
	pip3 install --upgrade --force-reinstall zstandard
	pip3 install --upgrade --force-reinstall zstd
	export Miniconda_Install_DIR=${WRF_FOLDER}/miniconda3

	mkdir -p $Miniconda_Install_DIR

	wget -c https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $Miniconda_Install_DIR/miniconda.sh
	bash $Miniconda_Install_DIR/miniconda.sh -b -u -p $Miniconda_Install_DIR

	rm -rf $Miniconda_Install_DIR/miniconda.sh

	export PATH=${WRF_FOLDER}/miniconda3/bin:$PATH

	source $Miniconda_Install_DIR/etc/profile.d/conda.sh

	$Miniconda_Install_DIR/bin/conda init bash
	$Miniconda_Install_DIR/bin/conda init zsh
	$Miniconda_Install_DIR/bin/conda init tcsh
	$Miniconda_Install_DIR/bin/conda init xonsh
	$Miniconda_Install_DIR/bin/conda init powershell

	conda config --add channels conda-forge
	conda config --set auto_activate_base false
	conda update -n root --all -y

	echo " "

	echo " "
	#Installing NCL via Conda
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda init bash
	conda activate base
	conda create -n ncl_stable -c conda-forge ncl -y
	conda activate ncl_stable

	conda deactivate
	conda deactivate
	conda deactivate

	echo " "

	############################OBSGRID###############################
	## OBSGRID
	## Downloaded from git tagged releases
	## Option #2
	########################################################################
	cd ${WRF_FOLDER}/
	git clone https://github.com/wrf-model/OBSGRID.git
	cd ${WRF_FOLDER}/OBSGRID

	./clean -a
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda init bash
	conda activate ncl_stable

	export HOME=$(
		cd
		pwd
	)
	export DIR=${WRF_FOLDER}/Libs
	export NETCDF=$DIR/NETCDF

	if [ ${auto_config} -eq 1 ]; then
		echo 2 | ./configure 2>&1 | tee configure.log #Option 2 for gfortran/gcc and distribunted memory
	else
		./configure 2>&1 | tee configure.log #Option 2 for gfortran/gcc and distribunted memory
	fi

	sed -i '27s/-lnetcdf -lnetcdff/ -lnetcdff -lnetcdf/g' configure.oa

	sed -i '31s/-lncarg -lncarg_gks -lncarg_c -lX11 -lm -lcairo/-lncarg -lncarg_gks -lncarg_c -lX11 -lm -lcairo -lfontconfig -lpixman-1 -lfreetype -lhdf5 -lhdf5_hl /g' configure.oa

	sed -i '39s/-frecord-marker=4/-frecord-marker=4 ${fallow_argument} /g' configure.oa

	sed -i '44s/=	/=	${fallow_argument} /g' configure.oa

	sed -i '45s/-C -P -traditional/-P -traditional/g' configure.oa

	echo " "
	./compile 2>&1 | tee compile.obsgrid.log

	conda deactivate
	conda deactivate
	conda deactivate

	echo " "
	# IF statement to check that all files were created.
	cd ${WRF_FOLDER}/OBSGRID
	n=$(ls ./*.exe | wc -l)
	if (($n == 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing OBSGRID. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files. Exiting the script."
		read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
		exit
	fi

	echo " "
	############################## RIP4 #####################################
	mkdir ${WRF_FOLDER}/RIP4
	cd ${WRF_FOLDER}/Downloads
	wget -c https://www2.mmm.ucar.edu/wrf/src/RIP_47.tar.gz
	tar -xvzf RIP_47.tar.gz -C ${WRF_FOLDER}/RIP4
	cd ${WRF_FOLDER}/RIP4/RIP_47
	mv * ..
	cd ${WRF_FOLDER}/RIP4
	rm -rd RIP_47
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda activate ncl_stable
	conda install -c conda-forge ncl c-compiler fortran-compiler cxx-compiler -y

	export RIP_ROOT=${WRF_FOLDER}/RIP4
	export NETCDF=$DIR/NETCDF
	export NCARG_ROOT=${WRF_FOLDER}/miniconda3/envs/ncl_stable

	sed -i '349s|-L${NETCDF}/lib -lnetcdf $NETCDFF|-L${NETCDF}/lib $NETCDFF -lnetcdff -lnetcdf -lnetcdf -lnetcdff_C -lhdf5 |g' ${WRF_FOLDER}/RIP4/configure

	sed -i '27s|NETCDFLIB	= -L${NETCDF}/lib -lnetcdf CONFIGURE_NETCDFF_LIB|NETCDFLIB	= -L</usr/lib/x86_64-linux-gnu/libm.a> -lm -L${NETCDF}/lib CONFIGURE_NETCDFF_LIB -lnetcdf -lhdf5 -lhdf5_hl -lgfortran -lgcc -lz |g' ${WRF_FOLDER}/RIP4/arch/preamble

	sed -i '31s|-L${NCARG_ROOT}/lib -lncarg -lncarg_gks -lncarg_c -lX11 -lXext -lpng -lz CONFIGURE_NCARG_LIB| -L${NCARG_ROOT}/lib -lncarg -lncarg_gks -lncarg_c -lX11 -lXext -lpng -lz -lcairo -lfontconfig -lpixman-1 -lfreetype -lexpat -lpthread -lbz2 -lXrender -lgfortran -lgcc -L</usr/lib/x86_64-linux-gnu/> -lm -lhdf5 -lhdf5_hl |g' ${WRF_FOLDER}/RIP4/arch/preamble

	sed -i '33s| -O|-fallow-argument-mismatch -O |g' ${WRF_FOLDER}/RIP4/arch/configure.defaults

	sed -i '35s|=|= -L${WRF_FOLDER}/LIBS/grib2/lib -lhdf5 -lhdf5_hl |g' ${WRF_FOLDER}/RIP4/arch/configure.defaults

	if [ ${auto_config} -eq 1 ]; then
		echo 3 | ./configure #Option 3 gfortran compiler with distributed memory
	else
		./configure #Option 3 gfortran compiler with distributed memory
	fi

	./compile

	conda deactivate
	conda deactivate
	conda deactivate

	echo " "
	##################### WRF Python           ##################
	########### WRf-Python compiled via Conda  ##################
	########### This is the preferred method by NCAR      ##################
	##### https://wrf-python.readthedocs.io/en/latest/installation.html  ##################
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
conda env create -f $HOME/WRF-MOSIT/wrf-python-stable.yml

	######################### Climate Data Operators ############
	######################### CDO compiled via Conda ###########
	####################### This is the preferred method #######
	################### https://bairdlangenbrunner.github.io/python-for-climate-scientists/conda/setting-up-conda-environments.html #######################

	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda init bash
	conda activate base
	conda create --name cdo_stable -y
	source activate cdo_stable
	conda install -c conda-forge cdo -y
	conda update --all -y
	conda deactivate
	conda deactivate
	conda deactivate

	echo " "

	################################## QGIS #####################################
	#QGIS (Quantum Geographic Information System) is a free and open-source platform that allows users to
	#analyze, view, and edit geospatial data. It supports both vector and raster layers, as well as various #web services, and is extensible through community-developed plugins. Key features include map
	#creation, spatial analysis, and data management.
	#############################################################################

	conda env create -f $HOME/WRF-MOSIT/qgis.3.28.8.yml

	echo " "

	############################ WRF ${WPS_VERSION}  #################################
	## WRF v${WPS_VERSION}
	## Downloaded from git tagged releases
	# option 34, option 1 for gfortran and distributed memory w/basic nesting
	# large file support enable with WRFiO_NCD_LARGE_FILE_SUPPORT=1
	# In the namelist.input, the following settings support pNetCDF by setting value to 11:
	# io_form_boundary
	# io_form_history
	# io_form_auxinput2
	# io_form_auxhist2
	# Note that you need set nocolons = .true. in the section &time_control of namelist.input
	########################################################################
	cd ${WRF_FOLDER}/Downloads
	wget -c https://github.com/wrf-model/WRF/releases/download/v${WRF_VERSION}/v${WRF_VERSION}.tar.gz -O WRF-${WRF_VERSION}.tar.gz
	tar -xvzf WRF-${WRF_VERSION}.tar.gz -C ${WRF_FOLDER}/

	# If statment for changing folder name
	if [ -d "${WRF_FOLDER}/WRF" ]; then
		mv -f ${WRF_FOLDER}/WRF ${WRF_FOLDER}/WRFV${WRF_VERSION}
	fi

	cd ${WRF_FOLDER}/WRFV${WRF_VERSION}
	export WRFIO_NCD_LARGE_FILE_SUPPORT=1
	./clean -a

	if [ ${auto_config} -eq 1 ]; then
		sed -i '443s/.*/  $response = "34 \\n";/g' ${WRF_FOLDER}/WRFV${WRF_VERSION}/arch/Config.pl # Answer for compiler choice
		sed -i '909s/.*/  $response = "1 \\n";/g' ${WRF_FOLDER}/WRFV${WRF_VERSION}/arch/Config.pl  #Answer for basic nesting
		./configure 2>&1 | tee configure.log
	else
		./configure 2>&1 | tee configure.log #Option 34 gfortran compiler with distributed memory option 1 for basic nesting
	fi

	./compile -j $CPU_HALF_EVEN em_real 2>&1 | tee compile.wrf1.log

	export WRF_DIR=${WRF_FOLDER}/WRFV${WRF_VERSION}

	# IF statement to check that all files were created.
	cd ${WRF_FOLDER}/WRFV${WRF_VERSION}/main
	n=$(ls ./*.exe | wc -l)
	if (($n >= 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		cd ${WRF_FOLDER}/WRFV${WRF_VERSION}
		./compile -j $CPU_HALF_EVEN em_real 2>&1 | tee compile.wrf2.log
		cd ${WRF_FOLDER}/WRFV${WRF_VERSION}/main
		n=$(ls ./*.exe | wc -l)
		if (($n >= 3)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "
	############################WPSV${WPS_VERSION}#####################################
	## WPS v${WPS_VERSION}
	## Downloaded from git tagged releases
	#Option 3 for gfortran and distributed memory
	########################################################################

	cd ${WRF_FOLDER}/Downloads
	wget -c https://github.com/wrf-model/WPS/archive/refs/tags/v${WPS_VERSION}.tar.gz -O WPS-${WPS_VERSION}.tar.gz
	tar -xvzf WPS-${WPS_VERSION}.tar.gz -C ${WRF_FOLDER}/
	cd ${WRF_FOLDER}/WPS-${WPS_VERSION}
	./clean -a

	if [ ${auto_config} -eq 1 ]; then
		echo 3 | ./configure 2>&1 | tee configure.log #Option 3 for gfortran and distributed memory
	else
		./configure 2>&1 | tee configure.log #Option 3 gfortran compiler with distributed memory
	fi
	./compile 2>&1 | tee compile.wps.log

	echo " "
	# IF statement to check that all files were created.
	cd ${WRF_FOLDER}/WPS-${WPS_VERSION}
	n=$(ls ./*.exe | wc -l)
	if (($n == 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		./compile 2>&1 | tee compile.wps2.log
		cd ${WRF_FOLDER}/WPS-${WPS_VERSION}
		n=$(ls ./*.exe | wc -l)
		if (($n == 3)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "
	############################WRFPLUS 4DVAR###############################
	## WRFPLUS v${WPS_VERSION} 4DVAR
	## Downloaded from git tagged releases
	## WRFPLUS is built within the WRF git folder
	## Does not include RTTOV Libarary for radiation data.  If wanted will need to install library then reconfigure
	##Note: if you intend to run both 3DVAR and 4DVAR experiments, it is not necessary to compile the code twice.
	#Option 18 for gfortran/gcc and distribunted memory
	########################################################################
	cd ${WRF_FOLDER}/Downloads
	tar -xvzf WRF-${WRF_VERSION}.tar.gz -C ${WRF_FOLDER}/WRFPLUS

	# If statment for changing folder name
	if [ -d "${WRF_FOLDER}/WRFPLUS/WRF" ]; then
		mv -f ${WRF_FOLDER}/WRFPLUS/WRF ${WRF_FOLDER}/WRFPLUS/WRFV${WRF_VERSION}
	fi

	cd ${WRF_FOLDER}/WRFPLUS/WRFV${WRF_VERSION}
	mv * ${WRF_FOLDER}/WRFPLUS
	cd ${WRF_FOLDER}/WRFPLUS
	rm -rf WRFV${WRF_VERSION}/
	export NETCDF=$DIR/NETCDF
	export HDF5=$DIR/grib2
	export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH
	./clean -a

	if [ ${auto_config} -eq 1 ]; then
		echo 18 | ./configure wrfplus 2>&1 | tee configure.log #Option 18 for gfortran/gcc and distribunted memory
	else
		./configure wrfplus 2>&1 | tee configure.log #Option 18 for gfortran/gcc and distribunted memory
	fi
	echo " "
	./compile -j $CPU_HALF_EVEN wrfplus 2>&1 | tee compile.wrfplus.log
	export WRFPLUS_DIR=${WRF_FOLDER}/WRFPLUS

	echo " "

	# IF statement to check that all files were created.
	cd ${WRF_FOLDER}/WRFPLUS/main
	n=$(ls ./wrfplus.exe | wc -l)
	if (($n == 1)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WRF Plus 4DVAR. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		cd ${WRF_FOLDER}/WRFPLUS/
		./compile -j $CPU_HALF_EVEN wrfplus 2>&1 | tee compile.wrfplus.log
		cd ${WRF_FOLDER}/WRFPLUS/main
		n=$(ls ./wrfplus.exe | wc -l)
		if (($n == 1)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WRF Plus 4DVAR. I am going to wait for 5 seconds only ..."
		else
			echo "Missing one or more expected files."
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "

	############################WRFDA 4DVAR###############################
	## WRFDA v${WPS_VERSION} 4DVAR
	## Downloaded from git tagged releases
	## WRFDA is built within the WRFPLUS folder
	## Does not include RTTOV Libarary for radiation data.  If wanted will need to install library then reconfigure
	##Note: if you intend to run both 3DVAR and 4DVAR experiments, it is not necessary to compile the code twice.
	#Option 18 for gfortran/gcc and distribunted memory
	########################################################################
	cd ${WRF_FOLDER}/Downloads
	mkdir ${WRF_FOLDER}/WRFDA
	tar -xvzf WRF-${WRF_VERSION}.tar.gz -C ${WRF_FOLDER}/WRFDA

	# If statment for changing folder name
	if [ -d "${WRF_FOLDER}/WRFDA/WRF" ]; then
		mv -f ${WRF_FOLDER}/WRFDA/WRF ${WRF_FOLDER}/WRFDA/WRFV${WRF_VERSION}
	fi

	cd ${WRF_FOLDER}/WRFDA/WRFV${WRF_VERSION}
	mv * ${WRF_FOLDER}/WRFDA
	cd ${WRF_FOLDER}/WRFDA
	rm -rf WRFV${WRF_VERSION}/
	export NETCDF=$DIR/NETCDF
	export HDF5=$DIR/grib2
	export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH
	export WRFPLUS_DIR=${WRF_FOLDER}/WRFPLUS
	./clean -a

	if [ ${auto_config} -eq 1 ]; then
		echo 18 | ./configure 4dvar 2>&1 | tee configure.log #Option 18 for gfortran/gcc and distribunted memory
	else
		./configure 4dvar 2>&1 | tee configure.log #Option 18 for gfortran/gcc and distribunted memory
	fi
	echo " "
	./compile all_wrfvar 2>&1 | tee compile.wrf4dvar.log
	echo " "

	# IF statement to check that all files were created.
	cd ${WRF_FOLDER}/WRFDA/var/da
	n=$(ls ./*.exe | wc -l)
	cd ${WRF_FOLDER}/WRFDA/var/obsproc/src
	m=$(ls ./*.exe | wc -l)
	if ((($n == 43) && ($m == 1))); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WRFDA. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		cd ${WRF_FOLDER}/WRFDA
		./compile -j $CPU_HALF_EVEN all_wrfvar 2>&1 | tee compile.chem.wrfvar2.log
		cd ${WRF_FOLDER}/WRFDA/var/da
		n=$(ls ./*.exe | wc -l)
		cd ${WRF_FOLDER}/WRFDA/var/obsproc/src
		m=$(ls ./*.exe | wc -l)
		if ((($n == 43) && ($m == 1))); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WRFDA. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi
	echo " "

	######################## WPS Domain Setup Tools ########################
	## DomainWizard
	cd ${WRF_FOLDER}/Downloads
	wget -c http://esrl.noaa.gov/gsd/wrfportal/domainwizard/WRFDomainWizard.zip
	mkdir ${WRF_FOLDER}/WRFDomainWizard
	unzip WRFDomainWizard.zip -d ${WRF_FOLDER}/WRFDomainWizard
	chmod +x ${WRF_FOLDER}/WRFDomainWizard/run_DomainWizard

	echo " "
	######################## WPF Portal Setup Tools ########################
	## WRFPortal
	cd ${WRF_FOLDER}/Downloads
	wget -c https://esrl.noaa.gov/gsd/wrfportal/portal/wrf-portal.zip
	mkdir ${WRF_FOLDER}/WRFPortal
	unzip wrf-portal.zip -d ${WRF_FOLDER}/WRFPortal
	chmod +x ${WRF_FOLDER}/WRFPortal/runWRFPortal

	echo " "

	######################## Static Geography Data inc/ Optional ####################
	# http://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	# These files are large so if you only need certain ones comment the others off
	# All files downloaded and untarred is 200GB
	# https://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	#################################################################################
	cd ${WRF_FOLDER}/Downloads
	mkdir ${WRF_FOLDER}/GEOG
	mkdir ${WRF_FOLDER}/GEOG/WPS_GEOG

	echo " "
	echo "Mandatory WRF Preprocessing System (WPS) Geographical Input Data Mandatory Fields Downloads"
	echo " "
	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_high_res_mandatory.tar.gz
	tar -xvzf geog_high_res_mandatory.tar.gz -C ${WRF_FOLDER}/GEOG/

	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_low_res_mandatory.tar.gz
	tar -xvzf geog_low_res_mandatory.tar.gz -C ${WRF_FOLDER}/GEOG/
	mv ${WRF_FOLDER}/GEOG/WPS_GEOG_LOW_RES/ ${WRF_FOLDER}/GEOG/WPS_GEOG

	if [ ${WPS_Specific_Applications} -eq 1 ]; then
		echo " "
		echo " WPS Geographical Input Data Mandatory for Specific Applications"
		echo " "

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_thompson28_chem.tar.gz
		tar -xvzf geog_thompson28_chem.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_noahmp.tar.gz
		tar -xvzf geog_noahmp.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/irrigation.tar.gz
		tar -xvzf irrigation.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_px.tar.gz
		tar -xvzf geog_px.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_urban.tar.gz
		tar -xvzf geog_urban.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_ssib.tar.gz
		tar -xvzf geog_ssib.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/lake_depth.tar.bz2
		tar -xvf lake_depth.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/topobath_30s.tar.bz2
		tar -xvf topobath_30s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/gsl_gwd.tar.bz2
		tar -xvf gsl_gwd.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG
	fi

	if [ ${Optional_GEOG} -eq 1 ]; then
		echo " "
		echo "Optional WPS Geographical Input Data"
		echo " "

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_older_than_2000.tar.gz
		tar -xvzf geog_older_than_2000.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s_with_lakes.tar.gz
		tar -xvzf modis_landuse_20class_15s_with_lakes.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_alt_lsm.tar.gz
		tar -xvzf geog_alt_lsm.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/nlcd2006_ll_9s.tar.bz2
		tar -xvf nlcd2006_ll_9s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/updated_Iceland_LU.tar.gz
		tar -xvf updated_Iceland_LU.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s.tar.bz2
		tar -xvf modis_landuse_20class_15s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

	fi

fi

if [ "$Ubuntu_64bit_Intel" = "1" ] && [ "$WRF_PICK" = "1" ]; then

	############################# Basic package managment ############################

	echo $PASSWD | sudo -S apt -y update
	echo $PASSWD | sudo -S apt -y upgrade && sudo -S apt -y autoremove

	# download the key to system keyring; this and the following echo command are
	# needed in order to install the Intel compilers
	wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB |
		gpg --dearmor | sudo tee /usr/share/keyrings/oneapi-archive-keyring.gpg >/dev/null

	# add signed entry to apt sources and configure the APT client to use Intel repository:
	echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list

	# this update should get the Intel package info from the Intel repository
	echo $PASSWD | sudo -S apt -y update

	# necessary binary packages (especially pkg-config and build-essential)
	echo $PASSWD | sudo -S apt -y install autoconf automake bison build-essential byacc cmake csh curl default-jdk default-jre emacs flex g++ gawk gcc gfortran git ksh libcurl4-openssl-dev libjpeg-dev libncurses6 libpixman-1-dev libpng-dev libtool libxml2 libxml2-dev m4 make  ncview okular openbox pipenv pkg-config  python3 python3-dev python3-pip python3-dateutil tcsh unzip xauth xorg time

	# install the Intel compilers
	echo $PASSWD | sudo -S apt -y install intel-basekit
	echo $PASSWD | sudo -S apt -y install intel-hpckit
	echo $PASSWD | sudo -S apt -y install intel-oneapi-python

	echo $PASSWD | sudo -S apt -y update

	# make sure some critical packages have been installed
	which cmake pkg-config make gcc g++ gfortran

	# add the Intel compiler file paths to various environment variables
	source /opt/intel/oneapi/setvars.sh

	# some of the libraries we install below need one or more of these variables
	# some of the libraries we install below need one or more of these variables
	export CC=icc
	export CXX=icpc
	export FC=ifort
	export F77=ifort
	export F90=ifort
	export MPIFC=mpiifort
	export MPIF77=mpiifort
	export MPIF90=mpiifort
	export MPICC=mpiicc
	export MPICXX=mpiicpc
	export CFLAGS="-fPIC -fPIE -O3 -diag-disable=10441 "
	export FFLAGS="-m64"
	export FCFLAGS="-m64"
	############################# CPU Core Management ####################################

	export CPU_CORE=$(nproc) # number of available threads on system
	export CPU_6CORE="6"
	export CPU_HALF=$(($CPU_CORE / 2)) # half of availble cores on system
	# Forces CPU cores to even number to avoid partial core export. ie 7 cores would be 3.5 cores.
	export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))

	# If statement for low core systems.  Forces computers to only use 1 core if there are 4 cores or less on the system.
	if [ $CPU_CORE -le $CPU_6CORE ]; then
		export CPU_HALF_EVEN="2"
	else
		export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))
	fi

	echo "##########################################"
	echo "Number of Threads being used $CPU_HALF_EVEN"
	echo "##########################################"

	############################## Directory Listing ############################
	# makes necessary directories
	#
	############################################################################

	export HOME=$(
		cd
		pwd
	)
	export WRF_FOLDER=$HOME/WRF_Intel
	export DIR=${WRF_FOLDER}/Libs
	mkdir ${WRF_FOLDER}
	cd ${WRF_FOLDER}
	mkdir Downloads
	mkdir WRFPLUS
	mkdir WRFDA
	mkdir Libs
	mkdir Libs/grib2
	mkdir Libs/NETCDF
	mkdir Libs/MPICH
	mkdir -p Tests/Environment
	mkdir -p Tests/Compatibility

	echo " "
	############################## Downloading Libraries ############################

	cd ${WRF_FOLDER}/Downloads
	wget -c https://github.com/madler/zlib/archive/refs/tags/v$Zlib_Version.tar.gz
	wget -c https://github.com/HDFGroup/hdf5/archive/refs/tags/hdf5-$HDF5_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-c/archive/refs/tags/v$Netcdf_C_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-fortran/archive/refs/tags/v$Netcdf_Fortran_Version.tar.gz
	wget -c https://download.sourceforge.net/libpng/libpng-$Libpng_Version.tar.gz
	wget -c https://www.ece.uvic.ca/~frodo/jasper/software/jasper-$Jasper_Version.zip
	wget -c https://parallel-netcdf.github.io/Release/pnetcdf-$Pnetcdf_Version.tar.gz
	wget -c https://sourceforge.net/projects/opengrads/files/grads2/2.2.1.oga.1/Linux%20%2864%20Bits%29/opengrads-2.2.1.oga.1-bundle-x86_64-pc-linux-gnu-glibc_2.17.tar.gz

	echo " "
	############################# ZLib ############################

	cd ${WRF_FOLDER}/Downloads
	tar -xvzf v$Zlib_Version.tar.gz
	cd zlib-$Zlib_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	# make check | tee zlib.makecheck.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log

	echo " "
	############################# LibPNG ############################

	cd ${WRF_FOLDER}/Downloads

	# other libraries below need these variables to be set
	export LDFLAGS=-L$DIR/grib2/lib
	export CPPFLAGS=-I$DIR/grib2/include

	tar -xvzf libpng-$Libpng_Version.tar.gz
	cd libpng-$Libpng_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	#make -j $CPU_HALF_EVEN check | tee libpng.makecheck.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log

	echo " "
	############################# JasPer ############################

	cd ${WRF_FOLDER}/Downloads
	unzip jasper-$Jasper_Version.zip
	cd jasper-$Jasper_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log

	# other libraries below need these variables to be set
	export JASPERLIB=$DIR/grib2/lib
	export JASPERINC=$DIR/grib2/include

	echo " "
	############################# HDF5 library for NetCDF4 & parallel functionality ############################

	cd ${WRF_FOLDER}/Downloads
	tar -xvzf hdf5-$HDF5_Version.tar.gz
	cd hdf5-hdf5-$HDF5_Version
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 --with-zlib=$DIR/grib2 --enable-hl --enable-fortran --enable-parallel 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log

	# other libraries below need these variables to be set
	export HDF5=$DIR/grib2
	export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH
	export PATH=$HDF5/bin:$PATH
	export PHDF5=$DIR/grib2

	echo " "

	#############################Install Parallel-netCDF##############################
	#Make file created with half of available cpu cores
	#Hard path for MPI added
	##################################################################################
	cd ${WRF_FOLDER}/Downloads
	tar -xzvf pnetcdf-$Pnetcdf_Version.tar.gz
	cd pnetcdf-$Pnetcdf_Version
	autoreconf -i -f 2>&1 | tee autoreconf.log
	./configure --prefix=$DIR/grib2 --enable-shared --enable-static 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PNETCDF=$DIR/grib2

	echo " "

	############################## Install NETCDF-C Library ############################

	cd ${WRF_FOLDER}/Downloads
	tar -xzvf v$Netcdf_C_Version.tar.gz
	cd netcdf-c-$Netcdf_C_Version/

	# these variables need to be set for the NetCDF-C install to work
	export CPPFLAGS=-I$DIR/grib2/include
	export LDFLAGS=-L$DIR/grib2/lib
	export LIBS="-lhdf5_hl -lhdf5 -lz -lcurl -lgfortran -lgcc -lm -ldl -lpnetcdf"
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --disable-dap --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-pnetcdf --enable-cdf5 --enable-parallel-tests 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log

	# other libraries below need these variables to be set
	export PATH=$DIR/NETCDF/bin:$PATH
	export NETCDF=$DIR/NETCDF

	echo " "
	############################## NetCDF-Fortran library ############################

	cd ${WRF_FOLDER}/Downloads
	tar -xvzf v$Netcdf_Fortran_Version.tar.gz
	cd netcdf-fortran-$Netcdf_Fortran_Version/

	# these variables need to be set for the NetCDF-Fortran install to work
	export LD_LIBRARY_PATH=$DIR/NETCDF/lib:$LD_LIBRARY_PATH
	export CPPFLAGS="-I$DIR/NETCDF/include -I$DIR/grib2/include"
	export LDFLAGS="-L$DIR/NETCDF/lib -L$DIR/grib2/lib"
	export LIBS="-lnetcdf -lpnetcdf -lcurl -lhdf5_hl -lhdf5 -lz -lm -ldl -lgcc -lgfortran"
	autoreconf -i -f 2>&1 | tee autoreconf.log
	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --enable-netcdf-4 --enable-netcdf4 --enable-parallel-tests --enable-hdf5 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log

	echo " "
	#################################### System Environment Tests ##############

	cd ${WRF_FOLDER}/Downloads
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_NETCDF_MPI_tests.tar
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_tests.tar

	tar -xvf Fortran_C_tests.tar -C ${WRF_FOLDER}/Tests/Environment
	tar -xvf Fortran_C_NETCDF_MPI_tests.tar -C ${WRF_FOLDER}/Tests/Compatibility

	export one="1"
	echo " "
	############## Testing Environment #####

	cd ${WRF_FOLDER}/Tests/Environment

	echo " "
	echo " "
	echo "Environment Testing "
	echo "Test 1"
	$FC TEST_1_fortran_only_fixed.f
	./a.out | tee env_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 1 Passed"
	else
		echo "Environment Compiler Test 1 Failed"
		exit
	fi
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 2"
	$FC TEST_2_fortran_only_free.f90
	./a.out | tee env_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 2 Passed"
	else
		echo "Environment Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 3"
	$CC TEST_3_c_only.c
	./a.out | tee env_test3.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test3.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 3 Passed"
	else
		echo "Environment Compiler Test 3 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 4"
	$CC -c -m64 TEST_4_fortran+c_c.c
	$FC -c -m64 TEST_4_fortran+c_f.f90
	$FC -m64 TEST_4_fortran+c_f.o TEST_4_fortran+c_c.o
	./a.out | tee env_test4.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test4.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 4 Passed"
	else
		echo "Environment Compiler Test 4 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	############## Testing Environment #####

	cd ${WRF_FOLDER}/Tests/Compatibility

	cp ${NETCDF}/include/netcdf.inc .

	echo " "
	echo " "
	echo "Library Compatibility Tests "
	echo "Test 1"
	$FC -c 01_fortran+c+netcdf_f.f
	$CC -c 01_fortran+c+netcdf_c.c
	$FC 01_fortran+c+netcdf_f.o 01_fortran+c+netcdf_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	./a.out | tee comp_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 1 Passed"
	else
		echo "Compatibility Compiler Test 1 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "

	echo "Test 2"
	$MPIFC -c 02_fortran+c+netcdf+mpi_f.f
	$MPICC -c 02_fortran+c+netcdf+mpi_c.c
	$MPIFC 02_fortran+c+netcdf+mpi_f.o \
		02_fortran+c+netcdf+mpi_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	mpirun ./a.out | tee comp_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 2 Passed"
	else
		echo "Compatibility Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."
	echo " "

	echo " All tests completed and passed"
	echo " "
	###############################NCEPlibs#####################################
	#The libraries are built and installed with
	# ./make_ncep_libs.sh -s MACHINE -c COMPILER -d NCEPLIBS_DIR -o OPENMP [-m mpi] [-a APPLICATION]
	#It is recommended to install the NCEPlibs into their own directory, which must be created before running the installer. Further information on the command line arguments can be obtained with
	# ./make_ncep_libs.sh -h

	#If iand error occurs go to https://github.com/NCAR/NCEPlibs/pull/16/files make adjustment and re-run ./make_ncep_libs.sh
	############################################################################

	cd ${WRF_FOLDER}/Downloads
	git clone https://github.com/NCAR/NCEPlibs.git
	cd NCEPlibs
	mkdir $DIR/nceplibs

	export JASPER_INC=$DIR/grib2/include
	export PNG_INC=$DIR/grib2/include
	export NETCDF=$DIR/NETCDF

	if [ ${auto_config} -eq 1 ]; then
		echo yes | ./make_ncep_libs.sh -s linux -c intel -d $DIR/nceplibs -o 0 -m 1 -a upp
	else
		./make_ncep_libs.sh -s linux -c intel -d $DIR/nceplibs -o 0 -m 1 -a upp
	fi

	export PATH=$DIR/nceplibs:$PATH

	echo " "
	################################UPPv4.1######################################
	#Previous verison of UPP
	#WRF Support page recommends UPPV4.1 due to too many changes to WRF and UPP code
	#since the WRF was written
	#Option 8 gfortran compiler with distributed memory
	#############################################################################
	cd ${WRF_FOLDER}
	git clone -b dtc_post_v4.1.0 --recurse-submodules https://github.com/NOAA-EMC/EMC_post UPPV4.1
	cd UPPV4.1
	mkdir postprd
	export NCEPLIBS_DIR=$DIR/nceplibs
	export NETCDF=$DIR/NETCDF

	if [ ${auto_config} -eq 1 ]; then
		echo 4 | ./configure #Option 4 intel compiler with distributed memory
	else
		./configure #Option 4 intel compiler with distributed memory
	fi

	sed -i '24s/ mpif90/ mpiifort/g' ${WRF_FOLDER}/UPPV4.1/configure.upp
	sed -i '25s/ mpif90/ mpiifort/g' ${WRF_FOLDER}/UPPV4.1/configure.upp
	sed -i '26s/ mpicc/ mpiicc/g' ${WRF_FOLDER}/UPPV4.1/configure.upp

	./compile
	cd ${WRF_FOLDER}/UPPV4.1/scripts
	echo $PASSWD | sudo -S cpan install XML::LibXML
	chmod +x run_unipost

	# IF statement to check that all files were created.
	cd ${WRF_FOLDER}/UPPV4.1/exec
	n=$(ls ./*.exe | wc -l)
	if (($n == 1)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing UPPV4.1. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files. Exiting the script."
		read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
		exit
	fi

	echo " "

	######################## ARWpost V3.1  ############################
	## ARWpost
	##Configure #3
	###################################################################
	cd ${WRF_FOLDER}/Downloads
	wget -c http://www2.mmm.ucar.edu/wrf/src/ARWpost_V3.tar.gz
	tar -xvzf ARWpost_V3.tar.gz -C ${WRF_FOLDER}
	cd ${WRF_FOLDER}/ARWpost
	./clean -a
	sed -i -e 's/-lnetcdf/-lnetcdff -lnetcdf/g' ${WRF_FOLDER}/ARWpost/src/Makefile
	export NETCDF=$DIR/NETCDF

	if [ ${auto_config} -eq 1 ]; then
		echo 2 | ./configure #Option 2 intel compiler with distributed memory
	else
		./configure #Option 2 intel compiler with distributed memory
	fi

	sed -i -e 's/-C -P -traditional/-P -traditional/g' ${WRF_FOLDER}/ARWpost/configure.arwp
	./compile

	export PATH=${WRF_FOLDER}/ARWpost/ARWpost.exe:$PATH

	echo " "
	################################OpenGrADS######################################
	#Verison 2.2.1 64bit of Linux
	#############################################################################
	if [[ $GRADS_PICK -eq 1 ]]; then
		cd ${WRF_FOLDER}/Downloads
		tar -xzvf opengrads-2.2.1.oga.1-bundle-x86_64-pc-linux-gnu-glibc_2.17.tar.gz -C ${WRF_FOLDER}/
		cd ${WRF_FOLDER}/
		mv ${WRF_FOLDER}/opengrads-2.2.1.oga.1 ${WRF_FOLDER}/GrADS
		cd GrADS/Contents
		wget -c https://github.com/regisgrundig/SIMOP/blob/master/g2ctl.pl
		chmod +x g2ctl.pl
		wget -c https://sourceforge.net/projects/opengrads/files/wgrib2/0.1.9.4/wgrib2-v0.1.9.4-bin-x86_64-glibc2.5-linux-gnu.tar.gz
		tar -xzvf wgrib2-v0.1.9.4-bin-x86_64-glibc2.5-linux-gnu.tar.gz
		cd wgrib2-v0.1.9.4/bin
		mv wgrib2 ${WRF_FOLDER}/GrADS/Contents
		cd ${WRF_FOLDER}/GrADS/Contents
		rm wgrib2-v0.1.9.4-bin-x86_64-glibc2.5-linux-gnu.tar.gz
		rm -r wgrib2-v0.1.9.4

		export PATH=${WRF_FOLDER}/GrADS/Contents:$PATH
	fi
	################################## GrADS ###############################
	# Version  2.2.1
	# Sublibs library instructions: http://cola.gmu.edu/grads/gadoc/supplibs2.html
	# GrADS instructions: http://cola.gmu.edu/grads/downloads.php
	########################################################################
	if [[ $GRADS_PICK -eq 2 ]]; then

		echo $PASSWD | sudo -S apt -y install grads

	fi

	##################### NCAR COMMAND LANGUAGE           ##################
	########### NCL compiled via Conda                    ##################
	########### This is the preferred method by NCAR      ##################
	########### https://www.ncl.ucar.edu/index.shtml      ##################
	echo " "
	echo " "
	#Installing Miniconda3 to WRF directory and updating libraries

	pip install --upgrade --force-reinstall zstandard
	pip install --upgrade --force-reinstall zstd
	pip3 install --upgrade --force-reinstall zstandard
	pip3 install --upgrade --force-reinstall zstd
	export Miniconda_Install_DIR=${WRF_FOLDER}/miniconda3

	mkdir -p $Miniconda_Install_DIR

	wget -c https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $Miniconda_Install_DIR/miniconda.sh
	bash $Miniconda_Install_DIR/miniconda.sh -b -u -p $Miniconda_Install_DIR

	rm -rf $Miniconda_Install_DIR/miniconda.sh

	export PATH=${WRF_FOLDER}/miniconda3/bin:$PATH

	source $Miniconda_Install_DIR/etc/profile.d/conda.sh

	$Miniconda_Install_DIR/bin/conda init bash
	$Miniconda_Install_DIR/bin/conda init zsh
	$Miniconda_Install_DIR/bin/conda init tcsh
	$Miniconda_Install_DIR/bin/conda init xonsh
	$Miniconda_Install_DIR/bin/conda init powershell

	conda config --add channels conda-forge
	conda config --set auto_activate_base false
	conda update -n root --all -y

	#Special Thanks to @_WaylonWalker for code development
	echo " "
	#Installing NCL via Conda
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda init bash
	conda activate base
	conda create -n ncl_stable -c conda-forge ncl -y
	conda activate ncl_stable

	conda deactivate
	conda deactivate
	conda deactivate

	echo " "

	##################### WRF Python           ##################
	########### WRf-Python compiled via Conda  ##################
	########### This is the preferred method by NCAR      ##################
	##### https://wrf-python.readthedocs.io/en/latest/installation.html  ##################
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
conda env create -f $HOME/WRF-MOSIT/wrf-python-stable.yml

	######################### Climate Data Operators ############
	######################### CDO compiled via Conda ###########
	####################### This is the preferred method #######
	################### https://bairdlangenbrunner.github.io/python-for-climate-scientists/conda/setting-up-conda-environments.html #######################

	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda init bash
	conda activate base
	conda create --name cdo_stable -y
	source activate cdo_stable
	conda install -c conda-forge cdo -y
	conda update --all -y
	conda deactivate
	conda deactivate
	conda deactivate

	echo " "

	################################## QGIS #####################################
	#QGIS (Quantum Geographic Information System) is a free and open-source platform that allows users to
	#analyze, view, and edit geospatial data. It supports both vector and raster layers, as well as various #web services, and is extensible through community-developed plugins. Key features include map
	#creation, spatial analysis, and data management.
	#############################################################################

	conda env create -f $HOME/WRF-MOSIT/qgis.3.28.8.yml

	echo " "

	############################ WRF ${WPS_VERSION}  #################################
	## WRF v${WPS_VERSION}
	## Downloaded from git tagged releases
	# option 15, option 1 for intel and distributed memory w/basic nesting
	# large file support enable with WRFiO_NCD_LARGE_FILE_SUPPORT=1
	########################################################################
	cd ${WRF_FOLDER}/Downloads
	wget -c https://github.com/wrf-model/WRF/releases/download/v${WRF_VERSION}/v${WRF_VERSION}.tar.gz -O WRF-${WRF_VERSION}.tar.gz
	tar -xvzf WRF-${WRF_VERSION}.tar.gz -C ${WRF_FOLDER}/

	# If statment for changing folder name
	if [ -d "${WRF_FOLDER}/WRF" ]; then
		mv -f ${WRF_FOLDER}/WRF ${WRF_FOLDER}/WRFV${WRF_VERSION}
	fi

	cd ${WRF_FOLDER}/WRFV${WRF_VERSION}
	export WRFIO_NCD_LARGE_FILE_SUPPORT=1
	./clean -a

	if [ ${auto_config} -eq 1 ]; then
		sed -i '443s/.*/  $response = "15 \\n";/g' ${WRF_FOLDER}/WRFV${WRF_VERSION}/arch/Config.pl # Answer for compiler choice
		sed -i '909s/.*/  $response = "1 \\n";/g' ${WRF_FOLDER}/WRFV${WRF_VERSION}/arch/Config.pl  #Answer for basic nesting
		./configure 2>&1 | tee configure.log
	else
		./configure 2>&1 | tee configure.log #Option 15 intel compiler with distributed memory option 1 for basic nesting
	fi

	#Need to remove mpich/GNU config calls to Intel config calls
	sed -i '169s|mpif90 -f90=$(SFC)|mpiifort|g' ${WRF_FOLDER}/WRFV${WRF_VERSION}/configure.wrf
	sed -i '170s|mpicc -cc=$(SCC)|mpiicc|g' ${WRF_FOLDER}/WRFV${WRF_VERSION}/configure.wrf
	sed -i '177s|-w -O3|-diag-disable=10441 -w -O3|g' ${WRF_FOLDER}/WRFV${WRF_VERSION}/configure.wrf

	./compile -j $CPU_HALF_EVEN em_real 2>&1 | tee compile.wrf1.log

	export WRF_DIR=${WRF_FOLDER}/WRFV${WRF_VERSION}

	# IF statement to check that all files were created.
	cd ${WRF_FOLDER}/WRFV${WRF_VERSION}/main
	n=$(ls ./*.exe | wc -l)
	if (($n >= 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		cd ${WRF_FOLDER}/WRFV${WRF_VERSION}
		./compile -j $CPU_HALF_EVEN em_real 2>&1 | tee compile.wrf2.log
		cd ${WRF_FOLDER}/WRFV${WRF_VERSION}/main
		n=$(ls ./*.exe | wc -l)
		if (($n >= 3)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "
	############################WPSV${WPS_VERSION}#####################################
	## WPS v${WPS_VERSION}
	## Downloaded from git tagged releases
	#Option 3 for gfortran and distributed memory
	########################################################################

	cd ${WRF_FOLDER}/Downloads
	wget -c https://github.com/wrf-model/WPS/archive/refs/tags/v${WPS_VERSION}.tar.gz -O WPS-${WPS_VERSION}.tar.gz
	tar -xvzf WPS-${WPS_VERSION}.tar.gz -C ${WRF_FOLDER}/
	cd ${WRF_FOLDER}/WPS-${WPS_VERSION}
	./clean -a

	if [ ${auto_config} -eq 1 ]; then
		echo 19 | ./configure 2>&1 | tee configure.log #Option 19 for intel and distributed memory
	else
		./configure 2>&1 | tee configure.log #Option 19 intel compiler with distributed memory
	fi

	sed -i '67s|mpif90|mpiifort|g' ${WRF_FOLDER}/WPS-${WPS_VERSION}/configure.wps
	sed -i '68s|mpicc|mpiicc|g' ${WRF_FOLDER}/WPS-${WPS_VERSION}/configure.wps

	./compile 2>&1 | tee compile.wps.log

	echo " "
	# IF statement to check that all files were created.
	cd ${WRF_FOLDER}/WPS-${WPS_VERSION}
	n=$(ls ./*.exe | wc -l)
	if (($n == 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		./compile 2>&1 | tee compile.wps2.log
		cd ${WRF_FOLDER}/WPS-${WPS_VERSION}
		n=$(ls ./*.exe | wc -l)
		if (($n == 3)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "
	############################WRFPLUS 4DVAR###############################
	## WRFPLUS v${WPS_VERSION} 4DVAR
	## Downloaded from git tagged releases
	## WRFPLUS is built within the WRF git folder
	## Does not include RTTOV Libarary for radiation data.  If wanted will need to install library then reconfigure
	##Note: if you intend to run both 3DVAR and 4DVAR experiments, it is not necessary to compile the code twice.
	#Option 8 for intel and distribunted memory
	########################################################################
	cd ${WRF_FOLDER}/Downloads
	mkdir ${WRF_FOLDER}/WRFPLUS
	tar -xvzf WRF-${WRF_VERSION}.tar.gz -C ${WRF_FOLDER}/WRFPLUS

	# If statment for changing folder name
	if [ -d "${WRF_FOLDER}/WRFPLUS/WRF" ]; then
		mv -f ${WRF_FOLDER}/WRFPLUS/WRF ${WRF_FOLDER}/WRFPLUS/WRFV${WRF_VERSION}
	fi

	cd ${WRF_FOLDER}/WRFPLUS/WRFV${WRF_VERSION}
	mv * ${WRF_FOLDER}/WRFPLUS
	cd ${WRF_FOLDER}/WRFPLUS
	rm -rf WRFV${WRF_VERSION}/
	export NETCDF=$DIR/NETCDF
	export HDF5=$DIR/grib2
	export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH
	./clean -a

	if [ ${auto_config} -eq 1 ]; then
		echo 8 | ./configure wrfplus 2>&1 | tee configure.log #Option 8 for intel and distribunted memory
	else
		./configure wrfplus 2>&1 | tee configure.log #Option 8 for intel and distribunted memory
	fi
	echo " "

	sed -i '169s|mpif90 -f90=$(SFC)|mpiifort|g' ${WRF_FOLDER}/WRFPLUS/configure.wrf
	sed -i '170s|mpicc -cc=$(SCC)|mpiicc|g' ${WRF_FOLDER}/WRFPLUS/configure.wrf
	sed -i '177s|-w -O3|-diag-disable=10441 -w -O3|g' ${WRF_FOLDER}/WRFPLUS/configure.wrf

	./compile -j $CPU_HALF_EVEN wrfplus 2>&1 | tee wrfplus1.compile.log

	export WRFPLUS_DIR=${WRF_FOLDER}/WRFPLUS

	echo " "

	# IF statement to check that all files were created.
	cd ${WRF_FOLDER}/WRFPLUS/main
	n=$(ls ./wrfplus.exe | wc -l)
	if (($n == 1)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WRF Plus 4DVAR. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		cd ${WRF_FOLDER}/WRFPLUS/
		./compile -j $CPU_HALF_EVEN wrfplus 2>&1 | tee compile.wrfplus2.log
		cd ${WRF_FOLDER}/WRFPLUS/main
		n=$(ls ./wrfplus.exe | wc -l)
		if (($n == 1)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WRF Plus 4DVAR. I am going to wait for 5 seconds only ..."
		else
			echo "Missing one or more expected files."
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "

	############################WRFDA 4DVAR###############################
	## WRFDA v${WPS_VERSION} 4DVAR
	## Downloaded from git tagged releases
	## WRFDA is built within the WRFPLUS folder
	## Does not include RTTOV Libarary for radiation data.  If wanted will need to install library then reconfigure
	##Note: if you intend to run both 3DVAR and 4DVAR experiments, it is not necessary to compile the code twice.
	#Option 8 for intel and distribunted memory
	########################################################################
	cd ${WRF_FOLDER}/Downloads
	tar -xvzf WRF-${WRF_VERSION}.tar.gz -C ${WRF_FOLDER}/WRFDA

	# If statment for changing folder name
	if [ -d "${WRF_FOLDER}/WRFDA/WRF" ]; then
		mv -f ${WRF_FOLDER}/WRFDA/WRF ${WRF_FOLDER}/WRFDA/WRFV${WRF_VERSION}
	fi

	cd ${WRF_FOLDER}/WRFDA/WRFV${WRF_VERSION}
	mv * ${WRF_FOLDER}/WRFDA
	cd ${WRF_FOLDER}/WRFDA
	rm -rf WRFV${WRF_VERSION}/
	export NETCDF=$DIR/NETCDF
	export HDF5=$DIR/grib2
	export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH
	export WRFPLUS_DIR=${WRF_FOLDER}/WRFPLUS
	./clean -a

	if [ ${auto_config} -eq 1 ]; then
		echo 8 | ./configure 4dvar 2>&1 | tee configure.log #Option 8 for intel and distribunted memory
	else
		./configure 4dvar 2>&1 | tee configure.log #Option 8 for intel and distribunted memory
	fi
	echo " "

	sed -i '169s|mpif90 -f90=$(SFC)|mpiifort|g' ${WRF_FOLDER}/WRFDA/configure.wrf
	sed -i '170s|mpicc -cc=$(SCC)|mpiicc|g' ${WRF_FOLDER}/WRFDA/configure.wrf
	sed -i '177s|-w -O3|-diag-disable=10441 -w -O3|g' ${WRF_FOLDER}/WRFDA/configure.wrf
	./compile all_wrfvar 2>&1 | tee wrfda.compile.log
	echo " "

	# IF statement to check that all files were created.
	cd ${WRF_FOLDER}/WRFDA/var/da
	n=$(ls ./*.exe | wc -l)
	cd ${WRF_FOLDER}/WRFDA/var/obsproc/src
	m=$(ls ./*.exe | wc -l)
	if ((($n == 43) && ($m == 1))); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WRFDA-4DVAR. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		cd ${WRF_FOLDER}/WRFDA
		./compile -j $CPU_HALF_EVEN all_wrfvar 2>&1 | tee compile.chem.wrfvar2.log
		cd ${WRF_FOLDER}/WRFDA/var/da
		n=$(ls ./*.exe | wc -l)
		cd ${WRF_FOLDER}/WRFDA/var/obsproc/src
		m=$(ls ./*.exe | wc -l)
		if ((($n == 43) && ($m == 1))); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WRFDA. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi
	echo " "

	######################## WPS Domain Setup Tools ########################
	## DomainWizard
	cd ${WRF_FOLDER}/Downloads
	wget -c http://esrl.noaa.gov/gsd/wrfportal/domainwizard/WRFDomainWizard.zip
	mkdir ${WRF_FOLDER}/WRFDomainWizard
	unzip WRFDomainWizard.zip -d ${WRF_FOLDER}/WRFDomainWizard
	chmod +x ${WRF_FOLDER}/WRFDomainWizard/run_DomainWizard

	echo " "
	######################## WPF Portal Setup Tools ########################
	## WRFPortal
	cd ${WRF_FOLDER}/Downloads
	wget -c https://esrl.noaa.gov/gsd/wrfportal/portal/wrf-portal.zip
	mkdir ${WRF_FOLDER}/WRFPortal
	unzip wrf-portal.zip -d ${WRF_FOLDER}/WRFPortal
	chmod +x ${WRF_FOLDER}/WRFPortal/runWRFPortal

	echo " "

	######################## Static Geography Data inc/ Optional ####################
	# http://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	# These files are large so if you only need certain ones comment the others off
	# All files downloaded and untarred is 200GB
	# https://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	#################################################################################
	cd ${WRF_FOLDER}/Downloads
	mkdir ${WRF_FOLDER}/GEOG
	mkdir ${WRF_FOLDER}/GEOG/WPS_GEOG

	echo " "
	echo "Mandatory WRF Preprocessing System (WPS) Geographical Input Data Mandatory Fields Downloads"
	echo " "
	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_high_res_mandatory.tar.gz
	tar -xvzf geog_high_res_mandatory.tar.gz -C ${WRF_FOLDER}/GEOG/

	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_low_res_mandatory.tar.gz
	tar -xvzf geog_low_res_mandatory.tar.gz -C ${WRF_FOLDER}/GEOG/
	mv ${WRF_FOLDER}/GEOG/WPS_GEOG_LOW_RES/ ${WRF_FOLDER}/GEOG/WPS_GEOG

	if [ ${WPS_Specific_Applications} -eq 1 ]; then
		echo " "
		echo " WPS Geographical Input Data Mandatory for Specific Applications"
		echo " "

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_thompson28_chem.tar.gz
		tar -xvzf geog_thompson28_chem.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_noahmp.tar.gz
		tar -xvzf geog_noahmp.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/irrigation.tar.gz
		tar -xvzf irrigation.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_px.tar.gz
		tar -xvzf geog_px.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_urban.tar.gz
		tar -xvzf geog_urban.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_ssib.tar.gz
		tar -xvzf geog_ssib.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/lake_depth.tar.bz2
		tar -xvf lake_depth.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/topobath_30s.tar.bz2
		tar -xvf topobath_30s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/gsl_gwd.tar.bz2
		tar -xvf gsl_gwd.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG
	fi

	if [ ${Optional_GEOG} -eq 1 ]; then
		echo " "
		echo "Optional WPS Geographical Input Data"
		echo " "

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_older_than_2000.tar.gz
		tar -xvzf geog_older_than_2000.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s_with_lakes.tar.gz
		tar -xvzf modis_landuse_20class_15s_with_lakes.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_alt_lsm.tar.gz
		tar -xvzf geog_alt_lsm.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/nlcd2006_ll_9s.tar.bz2
		tar -xvf nlcd2006_ll_9s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/updated_Iceland_LU.tar.gz
		tar -xvf updated_Iceland_LU.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s.tar.bz2
		tar -xvf modis_landuse_20class_15s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG
	fi

fi

if [ "$macos_64bit_GNU" = "1" ] && [ "$WRF_PICK" = "1" ] && [ "$MAC_CHIP" = "Intel" ]; then

	#############################basic package managment############################
sleep 1
brew install autoconf
sleep 1
brew install bison
sleep 1
brew install byacc
sleep 1
brew install cmake
sleep 1
brew install curl
sleep 1
brew install flex
sleep 1
brew install gdal
sleep 1
brew install gedit
sleep 1
brew install git
sleep 1
brew install gnu-sed
sleep 1
brew install imagemagick
sleep 1
brew install java
sleep 1
brew install ksh
sleep 1
brew install libtool
sleep 1
brew install m4
sleep 1
brew install make
sleep 1
brew install python@3.10
sleep 1
brew install tcsh
sleep 1
brew install wget
sleep 1
brew install xauth
sleep 1
brew install xorgproto
sleep 1
brew install xorgrgb
sleep 1
brew install xquartz

export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
export PATH=/usr/local/bin:$PATH

	##############################Directory Listing############################

	export HOME=$(
		cd
		pwd
	)
	mkdir $HOME/WRF
	export WRF_FOLDER=$HOME/WRF
	cd ${WRF_FOLDER}/
	mkdir Downloads
	mkdir WRFPLUS
	mkdir WRFDA
	mkdir Libs
	export DIR=${WRF_FOLDER}/Libs
	mkdir -p Libs/grib2
	mkdir -p Libs/NETCDF
	mkdir -p Tests/Environment
	mkdir -p Tests/Compatibility

	#############################Core Management####################################
	export CPU_CORE=$(sysctl -n hw.ncpu) # number of available threads on system
	export CPU_6CORE="6"
	export CPU_HALF=$(($CPU_CORE / 2))
	#1/2 of availble cores on system
	export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))
	#Forces CPU cores to even number to avoid partial core export. ie 7 cores would be 3.5 cores.

	if [ $CPU_CORE -le $CPU_6CORE ]; then #If statement for low core systems.  Forces computers to only use 1 core if there are 4 cores or less on the system.
		export CPU_HALF_EVEN="2"
	else
		export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))
	fi

	echo "##########################################"
	echo "Number of Threads being used $CPU_HALF_EVEN"
	echo "##########################################"
	echo " "

	##############################Downloading Libraries############################

	cd ${WRF_FOLDER}/Downloads
	wget -c https://github.com/madler/zlib/archive/refs/tags/v$Zlib_Version.tar.gz
	wget -c https://github.com/HDFGroup/hdf5/archive/refs/tags/hdf5-$HDF5_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-c/archive/refs/tags/v$Netcdf_C_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-fortran/archive/refs/tags/v$Netcdf_Fortran_Version.tar.gz
	wget -c https://download.sourceforge.net/libpng/libpng-$Libpng_Version.tar.gz
	wget -c https://www.ece.uvic.ca/~frodo/jasper/software/jasper-$Jasper_Version.zip
	wget -c https://github.com/pmodels/mpich/releases/download/v$Mpich_Version/mpich-$Mpich_Version.tar.gz
	wget -c https://parallel-netcdf.github.io/Release/pnetcdf-$Pnetcdf_Version.tar.gz


	echo " "

	#############################Compilers############################

	#Symlink to avoid clang conflicts with compilers
	#default gcc path /usr/bin/gcc
	#default homebrew path /usr/local/bin

	echo $PASSWD | sudo -S ln -sf /usr/local/bin/gcc-12 /usr/local/bin/gcc
	echo $PASSWD | sudo -S ln -sf /usr/local/bin/g++-12 /usr/local/bin/g++
	echo $PASSWD | sudo -S ln -sf /usr/local/bin/gfortran-12 /usr/local/bin/gfortran
	echo $PASSWD | sudo -S ln -sf /usr/local/bin/python3.10 /usr/local/bin/python3

	export CC=gcc
	export CXX=g++
	export FC=gfortran
	export F77=gfortran
	export CFLAGS="-fPIC -fPIE -Wno-implicit-function-declaration -Wall"

	echo " "

	#IF statement for GNU compiler issue
	export GCC_VERSION=$(gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		export fallow_argument=-fallow-argument-mismatch
		export boz_argument=-fallow-invalid-boz
	else
		export fallow_argument=
		export boz_argument=
	fi

	export FFLAGS="$fallow_argument -m64"
	export FCFLAGS="$fallow_argument -m64"

	echo "##########################################"
	echo "FFLAGS = $FFLAGS"
	echo "FCFLAGS = $FCFLAGS"
	echo "CFLAGS = $CFLAGS"
	echo "##########################################"

	echo " "

	#############################zlib############################
	#Uncalling compilers due to comfigure issue with zlib1.2.12
	#With CC & CXX definied ./configure uses different compiler Flags

	cd ${WRF_FOLDER}/Downloads
	tar -xvzf v$Zlib_Version.tar.gz
	cd zlib-$Zlib_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log
	./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "

	##############################MPICH############################
	cd ${WRF_FOLDER}/Downloads
	tar -xvzf mpich-$Mpich_Version.tar.gz
	cd mpich-$Mpich_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	F90= ./configure --prefix=$DIR/MPICH --with-device=ch3 FFLAGS="$fallow_argument -m64" FCFLAGS="$fallow_argument -m64" 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee install.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PATH=$DIR/MPICH/bin:$PATH

	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx

	echo " "

	#############################libpng############################
	cd ${WRF_FOLDER}/Downloads
	export LDFLAGS=-L$DIR/grib2/lib
	export CPPFLAGS=-I$DIR/grib2/include
	tar -xvzf libpng-$Libpng_Version.tar.gz
	cd libpng-$Libpng_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "
	#############################JasPer############################

	cd ${WRF_FOLDER}/Downloads
	unzip jasper-$Jasper_Version.zip
	cd jasper-$Jasper_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	export JASPERLIB=$DIR/grib2/lib
	export JASPERINC=$DIR/grib2/include

	echo " "
	#############################hdf5 library for netcdf4 functionality############################

	cd ${WRF_FOLDER}/Downloads
	tar -xvzf hdf5-$HDF5_Version.tar.gz
	cd hdf5-hdf5-$HDF5_Version
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 --with-zlib=$DIR/grib2 --enable-hl --enable-fortran --enable-parallel 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export HDF5=$DIR/grib2
	export PHDF5=$DIR/grib2
	export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH

	echo " "

	#############################Install Parallel-netCDF##############################
	#Make file created with half of available cpu cores
	#Hard path for MPI added
	##################################################################################
	cd ${WRF_FOLDER}/Downloads
	tar -xvzf pnetcdf-$Pnetcdf_Version.tar.gz
	cd pnetcdf-$Pnetcdf_Version
	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx
	autoreconf -i -f 2>&1 | tee autoreconf.log
	./configure --prefix=$DIR/grib2 --enable-shared --enable-static 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PNETCDF=$DIR/grib2

	echo " "

	##############################Install NETCDF C Library############################
	cd ${WRF_FOLDER}/Downloads
	tar -xzvf v$Netcdf_C_Version.tar.gz
	cd netcdf-c-$Netcdf_C_Version/
	export CPPFLAGS=-I$DIR/grib2/include
	export LDFLAGS=-L$DIR/grib2/lib
	export LIBS="-lhdf5_hl -lhdf5 -lz -lcurl -lgfortran -lgcc -lm -ldl -lpnetcdf"
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --disable-dap --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-pnetcdf --enable-cdf5 --enable-parallel-tests 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PATH=$DIR/NETCDF/bin:$PATH
	export NETCDF=$DIR/NETCDF
	echo " "

	##############################NetCDF fortran library############################
	cd ${WRF_FOLDER}/Downloads
	tar -xvzf v$Netcdf_Fortran_Version.tar.gz
	cd netcdf-fortran-$Netcdf_Fortran_Version/
	export LD_LIBRARY_PATH=$DIR/NETCDF/lib:$LD_LIBRARY_PATH
	export CPPFLAGS="-I$DIR/NETCDF/include -I$DIR/grib2/include"
	export LDFLAGS="-L$DIR/NETCDF/lib -L$DIR/grib2/lib"
	export LIBS="-lnetcdf -lpnetcdf -lcurl -lhdf5_hl -lhdf5 -lz -lm -ldl -lgcc -lgfortran"
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-parallel-tests --enable-hdf5 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "

	#################################### System Environment Tests ##############
	mkdir -p ${WRF_FOLDER}/Tests/Environment
	mkdir -p ${WRF_FOLDER}/Tests/Compatibility

	cd ${WRF_FOLDER}/Downloads
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_NETCDF_MPI_tests.tar
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_tests.tar

	tar -xvf Fortran_C_tests.tar -C ${WRF_FOLDER}/Tests/Environment
	tar -xvf Fortran_C_NETCDF_MPI_tests.tar -C ${WRF_FOLDER}/Tests/Compatibility
	export one="1"
	echo " "
	############## Testing Environment #####

	cd ${WRF_FOLDER}/Tests/Environment

	echo " "
	echo " "
	echo "Environment Testing "
	echo "Test 1"
	$FC TEST_1_fortran_only_fixed.f
	./a.out | tee env_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 1 Passed"
	else
		echo "Environment Compiler Test 1 Failed"
		exit
	fi
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 2"
	$FC TEST_2_fortran_only_free.f90
	./a.out | tee env_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 2 Passed"
	else
		echo "Environment Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 3"
	$CC TEST_3_c_only.c
	./a.out | tee env_test3.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test3.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 3 Passed"
	else
		echo "Environment Compiler Test 3 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 4"
	$CC -c -m64 TEST_4_fortran+c_c.c
	$FC -c -m64 TEST_4_fortran+c_f.f90
	$FC -m64 TEST_4_fortran+c_f.o TEST_4_fortran+c_c.o
	./a.out | tee env_test4.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test4.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 4 Passed"
	else
		echo "Environment Compiler Test 4 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	############## Testing Environment #####

	cd ${WRF_FOLDER}/Tests/Compatibility

	cp ${NETCDF}/include/netcdf.inc .

	echo " "
	echo " "
	echo "Library Compatibility Tests "
	echo "Test 1"
	$FC -c 01_fortran+c+netcdf_f.f
	$CC -c 01_fortran+c+netcdf_c.c
	$FC 01_fortran+c+netcdf_f.o 01_fortran+c+netcdf_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	./a.out | tee comp_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 1 Passed"
	else
		echo "Compatibility Compiler Test 1 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "

	echo "Test 2"
	$MPIFC -c 02_fortran+c+netcdf+mpi_f.f
	$MPICC -c 02_fortran+c+netcdf+mpi_c.c
	$MPIFC 02_fortran+c+netcdf+mpi_f.o \
		02_fortran+c+netcdf+mpi_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	$DIR/MPICH/bin/mpirun ./a.out | tee comp_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 2 Passed"
	else
		echo "Compatibility Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."
	echo " "

	echo " All tests completed and passed"
	echo " "

	#Installing Miniconda3 to WRF directory and updating libraries
	pip install --upgrade --force-reinstall zstandard
	pip install --upgrade --force-reinstall zstd
	pip3 install --upgrade --force-reinstall zstandard
	pip3 install --upgrade --force-reinstall zstd
	export Miniconda_Install_DIR=${WRF_FOLDER}/miniconda3

	mkdir -p $Miniconda_Install_DIR

	wget -c https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O $Miniconda_Install_DIR/miniconda.sh
	bash $Miniconda_Install_DIR/miniconda.sh -b -u -p $Miniconda_Install_DIR

	rm -rf $Miniconda_Install_DIR/miniconda.sh

	export PATH=$WRFHYDRO_FOLDER/miniconda3/bin:$PATH

	source $Miniconda_Install_DIR/etc/profile.d/conda.sh

	$Miniconda_Install_DIR/bin/conda init bash
	$Miniconda_Install_DIR/bin/conda init zsh
	$Miniconda_Install_DIR/bin/conda init tcsh
	$Miniconda_Install_DIR/bin/conda init xonsh
	$Miniconda_Install_DIR/bin/conda init powershell

	conda config --add channels conda-forge
	conda config --set auto_activate_base false
	conda update -n root --all -y

	echo " "

	#Installing NCL via Conda
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda init bash
	conda activate base
	conda create -n ncl_stable -c conda-forge ncl -y
	conda activate ncl_stable

	conda deactivate
	conda deactivate
	conda deactivate
	echo " "




	##################### WRF Python           ##################
	########### WRf-Python compiled via Conda  ##################
	########### This is the preferred method by NCAR      ##################
	##### https://wrf-python.readthedocs.io/en/latest/installation.html  ##################
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
conda env create -f $HOME/WRF-MOSIT/wrf-python-stable.yml

	######################### Climate Data Operators ############
	######################### CDO compiled via Conda ###########
	####################### This is the preferred method #######
	################### https://bairdlangenbrunner.github.io/python-for-climate-scientists/conda/setting-up-conda-environments.html #######################

	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda init bash
	conda activate base
	conda create --name cdo_stable -y
	source activate cdo_stable
	conda install -c conda-forge cdo -y
	conda update --all -y
	conda deactivate
	conda deactivate
	conda deactivate

	echo " "

	################################## QGIS #####################################
	#QGIS (Quantum Geographic Information System) is a free and open-source platform that allows users to
	#analyze, view, and edit geospatial data. It supports both vector and raster layers, as well as various #web services, and is extensible through community-developed plugins. Key features include map
	#creation, spatial analysis, and data management.
	#############################################################################

	conda env create -f $HOME/WRF-MOSIT/qgis.3.28.8.yml

	echo " "

	############################ WRF ${WPS_VERSION}  #################################
	## WRF v${WPS_VERSION}
	## Downloaded from git tagged releases
	# option 17, option 1 for gfortran and distributed memory w/basic nesting
	# large file support enable with WRFiO_NCD_LARGE_FILE_SUPPORT=1
	########################################################################

	export WRFIO_NCD_LARGE_FILE_SUPPORT=1
	cd ${WRF_FOLDER}/Downloads
	wget -c https://github.com/wrf-model/WRF/releases/download/v${WRF_VERSION}/v${WRF_VERSION}.tar.gz -O WRF-${WRF_VERSION}.tar.gz
	tar -xvzf WRF-${WRF_VERSION}.tar.gz -C ${WRF_FOLDER}/

	# If statment for changing folder name
	if [ -d "${WRF_FOLDER}/WRF" ]; then
		mv -f ${WRF_FOLDER}/WRF ${WRF_FOLDER}/WRFV${WRF_VERSION}
	fi

	cd ${WRF_FOLDER}/WRFV${WRF_VERSION}

	./clean

	if [ ${auto_config} -eq 1 ]; then
		sed -i'' -e '443s/.*/  $response = "17 \\n";/g' ${WRF_FOLDER}/WRFV${WRF_VERSION}/arch/Config.pl # Answer for compiler choice
		sed -i'' -e '909s/.*/  $response = "1 \\n";/g' ${WRF_FOLDER}/WRFV${WRF_VERSION}/arch/Config.pl  #Answer for basic nesting
		./configure 2>&1 | tee configure.log
	else
		./configure 2>&1 | tee configure.log #Option 17 gfortran compiler with distributed memory option 1 for basic nesting
	fi

	./compile em_real 2>&1 | tee compile.wrf.log

	export WRF_DIR=${WRF_FOLDER}/WRFV${WRF_VERSION}

	# IF statement to check that all files were created.
	cd ${WRF_FOLDER}/WRFV${WRF_VERSION}/main
	n=$(ls ./*.exe | wc -l)
	if (($n >= 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		cd ${WRF_FOLDER}/WRFV${WRF_VERSION}
		./compile -j $CPU_HALF_EVEN em_real 2>&1 | tee compile.wrf2.log
		cd ${WRF_FOLDER}/WRFV${WRF_VERSION}/main
		n=$(ls ./*.exe | wc -l)
		if (($n >= 3)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi
	echo " "
	############################WPSV${WPS_VERSION}#####################################
	## WPS v${WPS_VERSION}
	## Downloaded from git tagged releases
	#Option 3 for gfortran and distributed memory
	########################################################################

	cd ${WRF_FOLDER}/Downloads
	wget -c https://github.com/wrf-model/WPS/archive/refs/tags/v${WPS_VERSION}.tar.gz -O WPS-${WPS_VERSION}.tar.gz
	tar -xvzf WPS-${WPS_VERSION}.tar.gz -C ${WRF_FOLDER}/
	cd ${WRF_FOLDER}/WPS-${WPS_VERSION}
	./clean -a

	if [ ${auto_config} -eq 1 ]; then
		echo 19 | ./configure 2>&1 | tee configure.log #Option 19 for gfortran and distributed memory
	else
		./configure 2>&1 | tee configure.log #Option 19 gfortran compiler with distributed memory
	fi

	./compile 2>&1 | tee compile.wrf.log

	# IF statement to check that all files were created.
	cd ${WRF_FOLDER}/WPS-${WPS_VERSION}
	n=$(ls ./*.exe | wc -l)
	if (($n == 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		./compile 2>&1 | tee compile.wps2.log
		cd ${WRF_FOLDER}/WPS-${WPS_VERSION}
		n=$(ls ./*.exe | wc -l)
		if (($n == 3)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi
	echo " "

	############################WRFPLUS 4DVAR###############################
	## WRFPLUS v${WPS_VERSION} 4DVAR
	## Downloaded from git tagged releases
	## WRFPLUS is built within the WRF git folder
	## Does not include RTTOV Libarary for radiation data.  If wanted will need to install library then reconfigure
	##Note: if you intend to run both 3DVAR and 4DVAR experiments, it is not necessary to compile the code twice.
	#Option 10 for gfortran/gcc and distribunted memory
	########################################################################

	cd ${WRF_FOLDER}/Downloads
	tar -xvzf WRF-${WRF_VERSION}.tar.gz -C ${WRF_FOLDER}/WRFPLUS

	# If statment for changing folder name
	if [ -d "${WRF_FOLDER}/WRFPLUS/WRF" ]; then
		mv -f ${WRF_FOLDER}/WRFPLUS/WRF ${WRF_FOLDER}/WRFPLUS/WRFV${WRF_VERSION}
	fi

	cd ${WRF_FOLDER}/WRFPLUS/WRFV${WRF_VERSION}
	mv * ${WRF_FOLDER}/WRFPLUS
	cd ${WRF_FOLDER}/WRFPLUS
	rm -rf WRFV${WRF_VERSION}/
	export NETCDF=$DIR/NETCDF
	export HDF5=$DIR/grib2
	export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH

	if [ ${auto_config} -eq 1 ]; then
		echo 10 | ./configure wrfplus 2>&1 | tee configure.log #Option 10 for gfortran/gcc and distribunted memory
	else
		./configure wrfplus 2>&1 | tee configure.log #Option 10 for gfortran/gcc and distribunted memory
	fi

	./compile wrfplus 2>&1 | tee compile.wrfplus.log
	export WRFPLUS_DIR=${WRF_FOLDER}/WRFPLUS

	# IF statement to check that all files were created.
	cd ${WRF_FOLDER}/WRFPLUS/main
	n=$(ls ./wrfplus.exe | wc -l)
	if (($n == 1)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WRF Plus 4DVAR. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		cd ${WRF_FOLDER}/WRFPLUS/
		./compile -j $CPU_HALF_EVEN wrfplus 2>&1 | tee compile.wrfplus2.log
		cd ${WRF_FOLDER}/WRFPLUS/main
		n=$(ls ./wrfplus.exe | wc -l)
		if (($n == 1)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WRF Plus 4DVAR. I am going to wait for 5 seconds only ..."
		else
			echo "Missing one or more expected files."
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "
	############################WRFDA 4DVAR###############################
	## WRFDA v${WPS_VERSION} 4DVAR
	## Downloaded from git tagged releases
	## WRFDA is built within the WRFPLUS folder
	## Does not include RTTOV Libarary for radiation data.  If wanted will need to install library then reconfigure
	##Note: if you intend to run both 3DVAR and 4DVAR experiments, it is not necessary to compile the code twice.
	#Option 10 for gfortran/clang and distribunted memory
	########################################################################

	cd ${WRF_FOLDER}/Downloads
	tar -xvzf WRF-${WRF_VERSION}.tar.gz -C ${WRF_FOLDER}/WRFDA

	# If statment for changing folder name
	if [ -d "${WRF_FOLDER}/WRFDA/WRF" ]; then
		mv -f ${WRF_FOLDER}/WRFDA/WRF ${WRF_FOLDER}/WRFDA/WRFV${WRF_VERSION}
	fi

	cd ${WRF_FOLDER}/WRFDA/WRFV${WRF_VERSION}
	mv * ${WRF_FOLDER}/WRFDA
	cd ${WRF_FOLDER}/WRFDA
	rm -rf WRFV${WRF_VERSION}/
	export NETCDF=$DIR/NETCDF
	export HDF5=$DIR/grib2
	export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH
	export WRFPLUS_DIR=${WRF_FOLDER}/WRFPLUS

	if [ ${auto_config} -eq 1 ]; then
		echo 10 | ./configure 4dvar 2>&1 | tee configure.log #Option 18 for gfortran/gcc and distribunted memory
	else
		./configure 4dvar 2>&1 | tee configure.log #Option 18 for gfortran/gcc and distribunted memory
	fi

	./compile all_wrfvar 2>&1 | tee compile.wrf4dvar.log

	# IF statement to check that all files were created.
	cd ${WRF_FOLDER}/WRFDA/var/da
	n=$(ls ./*.exe | wc -l)
	cd ${WRF_FOLDER}/WRFDA/var/obsproc/src
	m=$(ls ./*.exe | wc -l)
	if ((($n == 43) && ($m == 1))); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WRFDA. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		cd ${WRF_FOLDER}/WRFDA
		./compile -j $CPU_HALF_EVEN all_wrfvar 2>&1 | tee compile.chem.wrfvar2.log
		cd ${WRF_FOLDER}/WRFDA/var/da
		n=$(ls ./*.exe | wc -l)
		cd ${WRF_FOLDER}/WRFDA/var/obsproc/src
		m=$(ls ./*.exe | wc -l)
		if ((($n == 43) && ($m == 1))); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WRFDA. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "

	######################## WPS Domain Setup Tools ########################
	## DomainWizard

	cd ${WRF_FOLDER}/Downloads
	wget http://esrl.noaa.gov/gsd/wrfportal/domainwizard/WRFDomainWizard.zip
	mkdir ${WRF_FOLDER}/WRFDomainWizard
	unzip WRFDomainWizard.zip -d ${WRF_FOLDER}/WRFDomainWizard
	chmod +x ${WRF_FOLDER}/WRFDomainWizard/run_DomainWizard

	echo " "
	######################## WPF Portal Setup Tools ########################
	## WRFPortal
	cd ${WRF_FOLDER}/Downloads
	wget https://esrl.noaa.gov/gsd/wrfportal/portal/wrf-portal.zip
	mkdir ${WRF_FOLDER}/WRFPortal
	unzip wrf-portal.zip -d ${WRF_FOLDER}/WRFPortal
	chmod +x ${WRF_FOLDER}/WRFPortal/runWRFPortal

	echo " "
	######################## Static Geography Data inc/ Optional ####################
	# http://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	# These files are large so if you only need certain ones comment the others off
	# All files downloaded and untarred is 200GB
	# https://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	#################################################################################
	cd ${WRF_FOLDER}/Downloads
	mkdir ${WRF_FOLDER}/GEOG
	mkdir ${WRF_FOLDER}/GEOG/WPS_GEOG

	echo " "
	echo "Mandatory WRF Preprocessing System (WPS) Geographical Input Data Mandatory Fields Downloads"
	echo " "
	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_high_res_mandatory.tar.gz
	tar -xvzf geog_high_res_mandatory.tar.gz -C ${WRF_FOLDER}/GEOG/

	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_low_res_mandatory.tar.gz
	tar -xvzf geog_low_res_mandatory.tar.gz -C ${WRF_FOLDER}/GEOG/
	mv ${WRF_FOLDER}/GEOG/WPS_GEOG_LOW_RES/ ${WRF_FOLDER}/GEOG/WPS_GEOG

	if [ ${WPS_Specific_Applications} -eq 1 ]; then
		echo " "
		echo " WPS Geographical Input Data Mandatory for Specific Applications"
		echo " "

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_thompson28_chem.tar.gz
		tar -xvzf geog_thompson28_chem.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_noahmp.tar.gz
		tar -xvzf geog_noahmp.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/irrigation.tar.gz
		tar -xvzf irrigation.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_px.tar.gz
		tar -xvzf geog_px.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_urban.tar.gz
		tar -xvzf geog_urban.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_ssib.tar.gz
		tar -xvzf geog_ssib.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/lake_depth.tar.bz2
		tar -xvf lake_depth.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/topobath_30s.tar.bz2
		tar -xvf topobath_30s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/gsl_gwd.tar.bz2
		tar -xvf gsl_gwd.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

	fi

	if [ ${Optional_GEOG} -eq 1 ]; then

		echo " "
		echo "Optional WPS Geographical Input Data"
		echo " "

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_older_than_2000.tar.gz
		tar -xvzf geog_older_than_2000.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s_with_lakes.tar.gz
		tar -xvzf modis_landuse_20class_15s_with_lakes.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_alt_lsm.tar.gz
		tar -xvzf geog_alt_lsm.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/nlcd2006_ll_9s.tar.bz2
		tar -xvf nlcd2006_ll_9s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/updated_Iceland_LU.tar.gz
		tar -xvf updated_Iceland_LU.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s.tar.bz2
		tar -xvf modis_landuse_20class_15s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

	fi

fi

if [ "$macos_64bit_GNU" = "1" ] && [ "$WRF_PICK" = "1" ] && [ "$MAC_CHIP" = "ARM" ]; then
	#############################basic package managment############################
sleep 1
brew install autoconf
sleep 1
brew install bison
sleep 1
brew install byacc
sleep 1
brew install cmake
sleep 1
brew install curl
sleep 1
brew install flex
sleep 1
brew install gdal
sleep 1
brew install gedit
sleep 1
brew install git
sleep 1
brew install gnu-sed
sleep 1
brew install imagemagick
sleep 1
brew install java
sleep 1
brew install ksh
sleep 1
brew install libtool
sleep 1
brew install m4
sleep 1
brew install make
sleep 1
brew install python@3.10
sleep 1
brew install tcsh
sleep 1
brew install wget
sleep 1
brew install xauth
sleep 1
brew install xorgproto
sleep 1
brew install xorgrgb
sleep 1
brew install xquartz

export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
export PATH=/usr/local/bin:$PATH

	##############################Directory Listing############################

	export HOME=$(
		cd
		pwd
	)
	mkdir $HOME/WRF
	export WRF_FOLDER=$HOME/WRF
	cd ${WRF_FOLDER}/
	mkdir Downloads
	mkdir WRFPLUS
	mkdir WRFDA
	mkdir Libs
	export DIR=${WRF_FOLDER}/Libs
	mkdir -p Libs/grib2
	mkdir -p Libs/NETCDF
	mkdir -p Tests/Environment
	mkdir -p Tests/Compatibility

	#############################Core Management####################################
	export CPU_CORE=$(sysctl -n hw.ncpu) # number of available threads on system
	export CPU_6CORE="6"
	export CPU_HALF=$(($CPU_CORE / 2))
	#1/2 of availble cores on system
	export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))
	#Forces CPU cores to even number to avoid partial core export. ie 7 cores would be 3.5 cores.

	if [ $CPU_CORE -le $CPU_6CORE ]; then #If statement for low core systems.  Forces computers to only use 1 core if there are 4 cores or less on the system.
		export CPU_HALF_EVEN="2"
	else
		export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))
	fi

	echo "##########################################"
	echo "Number of Threads being used $CPU_HALF_EVEN"
	echo "##########################################"
	echo " "

	##############################Downloading Libraries############################

	cd ${WRF_FOLDER}/Downloads
	wget -c https://github.com/madler/zlib/archive/refs/tags/v$Zlib_Version.tar.gz
	wget -c https://github.com/HDFGroup/hdf5/archive/refs/tags/hdf5-$HDF5_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-c/archive/refs/tags/v$Netcdf_C_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-fortran/archive/refs/tags/v$Netcdf_Fortran_Version.tar.gz
	wget -c https://download.sourceforge.net/libpng/libpng-$Libpng_Version.tar.gz
	wget -c https://www.ece.uvic.ca/~frodo/jasper/software/jasper-$Jasper_Version.zip
	wget -c https://github.com/pmodels/mpich/releases/download/v$Mpich_Version/mpich-$Mpich_Version.tar.gz
	wget -c https://parallel-netcdf.github.io/Release/pnetcdf-$Pnetcdf_Version.tar.gz


	echo " "

	#############################Compilers############################

	#Symlink to avoid clang conflicts with compilers
	#default gcc path /usr/bin/gcc
	#default homebrew path /usr/local/bin
	echo $PASSWD | sudo -S unlink /opt/homebrew/bin/gfortran
	echo $PASSWD | sudo -S unlink /opt/homebrew/bin/gcc
	echo $PASSWD | sudo -S unlink /opt/homebrew/bin/g++

	source ~./bashrc
	gcc --version
	g++ --version
	gfortran --version

	cd /opt/homebrew/bin

	echo $PASSWD | sudo -S ln -sf gcc-12 gcc
	echo $PASSWD | sudo -S ln -sf g++-12 g++
	echo $PASSWD | sudo -S ln -sf gfortran-12 gfortran

	cd
	source ~/.bashrc
	source ~/.bash_profile
	gcc --version
	g++ --version
	gfortran --version

	export CC=gcc
	export CXX=g++
	export FC=gfortran
	export F77=gfortran
	export CFLAGS="-fPIC -fPIE -Wno-implicit-function-declaration -Wall"

	echo " "

	#IF statement for GNU compiler issue
	export GCC_VERSION=$(gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		export fallow_argument=-fallow-argument-mismatch
		export boz_argument=-fallow-invalid-boz
	else
		export fallow_argument=
		export boz_argument=
	fi

	export FFLAGS="$fallow_argument -m64"
	export FCFLAGS="$fallow_argument -m64"

	echo "##########################################"
	echo "FFLAGS = $FFLAGS"
	echo "FCFLAGS = $FCFLAGS"
	echo "CFLAGS = $CFLAGS"
	echo "##########################################"

	echo " "

	#############################zlib############################
	#Uncalling compilers due to comfigure issue with zlib1.2.12
	#With CC & CXX definied ./configure uses different compiler Flags

	cd ${WRF_FOLDER}/Downloads
	tar -xvzf v$Zlib_Version.tar.gz
	cd zlib-$Zlib_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log
	./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "

	##############################MPICH############################
	cd ${WRF_FOLDER}/Downloads
	tar -xvzf mpich-$Mpich_Version.tar.gz
	cd mpich-$Mpich_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	F90= ./configure --prefix=$DIR/MPICH --with-device=ch3 FFLAGS="$fallow_argument -m64" FCFLAGS="$fallow_argument -m64" 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PATH=$DIR/MPICH/bin:$PATH

	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx

	echo " "

	#############################libpng############################
	cd ${WRF_FOLDER}/Downloads
	export LDFLAGS=-L$DIR/grib2/lib
	export CPPFLAGS=-I$DIR/grib2/include
	tar -xvzf libpng-$Libpng_Version.tar.gz

	cd libpng-$Libpng_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "
	#############################JasPer############################

	cd ${WRF_FOLDER}/Downloads
	unzip jasper-$Jasper_Version.zip
	cd jasper-$Jasper_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	export JASPERLIB=$DIR/grib2/lib
	export JASPERINC=$DIR/grib2/include

	echo " "
	#############################hdf5 library for netcdf4 functionality############################

	cd ${WRF_FOLDER}/Downloads
	tar -xvzf hdf5-$HDF5_Version.tar.gz
	cd hdf5-hdf5-$HDF5_Version
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 --with-zlib=$DIR/grib2 --enable-hl --enable-fortran --enable-parallel 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export HDF5=$DIR/grib2
	export PHDF5=$DIR/grib2
	export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH

	echo " "

	#############################Install Parallel-netCDF##############################
	#Make file created with half of available cpu cores
	#Hard path for MPI added
	##################################################################################
	cd ${WRF_FOLDER}/Downloads
	tar -xvzf pnetcdf-$Pnetcdf_Version.tar.gz
	cd pnetcdf-$Pnetcdf_Version

	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx
	autoreconf -i -f 2>&1 | tee autoreconf.log
	./configure --prefix=$DIR/grib2 --enable-shared --enable-static 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PNETCDF=$DIR/grib2

	echo " "

	##############################Install NETCDF C Library############################
	cd ${WRF_FOLDER}/Downloads
	tar -xzvf v$Netcdf_C_Version.tar.gz
	cd netcdf-c-$Netcdf_C_Version/

	export CPPFLAGS=-I$DIR/grib2/include
	export LDFLAGS=-L$DIR/grib2/lib
	export LIBS="-lhdf5_hl -lhdf5 -lz -lcurl -lgfortran -lgcc -lm -ldl -lpnetcdf"
	autoreconf -i -f 2>&1 | tee autoreconf.log
	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --disable-dap --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-pnetcdf --enable-cdf5 --enable-parallel-tests 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PATH=$DIR/NETCDF/bin:$PATH
	export NETCDF=$DIR/NETCDF
	echo " "

	##############################NetCDF fortran library############################
	cd ${WRF_FOLDER}/Downloads
	tar -xvzf v$Netcdf_Fortran_Version.tar.gz
	cd netcdf-fortran-$Netcdf_Fortran_Version/

	export LD_LIBRARY_PATH=$DIR/NETCDF/lib:$LD_LIBRARY_PATH
	export CPPFLAGS="-I$DIR/NETCDF/include -I$DIR/grib2/include"
	export LDFLAGS="-L$DIR/NETCDF/lib -L$DIR/grib2/lib"
	export LIBS="-lnetcdf -lpnetcdf -lcurl -lhdf5_hl -lhdf5 -lz -lm -ldl -lgcc -lgfortran"
	autoreconf -i -f 2>&1 | tee autoreconf.log
	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-parallel-tests --enable-hdf5 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "

	#################################### System Environment Tests ##############
	mkdir -p ${WRF_FOLDER}/Tests/Environment
	mkdir -p ${WRF_FOLDER}/Tests/Compatibility

	cd ${WRF_FOLDER}/Downloads
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_NETCDF_MPI_tests.tar
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_tests.tar

	tar -xvf Fortran_C_tests.tar -C ${WRF_FOLDER}/Tests/Environment
	tar -xvf Fortran_C_NETCDF_MPI_tests.tar -C ${WRF_FOLDER}/Tests/Compatibility
	export one="1"
	echo " "
	############## Testing Environment #####

	cd ${WRF_FOLDER}/Tests/Environment

	echo " "
	echo " "
	echo "Environment Testing "
	echo "Test 1"
	$FC TEST_1_fortran_only_fixed.f
	./a.out | tee env_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 1 Passed"
	else
		echo "Environment Compiler Test 1 Failed"
		exit
	fi
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 2"
	$FC TEST_2_fortran_only_free.f90
	./a.out | tee env_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 2 Passed"
	else
		echo "Environment Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 3"
	$CC TEST_3_c_only.c
	./a.out | tee env_test3.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test3.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 3 Passed"
	else
		echo "Environment Compiler Test 3 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 4"
	$CC -c -m64 TEST_4_fortran+c_c.c
	$FC -c -m64 TEST_4_fortran+c_f.f90
	$FC -m64 TEST_4_fortran+c_f.o TEST_4_fortran+c_c.o
	./a.out | tee env_test4.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test4.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 4 Passed"
	else
		echo "Environment Compiler Test 4 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	############## Testing Environment #####

	cd ${WRF_FOLDER}/Tests/Compatibility

	cp ${NETCDF}/include/netcdf.inc .

	echo " "
	echo " "
	echo "Library Compatibility Tests "
	echo "Test 1"
	$FC -c 01_fortran+c+netcdf_f.f
	$CC -c 01_fortran+c+netcdf_c.c
	$FC 01_fortran+c+netcdf_f.o 01_fortran+c+netcdf_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	./a.out | tee comp_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 1 Passed"
	else
		echo "Compatibility Compiler Test 1 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "

	echo "Test 2"
	$MPIFC -c 02_fortran+c+netcdf+mpi_f.f
	$MPICC -c 02_fortran+c+netcdf+mpi_c.c
	$MPIFC 02_fortran+c+netcdf+mpi_f.o \
		02_fortran+c+netcdf+mpi_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	$DIR/MPICH/bin/mpirun ./a.out | tee comp_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 2 Passed"
	else
		echo "Compatibility Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."
	echo " "

	echo " All tests completed and passed"
	echo " "

	#Installing Miniconda3 to WRF directory and updating libraries
	pip install --upgrade --force-reinstall zstandard
	pip install --upgrade --force-reinstall zstd
	pip3 install --upgrade --force-reinstall zstandard
	pip3 install --upgrade --force-reinstall zstd
	export Miniconda_Install_DIR=${WRF_FOLDER}/miniconda3

	mkdir -p $Miniconda_Install_DIR

	wget -c https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O $Miniconda_Install_DIR/miniconda.sh
	bash $Miniconda_Install_DIR/miniconda.sh -b -u -p $Miniconda_Install_DIR

	rm -rf $Miniconda_Install_DIR/miniconda.sh

	export PATH=$WRFHYDRO_FOLDER/miniconda3/bin:$PATH

	source $Miniconda_Install_DIR/etc/profile.d/conda.sh

	$Miniconda_Install_DIR/bin/conda init bash
	$Miniconda_Install_DIR/bin/conda init zsh
	$Miniconda_Install_DIR/bin/conda init tcsh
	$Miniconda_Install_DIR/bin/conda init xonsh
	$Miniconda_Install_DIR/bin/conda init powershell

	conda config --add channels conda-forge
	conda config --set auto_activate_base false
	conda update -n root --all -y

	echo " "

	#Installing NCL via Conda
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda init bash
	conda activate base
	conda create -n ncl_stable -c conda-forge ncl -y
	conda activate ncl_stable
	conda update -n ncl_stable --all -y
	conda deactivate
	conda deactivate
	conda deactivate
	echo " "

	##################### WRF Python           ##################
	########### WRf-Python compiled via Conda  ##################
	########### This is the preferred method by NCAR      ##################
	##### https://wrf-python.readthedocs.io/en/latest/installation.html  ##################
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
conda env create -f $HOME/WRF-MOSIT/wrf-python-stable.yml

	######################### Climate Data Operators ############
	######################### CDO compiled via Conda ###########
	####################### This is the preferred method #######
	################### https://bairdlangenbrunner.github.io/python-for-climate-scientists/conda/setting-up-conda-environments.html #######################

	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda init bash
	conda activate base
	conda create --name cdo_stable -y
	source activate cdo_stable
	conda install -c conda-forge cdo -y
	conda update --all -y
	conda deactivate
	conda deactivate
	conda deactivate

	echo " "

	################################## QGIS #####################################
	#QGIS (Quantum Geographic Information System) is a free and open-source platform that allows users to
	#analyze, view, and edit geospatial data. It supports both vector and raster layers, as well as various #web services, and is extensible through community-developed plugins. Key features include map
	#creation, spatial analysis, and data management.
	#############################################################################

	conda env create -f $HOME/WRF-MOSIT/qgis.3.28.8.yml

	echo " "

	############################ WRF ${WPS_VERSION}  #################################
	## WRF v${WPS_VERSION}
	## Downloaded from git tagged releases
	# option 17, option 1 for gfortran and distributed memory w/basic nesting
	# large file support enable with WRFiO_NCD_LARGE_FILE_SUPPORT=1
	########################################################################

	export WRFIO_NCD_LARGE_FILE_SUPPORT=1
	cd ${WRF_FOLDER}/Downloads
	wget -c https://github.com/wrf-model/WRF/releases/download/v${WRF_VERSION}/v${WRF_VERSION}.tar.gz -O WRF-${WRF_VERSION}.tar.gz
	tar -xvzf WRF-${WRF_VERSION}.tar.gz -C ${WRF_FOLDER}/

	# If statment for changing folder name
	if [ -d "${WRF_FOLDER}/WRF" ]; then
		mv -f ${WRF_FOLDER}/WRF ${WRF_FOLDER}/WRFV${WRF_VERSION}
	fi

	cd ${WRF_FOLDER}/WRFV${WRF_VERSION}

	./clean

	if [ ${auto_config} -eq 1 ]; then
		sed -i'' -e '443s/.*/  $response = "17 \\n";/g' ${WRF_FOLDER}/WRFV${WRF_VERSION}/arch/Config.pl # Answer for compiler choice
		sed -i'' -e '909s/.*/  $response = "1 \\n";/g' ${WRF_FOLDER}/WRFV${WRF_VERSION}/arch/Config.pl  #Answer for basic nesting
		./configure 2>&1 | tee configure.log
	else
		./configure 2>&1 | tee configure.log #Option 17 gfortran compiler with distributed memory option 1 for basic nesting
	fi

	./compile em_real 2>&1 | tee compile.wrf.log

	export WRF_DIR=${WRF_FOLDER}/WRFV${WRF_VERSION}

	# IF statement to check that all files were created.
	cd ${WRF_FOLDER}/WRFV${WRF_VERSION}/main
	n=$(ls ./*.exe | wc -l)
	if (($n >= 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		cd ${WRF_FOLDER}/WRFV${WRF_VERSION}
		./compile -j $CPU_HALF_EVEN em_real 2>&1 | tee compile.wrf2.log
		cd ${WRF_FOLDER}/WRFV${WRF_VERSION}/main
		n=$(ls ./*.exe | wc -l)
		if (($n >= 3)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi
	echo " "
	############################WPSV${WPS_VERSION}#####################################
	## WPS v${WPS_VERSION}
	## Downloaded from git tagged releases
	#Option 3 for gfortran and distributed memory
	########################################################################

	cd ${WRF_FOLDER}/Downloads
	wget -c https://github.com/wrf-model/WPS/archive/refs/tags/v${WPS_VERSION}.tar.gz -O WPS-${WPS_VERSION}.tar.gz
	tar -xvzf WPS-${WPS_VERSION}.tar.gz -C ${WRF_FOLDER}/
	cd ${WRF_FOLDER}/WPS-${WPS_VERSION}
	./clean -a

	if [ ${auto_config} -eq 1 ]; then
		echo 19 | ./configure 2>&1 | tee configure.log #Option 19 for gfortran and distributed memory
	else
		./configure 2>&1 | tee configure.log #Option 19 gfortran compiler with distributed memory
	fi

	./compile | tee 2>&1 compile.wrf.log

	# IF statement to check that all files were created.
	cd ${WRF_FOLDER}/WPS-${WPS_VERSION}
	n=$(ls ./*.exe | wc -l)
	if (($n == 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		./compile 2>&1 | tee compile.wps2.log
		cd ${WRF_FOLDER}/WPS-${WPS_VERSION}
		n=$(ls ./*.exe | wc -l)
		if (($n == 3)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi
	echo " "

	############################WRFPLUS 4DVAR###############################
	## WRFPLUS v${WPS_VERSION} 4DVAR
	## Downloaded from git tagged releases
	## WRFPLUS is built within the WRF git folder
	## Does not include RTTOV Libarary for radiation data.  If wanted will need to install library then reconfigure
	##Note: if you intend to run both 3DVAR and 4DVAR experiments, it is not necessary to compile the code twice.
	#Option 10 for gfortran/gcc and distribunted memory
	########################################################################

	cd ${WRF_FOLDER}/Downloads
	tar -xvzf WRF-${WRF_VERSION}.tar.gz -C ${WRF_FOLDER}/WRFPLUS

	# If statment for changing folder name
	if [ -d "${WRF_FOLDER}/WRFPLUS/WRF" ]; then
		mv -f ${WRF_FOLDER}/WRFPLUS/WRF ${WRF_FOLDER}/WRFPLUS/WRFV${WRF_VERSION}
	fi

	cd ${WRF_FOLDER}/WRFPLUS/WRFV${WRF_VERSION}
	mv * ${WRF_FOLDER}/WRFPLUS
	cd ${WRF_FOLDER}/WRFPLUS
	rm -rf WRFV${WRF_VERSION}/
	export NETCDF=$DIR/NETCDF
	export HDF5=$DIR/grib2
	export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH

	if [ ${auto_config} -eq 1 ]; then
		echo 10 | ./configure wrfplus 2>&1 | tee configure.log #Option 10 for gfortran/gcc and distribunted memory
	else
		./configure wrfplus 2>&1 | tee configure.log #Option 10 for gfortran/gcc and distribunted memory
	fi

	./compile wrfplus 2>&1 | tee compile.wrfplus.log
	export WRFPLUS_DIR=${WRF_FOLDER}/WRFPLUS

	# IF statement to check that all files were created.
	cd ${WRF_FOLDER}/WRFPLUS/main
	n=$(ls ./wrfplus.exe | wc -l)
	if (($n == 1)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WRF Plus 4DVAR. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		cd ${WRF_FOLDER}/WRFPLUS/
		./compile -j $CPU_HALF_EVEN wrfplus 2>&1 | tee compile.wrfplus2.log
		cd ${WRF_FOLDER}/WRFPLUS/main
		n=$(ls ./wrfplus.exe | wc -l)
		if (($n == 1)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WRF Plus 4DVAR. I am going to wait for 5 seconds only ..."
		else
			echo "Missing one or more expected files."
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "
	############################WRFDA 4DVAR###############################
	## WRFDA v${WPS_VERSION} 4DVAR
	## Downloaded from git tagged releases
	## WRFDA is built within the WRFPLUS folder
	## Does not include RTTOV Libarary for radiation data.  If wanted will need to install library then reconfigure
	##Note: if you intend to run both 3DVAR and 4DVAR experiments, it is not necessary to compile the code twice.
	#Option 10 for gfortran/clang and distribunted memory
	########################################################################

	cd ${WRF_FOLDER}/Downloads
	tar -xvzf WRF-${WRF_VERSION}.tar.gz -C ${WRF_FOLDER}/WRFDA

	# If statment for changing folder name
	if [ -d "${WRF_FOLDER}/WRFDA/WRF" ]; then
		mv -f ${WRF_FOLDER}/WRFDA/WRF ${WRF_FOLDER}/WRFDA/WRFV${WRF_VERSION}
	fi

	cd ${WRF_FOLDER}/WRFDA/WRFV${WRF_VERSION}
	mv * ${WRF_FOLDER}/WRFDA
	cd ${WRF_FOLDER}/WRFDA
	rm -rf WRFV${WRF_VERSION}/
	export NETCDF=$DIR/NETCDF
	export HDF5=$DIR/grib2
	export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH
	export WRFPLUS_DIR=${WRF_FOLDER}/WRFPLUS

	if [ ${auto_config} -eq 1 ]; then
		echo 10 | ./configure 4dvar 2>&1 | tee configure.log #Option 18 for gfortran/gcc and distribunted memory
	else
		./configure 4dvar 2>&1 | tee configure.log #Option 18 for gfortran/gcc and distribunted memory
	fi

	./compile all_wrfvar 2>&1 | tee compile.wrf4dvar.log

	# IF statement to check that all files were created.
	cd ${WRF_FOLDER}/WRFDA/var/da
	n=$(ls ./*.exe | wc -l)
	cd ${WRF_FOLDER}/WRFDA/var/obsproc/src
	m=$(ls ./*.exe | wc -l)
	if ((($n == 43) && ($m == 1))); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WRFDA. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		cd ${WRF_FOLDER}/WRFDA
		./compile -j $CPU_HALF_EVEN all_wrfvar 2>&1 | tee compile.chem.wrfvar2.log
		cd ${WRF_FOLDER}/WRFDA/var/da
		n=$(ls ./*.exe | wc -l)
		cd ${WRF_FOLDER}/WRFDA/var/obsproc/src
		m=$(ls ./*.exe | wc -l)
		if ((($n == 43) && ($m == 1))); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WRFDA. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "

	######################## WPS Domain Setup Tools ########################
	## DomainWizard

	cd ${WRF_FOLDER}/Downloads
	wget http://esrl.noaa.gov/gsd/wrfportal/domainwizard/WRFDomainWizard.zip
	mkdir ${WRF_FOLDER}/WRFDomainWizard
	unzip WRFDomainWizard.zip -d ${WRF_FOLDER}/WRFDomainWizard
	chmod +x ${WRF_FOLDER}/WRFDomainWizard/run_DomainWizard

	echo " "
	######################## WPF Portal Setup Tools ########################
	## WRFPortal
	cd ${WRF_FOLDER}/Downloads
	wget https://esrl.noaa.gov/gsd/wrfportal/portal/wrf-portal.zip
	mkdir ${WRF_FOLDER}/WRFPortal
	unzip wrf-portal.zip -d ${WRF_FOLDER}/WRFPortal
	chmod +x ${WRF_FOLDER}/WRFPortal/runWRFPortal

	echo " "
	######################## Static Geography Data inc/ Optional ####################
	# http://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	# These files are large so if you only need certain ones comment the others off
	# All files downloaded and untarred is 200GB
	# https://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	#################################################################################
	cd ${WRF_FOLDER}/Downloads
	mkdir ${WRF_FOLDER}/GEOG
	mkdir ${WRF_FOLDER}/GEOG/WPS_GEOG

	echo " "
	echo "Mandatory WRF Preprocessing System (WPS) Geographical Input Data Mandatory Fields Downloads"
	echo " "
	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_high_res_mandatory.tar.gz
	tar -xvzf geog_high_res_mandatory.tar.gz -C ${WRF_FOLDER}/GEOG/

	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_low_res_mandatory.tar.gz
	tar -xvzf geog_low_res_mandatory.tar.gz -C ${WRF_FOLDER}/GEOG/
	mv ${WRF_FOLDER}/GEOG/WPS_GEOG_LOW_RES/ ${WRF_FOLDER}/GEOG/WPS_GEOG

	if [ ${WPS_Specific_Applications} -eq 1 ]; then
		echo " "
		echo " WPS Geographical Input Data Mandatory for Specific Applications"
		echo " "

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_thompson28_chem.tar.gz
		tar -xvzf geog_thompson28_chem.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_noahmp.tar.gz
		tar -xvzf geog_noahmp.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/irrigation.tar.gz
		tar -xvzf irrigation.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_px.tar.gz
		tar -xvzf geog_px.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_urban.tar.gz
		tar -xvzf geog_urban.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_ssib.tar.gz
		tar -xvzf geog_ssib.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/lake_depth.tar.bz2
		tar -xvf lake_depth.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/topobath_30s.tar.bz2
		tar -xvf topobath_30s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/gsl_gwd.tar.bz2
		tar -xvf gsl_gwd.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

	fi

	if [ ${Optional_GEOG} -eq 1 ]; then

		echo " "
		echo "Optional WPS Geographical Input Data"
		echo " "

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_older_than_2000.tar.gz
		tar -xvzf geog_older_than_2000.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s_with_lakes.tar.gz
		tar -xvzf modis_landuse_20class_15s_with_lakes.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_alt_lsm.tar.gz
		tar -xvzf geog_alt_lsm.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/nlcd2006_ll_9s.tar.bz2
		tar -xvf nlcd2006_ll_9s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/updated_Iceland_LU.tar.gz
		tar -xvf updated_Iceland_LU.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s.tar.bz2
		tar -xvf modis_landuse_20class_15s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

	fi

fi

if [ "$Centos_64bit_GNU" = "1" ] && [ "$WRF_PICK" = "1" ]; then

	#############################basic package managment############################
	echo $PASSWD | sudo -S yum install epel-release -y
	echo $PASSWD | sudo -S yum install dnf -y
	echo $PASSWD | sudo -S dnf install epel-release -y
	echo $PASSWD | sudo -S dnf install dnf -y
	echo $PASSWD | sudo -S dnf -y update
	echo $PASSWD | sudo -S dnf -y upgrade
	echo $PASSWD | sudo -S dnf -y install autoconf automake bzip2 bzip2-devel byacc cairo-devel cmake cpp curl curl-devel flex fontconfig-devel fontconfig-devel.x86_64 gcc gcc-c++ gcc-gfortran git java-11-openjdk java-11-openjdk-devel ksh libX11-devel libX11-devel.x86_64 libXaw libXaw-devel libXext-devel libXext-devel.x86_64 libXmu-devel libXrender-devel libXrender-devel.x86_64 libstdc++ libstdc++-devel libxml2 libxml2-devel m4  .x86_64 nfs-utils perl pkgconfig  pixman-devel python3 python3-devel tcsh time unzip wget
	echo $PASSWD | sudo -S dnf -y groupinstall "Development Tools"
	echo $PASSWD | sudo -S dnf -y update
	echo $PASSWD | sudo -S dnf -y upgrade

	echo " "
	##############################Directory Listing############################
	export HOME=$(
		cd
		pwd
	)

	mkdir $HOME/WRF
	export WRF_FOLDER=$HOME/WRF
	cd ${WRF_FOLDER}/
	mkdir Downloads
	mkdir WRFPLUS
	mkdir WRFDA
	mkdir Libs
	export DIR=${WRF_FOLDER}/Libs
	mkdir Libs/grib2
	mkdir Libs/NETCDF
	mkdir Libs/MPICH
	mkdir -p Tests/Environment
	mkdir -p Tests/Compatibility

	echo " "
	#############################Core Management####################################

	export CPU_CORE=$(nproc) # number of available threads on system
	export CPU_6CORE="6"
	export CPU_HALF=$(($CPU_CORE / 2))                    #half of availble cores on system
	export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2))) #Forces CPU cores to even number to avoid partial core export. ie 7 cores would be 3.5 cores.

	if [ $CPU_CORE -le $CPU_6CORE ]; then #If statement for low core systems.  Forces computers to only use 1 core if there are 4 cores or less on the system.
		export CPU_HALF_EVEN="2"
	else
		export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))
	fi

	echo "##########################################"
	echo "Number of Threads being used $CPU_HALF_EVEN"
	echo "##########################################"

	echo " "
	##############################Downloading Libraries############################
	#Force use of ipv4 with -4
	cd Downloads
	wget -c https://github.com/madler/zlib/archive/refs/tags/v$Zlib_Version.tar.gz
	wget -c https://github.com/HDFGroup/hdf5/archive/refs/tags/hdf5-$HDF5_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-c/archive/refs/tags/v$Netcdf_C_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-fortran/archive/refs/tags/v$Netcdf_Fortran_Version.tar.gz
	wget -c https://github.com/pmodels/mpich/releases/download/v$Mpich_Version/mpich-$Mpich_Version.tar.gz
	wget -c https://download.sourceforge.net/libpng/libpng-$Libpng_Version.tar.gz
	wget -c https://www.ece.uvic.ca/~frodo/jasper/software/jasper-$Jasper_Version.zip
	wget -c https://parallel-netcdf.github.io/Release/pnetcdf-$Pnetcdf_Version.tar.gz
	wget -c https://sourceforge.net/projects/opengrads/files/grads2/2.2.1.oga.1/Linux%20%2864%20Bits%29/opengrads-2.2.1.oga.1-bundle-x86_64-pc-linux-gnu-glibc_2.17.tar.gz

	echo " "
	####################################Compilers#####################################
	export CC=gcc
	export CXX=g++
	export FC=gfortran
	export F77=gfortran
	export CFLAGS="-fPIC -fPIE -O3"

	#IF statement for GNU compiler issue
	export GCC_VERSION=$(gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		export fallow_argument=-fallow-argument-mismatch
		export boz_argument=-fallow-invalid-boz
	else
		export fallow_argument=
		export boz_argument=
	fi

	export FFLAGS="$fallow_argument -m64"
	export FCFLAGS="$fallow_argument -m64"

	echo "##########################################"
	echo "FFLAGS = $FFLAGS"
	echo "FCFLAGS = $FCFLAGS"
	echo "CFLAGS = $CFLAGS"
	echo "##########################################"

	echo " "
	#############################zlib############################
	#Uncalling compilers due to comfigure issue with zlib$Zlib_Version
	#With CC & CXX definied ./configure uses different compiler Flags

	cd ${WRF_FOLDER}/Downloads
	tar -xvzf v$Zlib_Version.tar.gz
	cd zlib-$Zlib_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log
	./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "
	##############################MPICH############################
	#F90= due to compiler issues with mpich install
	cd ${WRF_FOLDER}/Downloads
	tar -xvzf mpich-$Mpich_Version.tar.gz
	cd mpich-$Mpich_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	F90= ./configure --prefix=$DIR/MPICH --with-device=ch3 FFLAGS=$fallow_argument FCFLAGS=$fallow_argument 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	# make check

	export PATH=$DIR/MPICH/bin:$PATH
	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx

	echo " "
	#############################libpng############################
	cd ${WRF_FOLDER}/Downloads
	export LDFLAGS=-L$DIR/grib2/lib
	export CPPFLAGS=-I$DIR/grib2/include
	tar -xvzf libpng-$Libpng_Version.tar.gz
	cd libpng-$Libpng_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check
	echo " "
	#############################JasPer############################
	cd ${WRF_FOLDER}/Downloads
	unzip jasper-$Jasper_Version.zip
	cd jasper-$Jasper_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	./configure --prefix=$DIR/grib2
	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export JASPERLIB=$DIR/grib2/lib
	export JASPERINC=$DIR/grib2/include

	echo " "
	#############################hdf5 library for netcdf4 functionality############################
	cd ${WRF_FOLDER}/Downloads
	tar -xvzf hdf5-$HDF5_Version.tar.gz
	cd hdf5-hdf5-$HDF5_Version
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 --with-zlib=$DIR/grib2 --enable-hl --enable-fortran --enable-parallel 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export HDF5=$DIR/grib2
	export PHDF5=$DIR/grib2
	export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH

	echo " "
	#############################Install Parallel-netCDF##############################
	#Make file created with half of available cpu cores
	#Hard path for MPI added
	##################################################################################
	cd ${WRF_FOLDER}/Downloads
	tar -xvzf pnetcdf-$Pnetcdf_Version.tar.gz
	cd pnetcdf-$Pnetcdf_Version

	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx
	autoreconf -i -f 2>&1 | tee autoreconf.log
	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 --enable-shared --enable-static 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PNETCDF=$DIR/grib2

	echo " "

	##############################Install NETCDF C Library############################
	cd ${WRF_FOLDER}/Downloads
	tar -xzvf v$Netcdf_C_Version.tar.gz
	cd netcdf-c-$Netcdf_C_Version/
	export CPPFLAGS=-I$DIR/grib2/include
	export LDFLAGS=-L$DIR/grib2/lib
	export LIBS="-lhdf5_hl -lhdf5 -lz -lcurl -lgfortran -lgcc -lm -ldl -lpnetcdf"
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --disable-dap --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-pnetcdf --enable-cdf5 --enable-parallel-tests 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PATH=$DIR/NETCDF/bin:$PATH
	export NETCDF=$DIR/NETCDF
	echo " "
	##############################NetCDF fortran library############################
	cd ${WRF_FOLDER}/Downloads
	tar -xvzf v$Netcdf_Fortran_Version.tar.gz
	cd netcdf-fortran-$Netcdf_Fortran_Version/
	export LD_LIBRARY_PATH=$DIR/NETCDF/lib:$LD_LIBRARY_PATH
	export CPPFLAGS="-I$DIR/NETCDF/include -I$DIR/grib2/include"
	export LDFLAGS="-L$DIR/NETCDF/lib -L$DIR/grib2/lib"
	export LIBS="-lnetcdf -lpnetcdf -lcurl -lhdf5_hl -lhdf5 -lz -lm -ldl -lgcc -lgfortran"
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-parallel-tests --enable-hdf5 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "
	#################################### System Environment Tests ##############

	cd ${WRF_FOLDER}/Downloads
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_NETCDF_MPI_tests.tar
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_tests.tar

	tar -xvf Fortran_C_tests.tar -C ${WRF_FOLDER}/Tests/Environment
	tar -xvf Fortran_C_NETCDF_MPI_tests.tar -C ${WRF_FOLDER}/Tests/Compatibility

	export one="1"
	echo " "
	############## Testing Environment #####

	cd ${WRF_FOLDER}/Tests/Environment

	cp ${NETCDF}/include/netcdf.inc .

	echo " "
	echo " "
	echo "Environment Testing "
	echo "Test 1"
	$FC TEST_1_fortran_only_fixed.f
	./a.out | tee env_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 1 Passed"
	else
		echo "Environment Compiler Test 1 Failed"
		exit
	fi
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 2"
	$FC TEST_2_fortran_only_free.f90
	./a.out | tee env_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 2 Passed"
	else
		echo "Environment Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 3"
	$CC TEST_3_c_only.c
	./a.out | tee env_test3.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test3.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 3 Passed"
	else
		echo "Environment Compiler Test 3 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 4"
	$CC -c -m64 TEST_4_fortran+c_c.c
	$FC -c -m64 TEST_4_fortran+c_f.f90
	$FC -m64 TEST_4_fortran+c_f.o TEST_4_fortran+c_c.o
	./a.out | tee env_test4.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test4.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 4 Passed"
	else
		echo "Environment Compiler Test 4 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	############## Testing Environment #####

	cd ${WRF_FOLDER}/Tests/Compatibility

	cp ${NETCDF}/include/netcdf.inc .

	echo " "
	echo " "
	echo "Library Compatibility Tests "
	echo "Test 1"
	$FC -c 01_fortran+c+netcdf_f.f
	$CC -c 01_fortran+c+netcdf_c.c
	$FC 01_fortran+c+netcdf_f.o 01_fortran+c+netcdf_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	./a.out | tee comp_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 1 Passed"
	else
		echo "Compatibility Compiler Test 1 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "

	echo "Test 2"
	$MPIFC -c 02_fortran+c+netcdf+mpi_f.f
	$MPICC -c 02_fortran+c+netcdf+mpi_c.c
	$MPIFC 02_fortran+c+netcdf+mpi_f.o \
		02_fortran+c+netcdf+mpi_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	$DIR/MPICH/bin/mpirun ./a.out | tee comp_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 2 Passed"
	else
		echo "Compatibility Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."
	echo " "

	echo " All tests completed and passed"
	echo " "

	###############################NCEPlibs#####################################
	#The libraries are built and installed with
	# ./make_ncep_libs.sh -s MACHINE -c COMPILER -d NCEPLIBS_DIR -o OPENMP [-m mpi] [-a APPLICATION]
	#It is recommended to install the NCEPlibs into their own directory, which must be created before running the installer. Further information on the command line arguments can be obtained with
	# ./make_ncep_libs.sh -h

	#If iand error occurs go to https://github.com/NCAR/NCEPlibs/pull/16/files make adjustment and re-run ./make_ncep_libs.sh
	############################################################################

	cd ${WRF_FOLDER}/Downloads
	git clone https://github.com/NCAR/NCEPlibs.git
	cd NCEPlibs
	mkdir $DIR/nceplibs

	export JASPER_INC=$DIR/grib2/include
	export PNG_INC=$DIR/grib2/include
	export NETCDF=$DIR/NETCDF

	#for loop to edit linux.gnu for nceplibs to install
	#make if statement for gcc-9 or older
	export GCC_VERSION=$(gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		y="24 28 32 36 40 45 49 53 56 60 64 68 69 73 74 79"
		for X in $y; do
			sed -i "${X}s/= /= $fallow_argument $boz_argument /g" ${WRF_FOLDER}/Downloads/NCEPlibs/macros.make.linux.gnu
		done
	else
		echo ""
		echo "Loop not needed"
	fi

	if [ ${auto_config} -eq 1 ]; then
		echo yes | ./make_ncep_libs.sh -s linux -c gnu -d $DIR/nceplibs -o 0 -m 1 -a upp | tee make.install.log
	else
		./make_ncep_libs.sh -s linux -c gnu -d $DIR/nceplibs -o 0 -m 1 -a upp | tee make.install.log
	fi

	export PATH=$DIR/nceplibs:$PATH

	echo " "
	################################UPPv4.1######################################
	#Previous verison of UPP
	#WRF Support page recommends UPPV4.1 due to too many changes to WRF and UPP code
	#since the WRF was written
	#Option 8 gfortran compiler with distributed memory
	#############################################################################
	cd ${WRF_FOLDER}/
	git clone -b dtc_post_v4.1.0 --recurse-submodules https://github.com/NOAA-EMC/EMC_post UPPV4.1
	cd UPPV4.1
	mkdir postprd
	export NCEPLIBS_DIR=$DIR/nceplibs
	export NETCDF=$DIR/NETCDF

	if [ ${auto_config} -eq 1 ]; then
		echo 8 | ./configure #Option 8 gfortran compiler with distributed memory
	else
		./configure #Option 8 gfortran compiler with distributed memory
	fi

	#make if statement for gcc-9 or older
	export GCC_VERSION=$(gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		z="58 63"
		for X in $z; do
			sed -i "${X}s/(FOPT)/(FOPT) $fallow_argument $boz_argument  /g" ${WRF_FOLDER}/UPPV4.1/configure.upp
		done
	else
		echo ""
		echo "Loop not needed"
	fi

	./compile
	cd ${WRF_FOLDER}/UPPV4.1/scripts
	echo $PASSWD | sudo -S cpan install XML::LibXML
	chmod +x run_unipost

	# IF statement to check that all files were created.
	cd ${WRF_FOLDER}/UPPV4.1/exec
	n=$(ls ./*.exe | wc -l)
	if (($n == 1)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing UPPV4.1. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files. Exiting the script."
		read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
		exit
	fi

	echo " "

	######################## ARWpost V3.1  ############################
	## ARWpost
	##Configure #3
	###################################################################
	cd ${WRF_FOLDER}/Downloads
	wget -c http://www2.mmm.ucar.edu/wrf/src/ARWpost_V3.tar.gz
	tar -xvzf ARWpost_V3.tar.gz -C ${WRF_FOLDER}/
	cd ${WRF_FOLDER}/ARWpost
	./clean -a
	sed -i -e 's/-lnetcdf/-lnetcdff -lnetcdf/g' ${WRF_FOLDER}/ARWpost/src/Makefile
	export NETCDF=$DIR/NETCDF

	if [ ${auto_config} -eq 1 ]; then
		echo 3 | ./configure #Option 3 gfortran compiler with distributed memory
	else
		./configure #Option 3 gfortran compiler with distributed memory
	fi

	export GCC_VERSION=$(gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		sed -i '32s/-ffree-form -O -fno-second-underscore -fconvert=big-endian -frecord-marker=4/-ffree-form -O -fno-second-underscore -fconvert=big-endian -frecord-marker=4 ${fallow_argument} /g' configure.arwp
	fi

	sed -i -e 's/-C -P -traditional/-P -traditional/g' ${WRF_FOLDER}/ARWpost/configure.arwp
	./compile

	export PATH=${WRF_FOLDER}/ARWpost/ARWpost.exe:$PATH

	echo " "
	################################ OpenGrADS ##################################
	#Verison 2.2.1 32bit of Linux
	#############################################################################
	if [[ $GRADS_PICK -eq 1 ]]; then
		cd ${WRF_FOLDER}/Downloads
		tar -xzvf opengrads-2.2.1.oga.1-bundle-x86_64-pc-linux-gnu-glibc_2.17.tar.gz -C ${WRF_FOLDER}/
		cd ${WRF_FOLDER}/
		mv ${WRF_FOLDER}/opengrads-2.2.1.oga.1 ${WRF_FOLDER}/GrADS
		cd GrADS/Contents
		wget -c https://github.com/regisgrundig/SIMOP/blob/master/g2ctl.pl
		chmod +x g2ctl.pl
		wget -c https://sourceforge.net/projects/opengrads/files/wgrib2/0.1.9.4/wgrib2-v0.1.9.4-bin-i686-glib2.5-linux-gnu.tar.gz
		tar -xzvf wgrib2-v0.1.9.4-bin-i686-glib2.5-linux-gnu.tar.gz
		cd wgrib2-v0.1.9.4/bin
		mv wgrib2 ${WRF_FOLDER}/GrADS/Contents
		cd ${WRF_FOLDER}/GrADS/Contents
		rm wgrib2-v0.1.9.4-bin-i686-glib2.5-linux-gnu.tar.gz
		rm -r wgrib2-v0.1.9.4

		export PATH=${WRF_FOLDER}/GrADS/Contents:$PATH

		echo " "
	fi
	################################## GrADS ###############################
	# Version  2.2.1
	# Sublibs library instructions: http://cola.gmu.edu/grads/gadoc/supplibs2.html
	# GrADS instructions: http://cola.gmu.edu/grads/downloads.php
	########################################################################
	if [[ $GRADS_PICK -eq 2 ]]; then
		cd ${WRF_FOLDER}/Downloads
		wget -c ftp://cola.gmu.edu/grads/2.2/grads-2.2.1-bin-centos7.4-x86_64.tar.gz
		tar -xzvf grads-2.2.1-bin-centos7.4-x86_64.tar.gz -C ${WRF_FOLDER}
		cd ${WRF_FOLDER}/grads-2.2.1/bin
		chmod 775 *

	fi

	##################### NCAR COMMAND LANGUAGE           ##################
	########### NCL compiled via Conda                    ##################
	########### This is the preferred method by NCAR      ##################
	########### https://www.ncl.ucar.edu/index.shtml      ##################
	#Installing Miniconda3 to WRF-Hydro directory and updating libraries

	pip install --upgrade --force-reinstall zstandard
	pip install --upgrade --force-reinstall zstd
	pip3 install --upgrade --force-reinstall zstandard
	pip3 install --upgrade --force-reinstall zstd
	export Miniconda_Install_DIR=${WRF_FOLDER}/miniconda3

	mkdir -p $Miniconda_Install_DIR

	wget -c https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $Miniconda_Install_DIR/miniconda.sh
	bash $Miniconda_Install_DIR/miniconda.sh -b -u -p $Miniconda_Install_DIR

	rm -rf $Miniconda_Install_DIR/miniconda.sh

	export PATH=${WRF_FOLDER}/miniconda3/bin:$PATH

	source $Miniconda_Install_DIR/etc/profile.d/conda.sh

	$Miniconda_Install_DIR/bin/conda init bash
	$Miniconda_Install_DIR/bin/conda init zsh
	$Miniconda_Install_DIR/bin/conda init tcsh
	$Miniconda_Install_DIR/bin/conda init xonsh
	$Miniconda_Install_DIR/bin/conda init powershell

	conda config --add channels conda-forge
	conda config --set auto_activate_base false
	conda update -n root --all -y

	echo " "

	echo " "
	#Installing NCL via Conda
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda init bash
	conda activate base
	conda create -n ncl_stable -c conda-forge ncl -y
	conda activate ncl_stable

	conda deactivate
	conda deactivate
	conda deactivate

	echo " "
	echo " "

	############################OBSGRID###############################
	## OBSGRID
	## Downloaded from git tagged releases
	## Option #2
	########################################################################
	cd ${WRF_FOLDER}/
	git clone https://github.com/wrf-model/OBSGRID.git
	cd ${WRF_FOLDER}/OBSGRID

	./clean -a
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda init bash
	conda activate ncl_stable

	export HOME=$(
		cd
		pwd
	)
	export DIR=${WRF_FOLDER}/Libs
	export NETCDF=$DIR/NETCDF

	if [ ${auto_config} -eq 1 ]; then
		echo 2 | ./configure 2>&1 | tee configure.log#Option 2 for gfortran/gcc and distribunted memory
	else
		./configure 2>&1 | tee configure.log #Option 2 for gfortran/gcc and distribunted memory
	fi

	sed -i '27s/-lnetcdf -lnetcdff/ -lnetcdff -lnetcdf/g' configure.oa

	sed -i '31s/-lncarg -lncarg_gks -lncarg_c -lX11 -lm -lcairo/-lncarg -lncarg_gks -lncarg_c -lX11 -lm -lcairo -lfontconfig -lpixman-1 -lfreetype -lhdf5 -lhdf5_hl /g' configure.oa

	sed -i '39s/-frecord-marker=4/-frecord-marker=4 ${fallow_argument} /g' configure.oa

	sed -i '44s/=	/=	${fallow_argument} /g' configure.oa

	sed -i '45s/-C -P -traditional/-P -traditional/g' configure.oa

	echo " "
	./compile 2>&1 | tee compile.obsgrid.log

	conda deactivate
	conda deactivate
	conda deactivate

	echo " "
	# IF statement to check that all files were created.
	cd ${WRF_FOLDER}/OBSGRID
	n=$(ls ./*.exe | wc -l)
	if (($n == 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing OBSGRID. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files. Exiting the script."
		read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
		exit
	fi

	echo " "
	############################## RIP4 #####################################
	mkdir ${WRF_FOLDER}/RIP4
	cd ${WRF_FOLDER}/Downloads
	wget -c https://www2.mmm.ucar.edu/wrf/src/RIP_47.tar.gz
	tar -xvzf RIP_47.tar.gz -C ${WRF_FOLDER}/RIP4
	cd ${WRF_FOLDER}/RIP4/RIP_47
	mv * ..
	cd ${WRF_FOLDER}/RIP4
	rm -rd RIP_47
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda activate ncl_stable
	conda install -c conda-forge c-compiler fortran-compiler cxx-compiler -y

	export RIP_ROOT=${WRF_FOLDER}/RIP4
	export NETCDF=$DIR/NETCDF
	export NCARG_ROOT=${WRF_FOLDER}/anaconda3/envs/ncl_stable

	sed -i '349s|-L${NETCDF}/lib -lnetcdf $NETCDFF|-L${NETCDF}/lib $NETCDFF -lnetcdff -lnetcdf -lnetcdf -lnetcdff_C -lhdf5 |g' ${WRF_FOLDER}/RIP4/configure

	sed -i '27s|NETCDFLIB	= -L${NETCDF}/lib -lnetcdf CONFIGURE_NETCDFF_LIB|NETCDFLIB	= -L</usr/lib/x86_64-linux-gnu/libm.a> -lm -L${NETCDF}/lib CONFIGURE_NETCDFF_LIB -lnetcdf -lhdf5 -lhdf5_hl -lgfortran -lgcc -lz |g' ${WRF_FOLDER}/RIP4/arch/preamble

	sed -i '31s|-L${NCARG_ROOT}/lib -lncarg -lncarg_gks -lncarg_c -lX11 -lXext -lpng -lz CONFIGURE_NCARG_LIB| -L${NCARG_ROOT}/lib -lncarg -lncarg_gks -lncarg_c -lX11 -lXext -lpng -lz -lcairo -lfontconfig -lpixman-1 -lfreetype -lexpat -lpthread -lbz2 -lXrender -lgfortran -lgcc -L</usr/lib/x86_64-linux-gnu/> -lm -lhdf5 -lhdf5_hl |g' ${WRF_FOLDER}/RIP4/arch/preamble

	sed -i '33s| -O|-fallow-argument-mismatch -O |g' ${WRF_FOLDER}/RIP4/arch/configure.defaults

	sed -i '35s|=|= -L${WRF_FOLDER}/LIBS/grib2/lib -lhdf5 -lhdf5_hl |g' ${WRF_FOLDER}/RIP4/arch/configure.defaults

	if [ ${auto_config} -eq 1 ]; then
		echo 3 | ./configure #Option 3 gfortran compiler with distributed memory
	else
		./configure #Option 3 gfortran compiler with distributed memory
	fi

	./compile

	conda deactivate
	conda deactivate
	conda deactivate

	echo " "
	##################### WRF Python           ##################
	########### WRf-Python compiled via Conda  ##################
	########### This is the preferred method by NCAR      ##################
	##### https://wrf-python.readthedocs.io/en/latest/installation.html  ##################
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
conda env create -f $HOME/WRF-MOSIT/wrf-python-stable.yml

	################################## QGIS #####################################
	#QGIS (Quantum Geographic Information System) is a free and open-source platform that allows users to
	#analyze, view, and edit geospatial data. It supports both vector and raster layers, as well as various #web services, and is extensible through community-developed plugins. Key features include map
	#creation, spatial analysis, and data management.
	#############################################################################

	conda env create -f $HOME/WRF-MOSIT/qgis.3.28.8.yml

	echo " "


	echo " "
	############################ WRF ${WPS_VERSION}  #################################
	## WRF v${WPS_VERSION}
	## Downloaded from git tagged releases
	# option 34, option 1 for gfortran and distributed memory w/basic nesting
	# large file support enable with WRFiO_NCD_LARGE_FILE_SUPPORT=1
	# In the namelist.input, the following settings support pNetCDF by setting value to 11:
	# io_form_boundary
	# io_form_history
	# io_form_auxinput2
	# io_form_auxhist2
	# Note that you need set nocolons = .true. in the section &time_control of namelist.input
	########################################################################
	cd ${WRF_FOLDER}/Downloads
	wget -c https://github.com/wrf-model/WRF/releases/download/v${WRF_VERSION}/v${WRF_VERSION}.tar.gz -O WRF-${WRF_VERSION}.tar.gz
	tar -xvzf WRF-${WRF_VERSION}.tar.gz -C ${WRF_FOLDER}/

	# If statment for changing folder name
	if [ -d "${WRF_FOLDER}/WRF" ]; then
		mv -f ${WRF_FOLDER}/WRF ${WRF_FOLDER}/WRFV${WRF_VERSION}
	fi

	cd ${WRF_FOLDER}/WRFV${WRF_VERSION}
	export WRFIO_NCD_LARGE_FILE_SUPPORT=1
	./clean -a

	if [ ${auto_config} -eq 1 ]; then
		sed -i '443s/.*/  $response = "34 \\n";/g' ${WRF_FOLDER}/WRFV${WRF_VERSION}/arch/Config.pl # Answer for compiler choice
		sed -i '909s/.*/  $response = "1 \\n";/g' ${WRF_FOLDER}/WRFV${WRF_VERSION}/arch/Config.pl  #Answer for basic nesting
		./configure 2>&1 | tee configure.log
	else
		./configure 2>&1 | tee configure.log #Option 34 gfortran compiler with distributed memory option 1 for basic nesting
	fi

	./compile -j $CPU_HALF_EVEN em_real 2>&1 | tee compile.wrf1.log

	export WRF_DIR=${WRF_FOLDER}/WRFV${WRF_VERSION}

	# IF statement to check that all files were created.
	cd ${WRF_FOLDER}/WRFV${WRF_VERSION}/main
	n=$(ls ./*.exe | wc -l)
	if (($n >= 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		cd ${WRF_FOLDER}/WRFV${WRF_VERSION}
		./compile -j $CPU_HALF_EVEN em_real 2>&1 | tee compile.wrf2.log
		cd ${WRF_FOLDER}/WRFV${WRF_VERSION}/main
		n=$(ls ./*.exe | wc -l)
		if (($n >= 3)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "
	############################WPSV${WPS_VERSION}#####################################
	## WPS v${WPS_VERSION}
	## Downloaded from git tagged releases
	#Option 3 for gfortran and distributed memory
	########################################################################

	cd ${WRF_FOLDER}/Downloads
	wget -c https://github.com/wrf-model/WPS/archive/refs/tags/v${WPS_VERSION}.tar.gz -O WPS-${WPS_VERSION}.tar.gz
	tar -xvzf WPS-${WPS_VERSION}.tar.gz -C ${WRF_FOLDER}/
	cd ${WRF_FOLDER}/WPS-${WPS_VERSION}
	./clean -a

	if [ ${auto_config} -eq 1 ]; then
		echo 3 | ./configure 2>&1 | tee configure.log #Option 3 for gfortran and distributed memory
	else
		./configure 2>&1 | tee configure.log #Option 3 gfortran compiler with distributed memory
	fi
	./compile 2>&1 | tee compile.wps.log

	echo " "
	# IF statement to check that all files were created.
	cd ${WRF_FOLDER}/WPS-${WPS_VERSION}
	n=$(ls ./*.exe | wc -l)
	if (($n == 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		./compile 2>&1 | tee compile.wps2.log
		cd ${WRF_FOLDER}/WPS-${WPS_VERSION}
		n=$(ls ./*.exe | wc -l)
		if (($n == 3)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "
	############################WRFPLUS 4DVAR###############################
	## WRFPLUS v${WPS_VERSION} 4DVAR
	## Downloaded from git tagged releases
	## WRFPLUS is built within the WRF git folder
	## Does not include RTTOV Libarary for radiation data.  If wanted will need to install library then reconfigure
	##Note: if you intend to run both 3DVAR and 4DVAR experiments, it is not necessary to compile the code twice.
	#Option 18 for gfortran/gcc and distribunted memory
	########################################################################
	cd ${WRF_FOLDER}/Downloads
	tar -xvzf WRF-${WRF_VERSION}.tar.gz -C ${WRF_FOLDER}/WRFPLUS

	# If statment for changing folder name
	if [ -d "${WRF_FOLDER}/WRFPLUS/WRF" ]; then
		mv -f ${WRF_FOLDER}/WRFPLUS/WRF ${WRF_FOLDER}/WRFPLUS/WRFV${WRF_VERSION}
	fi

	cd ${WRF_FOLDER}/WRFPLUS/WRFV${WRF_VERSION}
	mv * ${WRF_FOLDER}/WRFPLUS
	cd ${WRF_FOLDER}/WRFPLUS
	rm -rf WRFV${WRF_VERSION}/
	export NETCDF=$DIR/NETCDF
	export HDF5=$DIR/grib2
	export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH
	./clean -a

	if [ ${auto_config} -eq 1 ]; then
		echo 18 | ./configure wrfplus 2>&1 | tee configure.log #Option 18 for gfortran/gcc and distribunted memory
	else
		./configure wrfplus 2>&1 | tee configure.log #Option 18 for gfortran/gcc and distribunted memory
	fi
	echo " "
	./compile -j $CPU_HALF_EVEN wrfplus 2>&1 | tee compile.wrfplus.log
	export WRFPLUS_DIR=${WRF_FOLDER}/WRFPLUS

	echo " "
	# IF statement to check that all files were created.
	cd ${WRF_FOLDER}/WRFPLUS/main
	n=$(ls ./wrfplus.exe | wc -l)
	if (($n == 1)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WRF Plus 4DVAR. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		cd ${WRF_FOLDER}/WRFPLUS/
		./compile -j $CPU_HALF_EVEN wrfplus 2>&1 | tee compile.wrfplus2.log
		cd ${WRF_FOLDER}/WRFPLUS/main
		n=$(ls ./wrfplus.exe | wc -l)
		if (($n == 1)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WRF Plus 4DVAR. I am going to wait for 5 seconds only ..."
		else
			echo "Missing one or more expected files."
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "
	############################WRFDA 4DVAR###############################
	## WRFDA v${WPS_VERSION} 4DVAR
	## Downloaded from git tagged releases
	## WRFDA is built within the WRFPLUS folder
	## Does not include RTTOV Libarary for radiation data.  If wanted will need to install library then reconfigure
	##Note: if you intend to run both 3DVAR and 4DVAR experiments, it is not necessary to compile the code twice.
	#Option 18 for gfortran/gcc and distribunted memory
	########################################################################
	cd ${WRF_FOLDER}/Downloads
	mkdir ${WRF_FOLDER}/WRFDA
	tar -xvzf WRF-${WRF_VERSION}.tar.gz -C ${WRF_FOLDER}/WRFDA

	# If statment for changing folder name
	if [ -d "${WRF_FOLDER}/WRFDA/WRF" ]; then
		mv -f ${WRF_FOLDER}/WRFDA/WRF ${WRF_FOLDER}/WRFDA/WRFV${WRF_VERSION}
	fi

	cd ${WRF_FOLDER}/WRFDA/WRFV${WRF_VERSION}
	mv * ${WRF_FOLDER}/WRFDA
	cd ${WRF_FOLDER}/WRFDA
	rm -rf WRFV${WRF_VERSION}/
	export NETCDF=$DIR/NETCDF
	export HDF5=$DIR/grib2
	export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH
	export WRFPLUS_DIR=${WRF_FOLDER}/WRFPLUS
	./clean -a

	if [ ${auto_config} -eq 1 ]; then
		echo 18 | ./configure 4dvar 2>&1 | tee configure.log #Option 18 for gfortran/gcc and distribunted memory
	else
		./configure 4dvar 2>&1 | tee configure.log #Option 18 for gfortran/gcc and distribunted memory
	fi
	echo " "
	./compile all_wrfvar 2>&1 | tee compile.wrf4dvar.log

	echo " "
	# IF statement to check that all files were created.
	cd ${WRF_FOLDER}/WRFDA/var/da
	n=$(ls ./*.exe | wc -l)
	cd ${WRF_FOLDER}/WRFDA/var/obsproc/src
	m=$(ls ./*.exe | wc -l)
	if ((($n == 43) && ($m == 1))); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WRFDA. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		cd ${WRF_FOLDER}/WRFDA
		./compile -j $CPU_HALF_EVEN all_wrfvar 2>&1 | tee compile.chem.wrfvar2.log
		cd ${WRF_FOLDER}/WRFDA/var/da
		n=$(ls ./*.exe | wc -l)
		cd ${WRF_FOLDER}/WRFDA/var/obsproc/src
		m=$(ls ./*.exe | wc -l)
		if ((($n == 43) && ($m == 1))); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WRFDA. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi
	echo " "

	echo " "
	######################## WPS Domain Setup Tools ########################
	## DomainWizard
	cd ${WRF_FOLDER}/Downloads
	wget -c http://esrl.noaa.gov/gsd/wrfportal/domainwizard/WRFDomainWizard.zip
	mkdir ${WRF_FOLDER}/WRFDomainWizard
	unzip WRFDomainWizard.zip -d ${WRF_FOLDER}/WRFDomainWizard
	chmod +x ${WRF_FOLDER}/WRFDomainWizard/run_DomainWizard

	echo " "
	######################## WPF Portal Setup Tools ########################
	## WRFPortal
	cd ${WRF_FOLDER}/Downloads
	wget -c https://esrl.noaa.gov/gsd/wrfportal/portal/wrf-portal.zip
	mkdir ${WRF_FOLDER}/WRFPortal
	unzip wrf-portal.zip -d ${WRF_FOLDER}/WRFPortal
	chmod +x ${WRF_FOLDER}/WRFPortal/runWRFPortal

	echo " "

	######################## Static Geography Data inc/ Optional ####################
	# http://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	# These files are large so if you only need certain ones comment the others off
	# All files downloaded and untarred is 200GB
	# https://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	#################################################################################
	cd ${WRF_FOLDER}/Downloads
	mkdir ${WRF_FOLDER}/GEOG
	mkdir ${WRF_FOLDER}/GEOG/WPS_GEOG

	echo " "
	echo "Mandatory WRF Preprocessing System (WPS) Geographical Input Data Mandatory Fields Downloads"
	echo " "
	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_high_res_mandatory.tar.gz
	tar -xvzf geog_high_res_mandatory.tar.gz -C ${WRF_FOLDER}/GEOG/

	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_low_res_mandatory.tar.gz
	tar -xvzf geog_low_res_mandatory.tar.gz -C ${WRF_FOLDER}/GEOG/
	mv ${WRF_FOLDER}/GEOG/WPS_GEOG_LOW_RES/ ${WRF_FOLDER}/GEOG/WPS_GEOG

	if [ ${WPS_Specific_Applications} -eq 1 ]; then
		echo " "
		echo " WPS Geographical Input Data Mandatory for Specific Applications"
		echo " "

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_thompson28_chem.tar.gz
		tar -xvzf geog_thompson28_chem.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_noahmp.tar.gz
		tar -xvzf geog_noahmp.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/irrigation.tar.gz
		tar -xvzf irrigation.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG
		mkdir ${WRF_FOLDER}/GEOG/WPS_GEOG/irrigation
		mv ${WRF_FOLDER}/GEOG/WPS_GEOG/fao ${WRF_FOLDER}/GEOG/WPS_GEOG/irrigation

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_px.tar.gz
		tar -xvzf geog_px.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_urban.tar.gz
		tar -xvzf geog_urban.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_ssib.tar.gz
		tar -xvzf geog_ssib.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/lake_depth.tar.bz2
		tar -xvf lake_depth.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/topobath_30s.tar.bz2
		tar -xvf topobath_30s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/gsl_gwd.tar.bz2
		tar -xvf gsl_gwd.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG
	fi

	if [ ${Optional_GEOG} -eq 1 ]; then
		echo " "
		echo "Optional WPS Geographical Input Data"
		echo " "

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_older_than_2000.tar.gz
		tar -xvzf geog_older_than_2000.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s_with_lakes.tar.gz
		tar -xvzf modis_landuse_20class_15s_with_lakes.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_alt_lsm.tar.gz
		tar -xvzf geog_alt_lsm.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/nlcd2006_ll_9s.tar.bz2
		tar -xvf nlcd2006_ll_9s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/updated_Iceland_LU.tar.gz
		tar -xvf updated_Iceland_LU.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s.tar.bz2
		tar -xvf modis_landuse_20class_15s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG
	fi
fi

if [ "$Centos_64bit_GNU" = "2" ] && [ "$WRF_PICK" = "1" ]; then

	#############################basic package managment############################
	echo "old version of GNU detected"
	echo $PASSWD | sudo -S yum install centos-release-scl -y
	echo $PASSWD | sudo -S yum clean all
	echo $PASSWD | sudo -S yum remove devtoolset-11*
	echo $PASSWD | sudo -S yum install devtoolset-11
	echo $PASSWD | sudo -S yum install devtoolset-11-\* -y
	source /opt/rh/devtoolset-11/enable
	gcc --version
	echo $PASSWD | sudo -S yum install epel-release -y
	echo $PASSWD | sudo -S yum install dnf -y
	echo $PASSWD | sudo -S dnf install epel-release -y
	echo $PASSWD | sudo -S dnf install dnf -y
	echo $PASSWD | sudo -S dnf -y update
	echo $PASSWD | sudo -S dnf -y upgrade
	echo $PASSWD | sudo -S dnf -y install autoconf automake bzip2 bzip2-devel byacc cairo-devel cmake cpp curl curl-devel flex  fontconfig-devel fontconfig-devel.x86_64 gcc gcc-c++ gcc-gfortran git java-11-openjdk java-11-openjdk-devel ksh libX11-devel libX11-devel.x86_64 libXaw libXaw-devel libXext-devel libXext-devel.x86_64 libXmu-devel libXrender-devel libXrender-devel.x86_64 libstdc++ libstdc++-devel  libxml2 libxml2-devel m4  .x86_64 nfs-utils perl pkgconfig  pixman-devel python3 python3-devel tcsh time unzip wget
	echo $PASSWD | sudo -S dnf -y groupinstall "Development Tools"
	echo $PASSWD | sudo -S dnf -y update
	echo $PASSWD | sudo -S dnf -y upgrade

	echo " "
	##############################Directory Listing############################
	export HOME=$(
		cd
		pwd
	)

	mkdir $HOME/WRF
	export WRF_FOLDER=$HOME/WRF
	cd ${WRF_FOLDER}/
	mkdir Downloads
	mkdir WRFPLUS
	mkdir WRFDA
	mkdir Libs
	export DIR=${WRF_FOLDER}/Libs
	mkdir Libs/grib2
	mkdir Libs/NETCDF
	mkdir Libs/MPICH
	mkdir -p Tests/Environment
	mkdir -p Tests/Compatibility

	echo " "
	#############################Core Management####################################

	export CPU_CORE=$(nproc) # number of available threads on system
	export CPU_6CORE="6"
	export CPU_HALF=$(($CPU_CORE / 2))                    #half of availble cores on system
	export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2))) #Forces CPU cores to even number to avoid partial core export. ie 7 cores would be 3.5 cores.

	if [ $CPU_CORE -le $CPU_6CORE ]; then #If statement for low core systems.  Forces computers to only use 1 core if there are 4 cores or less on the system.
		export CPU_HALF_EVEN="2"
	else
		export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))
	fi

	echo "##########################################"
	echo "Number of Threads being used $CPU_HALF_EVEN"
	echo "##########################################"

	echo " "
	##############################Downloading Libraries############################
	#Force use of ipv4 with -4
	cd Downloads
	wget -c https://github.com/madler/zlib/archive/refs/tags/v$Zlib_Version.tar.gz
	wget -c https://github.com/HDFGroup/hdf5/archive/refs/tags/hdf5-$HDF5_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-c/archive/refs/tags/v$Netcdf_C_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-fortran/archive/refs/tags/v$Netcdf_Fortran_Version.tar.gz
	wget -c https://github.com/pmodels/mpich/releases/download/v$Mpich_Version/mpich-$Mpich_Version.tar.gz
	wget -c https://download.sourceforge.net/libpng/libpng-$Libpng_Version.tar.gz
	wget -c https://www.ece.uvic.ca/~frodo/jasper/software/jasper-$Jasper_Version.zip
	wget -c https://parallel-netcdf.github.io/Release/pnetcdf-$Pnetcdf_Version.tar.gz
	wget -c https://sourceforge.net/projects/opengrads/files/grads2/2.2.1.oga.1/Linux%20%2864%20Bits%29/opengrads-2.2.1.oga.1-bundle-x86_64-pc-linux-gnu-glibc_2.17.tar.gz

	echo " "
	####################################Compilers#####################################
	export CC=gcc
	export CXX=g++
	export FC=gfortran
	export F77=gfortran
	export CFLAGS="-fPIC -fPIE -O3"

	#IF statement for GNU compiler issue
	export GCC_VERSION=$(gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		export fallow_argument=-fallow-argument-mismatch
		export boz_argument=-fallow-invalid-boz
	else
		export fallow_argument=
		export boz_argument=
	fi

	export FFLAGS="$fallow_argument -m64"
	export FCFLAGS="$fallow_argument -m64"

	echo "##########################################"
	echo "FFLAGS = $FFLAGS"
	echo "FCFLAGS = $FCFLAGS"
	echo "CFLAGS = $CFLAGS"
	echo "##########################################"

	echo " "
	#############################zlib############################
	#Uncalling compilers due to comfigure issue with zlib$Zlib_Version
	#With CC & CXX definied ./configure uses different compiler Flags

	cd ${WRF_FOLDER}/Downloads
	tar -xvzf v$Zlib_Version.tar.gz
	cd zlib-$Zlib_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log
	./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "
	##############################MPICH############################
	#F90= due to compiler issues with mpich install
	cd ${WRF_FOLDER}/Downloads
	tar -xvzf mpich-$Mpich_Version.tar.gz
	cd mpich-$Mpich_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	F90= ./configure --prefix=$DIR/MPICH --with-device=ch3 FFLAGS=$fallow_argument FCFLAGS=$fallow_argument 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	# make check

	export PATH=$DIR/MPICH/bin:$PATH
	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx

	echo " "
	#############################libpng############################
	cd ${WRF_FOLDER}/Downloads
	export LDFLAGS=-L$DIR/grib2/lib
	export CPPFLAGS=-I$DIR/grib2/include
	tar -xvzf libpng-$Libpng_Version.tar.gz
	cd libpng-$Libpng_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check
	echo " "
	#############################JasPer############################
	cd ${WRF_FOLDER}/Downloads
	unzip jasper-$Jasper_Version.zip
	cd jasper-$Jasper_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	./configure --prefix=$DIR/grib2
	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export JASPERLIB=$DIR/grib2/lib
	export JASPERINC=$DIR/grib2/include

	echo " "
	#############################hdf5 library for netcdf4 functionality############################
	cd ${WRF_FOLDER}/Downloads
	tar -xvzf hdf5-$HDF5_Version.tar.gz
	cd hdf5-hdf5-$HDF5_Version
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 --with-zlib=$DIR/grib2 --enable-hl --enable-fortran --enable-parallel 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export HDF5=$DIR/grib2
	export PHDF5=$DIR/grib2
	export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH

	echo " "
	#############################Install Parallel-netCDF##############################
	#Make file created with half of available cpu cores
	#Hard path for MPI added
	##################################################################################
	cd ${WRF_FOLDER}/Downloads
	tar -xvzf pnetcdf-$Pnetcdf_Version.tar.gz
	cd pnetcdf-$Pnetcdf_Version
	export MPIFC=$DIR/MPICH/bin/mpifort
	export MPIF77=$DIR/MPICH/bin/mpifort
	export MPIF90=$DIR/MPICH/bin/mpifort
	export MPICC=$DIR/MPICH/bin/mpicc
	export MPICXX=$DIR/MPICH/bin/mpicxx
	autoreconf -i -f 2>&1 | tee autoreconf.log
	CC=$MPICC FC=$MPIFC F77=$MPIF77 F90=$MPIF90 CXX=$MPICXX CFLAGS=$CFLAGS ./configure --prefix=$DIR/grib2 --enable-shared --enable-static 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PNETCDF=$DIR/grib2

	echo " "

	##############################Install NETCDF C Library############################
	cd ${WRF_FOLDER}/Downloads
	tar -xzvf v$Netcdf_C_Version.tar.gz
	cd netcdf-c-$Netcdf_C_Version/
	export CPPFLAGS=-I$DIR/grib2/include
	export LDFLAGS=-L$DIR/grib2/lib
	export LIBS="-lhdf5_hl -lhdf5 -lz -lcurl -lgfortran -lgcc -lm -ldl -lpnetcdf"
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --disable-dap --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-pnetcdf --enable-cdf5 --enable-parallel-tests 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	export PATH=$DIR/NETCDF/bin:$PATH
	export NETCDF=$DIR/NETCDF
	echo " "
	##############################NetCDF fortran library############################
	cd ${WRF_FOLDER}/Downloads
	tar -xvzf v$Netcdf_Fortran_Version.tar.gz
	cd netcdf-fortran-$Netcdf_Fortran_Version/
	export LD_LIBRARY_PATH=$DIR/NETCDF/lib:$LD_LIBRARY_PATH
	export CPPFLAGS="-I$DIR/NETCDF/include -I$DIR/grib2/include"
	export LDFLAGS="-L$DIR/NETCDF/lib -L$DIR/grib2/lib"
	export LIBS="-lnetcdf -lpnetcdf -lcurl -lhdf5_hl -lhdf5 -lz -lm -ldl -lgcc -lgfortran"
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure --prefix=$DIR/NETCDF --enable-netcdf-4 --enable-netcdf4 --enable-shared --enable-static --enable-parallel-tests --enable-hdf5 2>&1 | tee configure.log

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log
	#make check

	echo " "
	#################################### System Environment Tests ##############

	cd ${WRF_FOLDER}/Downloads
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_NETCDF_MPI_tests.tar
	wget -c https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_tests.tar

	tar -xvf Fortran_C_tests.tar -C ${WRF_FOLDER}/Tests/Environment
	tar -xvf Fortran_C_NETCDF_MPI_tests.tar -C ${WRF_FOLDER}/Tests/Compatibility

	export one="1"
	echo " "
	############## Testing Environment #####

	cd ${WRF_FOLDER}/Tests/Environment

	cp ${NETCDF}/include/netcdf.inc .

	echo " "
	echo " "
	echo "Environment Testing "
	echo "Test 1"
	$FC TEST_1_fortran_only_fixed.f
	./a.out | tee env_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 1 Passed"
	else
		echo "Environment Compiler Test 1 Failed"
		exit
	fi
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 2"
	$FC TEST_2_fortran_only_free.f90
	./a.out | tee env_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 2 Passed"
	else
		echo "Environment Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 3"
	$CC TEST_3_c_only.c
	./a.out | tee env_test3.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test3.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 3 Passed"
	else
		echo "Environment Compiler Test 3 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	echo "Test 4"
	$CC -c -m64 TEST_4_fortran+c_c.c
	$FC -c -m64 TEST_4_fortran+c_f.f90
	$FC -m64 TEST_4_fortran+c_f.o TEST_4_fortran+c_c.o
	./a.out | tee env_test4.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" env_test4.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Enviroment Test 4 Passed"
	else
		echo "Environment Compiler Test 4 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "
	############## Testing Environment #####

	cd ${WRF_FOLDER}/Tests/Compatibility

	cp ${NETCDF}/include/netcdf.inc .

	echo " "
	echo " "
	echo "Library Compatibility Tests "
	echo "Test 1"
	$FC -c 01_fortran+c+netcdf_f.f
	$CC -c 01_fortran+c+netcdf_c.c
	$FC 01_fortran+c+netcdf_f.o 01_fortran+c+netcdf_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	./a.out | tee comp_test1.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test1.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 1 Passed"
	else
		echo "Compatibility Compiler Test 1 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."

	echo " "

	echo "Test 2"
	$MPIFC -c 02_fortran+c+netcdf+mpi_f.f
	$MPICC -c 02_fortran+c+netcdf+mpi_c.c
	$MPIFC 02_fortran+c+netcdf+mpi_f.o \
		02_fortran+c+netcdf+mpi_c.o \
		-L${NETCDF}/lib -lnetcdff -lnetcdf

	$DIR/MPICH/bin/mpirun ./a.out | tee comp_test2.txt
	export TEST_PASS=$(grep -w -o -c "SUCCESS" comp_test2.txt | awk '{print$1}')
	if [ $TEST_PASS -ge 1 ]; then
		echo "Compatibility Test 2 Passed"
	else
		echo "Compatibility Compiler Test 2 Failed"
		exit
	fi
	echo " "
	read -r -t 3 -p "I am going to wait for 3 seconds only ..."
	echo " "

	echo " All tests completed and passed"
	echo " "

	###############################NCEPlibs#####################################
	#The libraries are built and installed with
	# ./make_ncep_libs.sh -s MACHINE -c COMPILER -d NCEPLIBS_DIR -o OPENMP [-m mpi] [-a APPLICATION]
	#It is recommended to install the NCEPlibs into their own directory, which must be created before running the installer. Further information on the command line arguments can be obtained with
	# ./make_ncep_libs.sh -h

	#If iand error occurs go to https://github.com/NCAR/NCEPlibs/pull/16/files make adjustment and re-run ./make_ncep_libs.sh
	############################################################################

	cd ${WRF_FOLDER}/Downloads
	git clone https://github.com/NCAR/NCEPlibs.git
	cd NCEPlibs
	mkdir $DIR/nceplibs

	export JASPER_INC=$DIR/grib2/include
	export PNG_INC=$DIR/grib2/include
	export NETCDF=$DIR/NETCDF

	#for loop to edit linux.gnu for nceplibs to install
	#make if statement for gcc-9 or older
	export GCC_VERSION=$(gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		y="24 28 32 36 40 45 49 53 56 60 64 68 69 73 74 79"
		for X in $y; do
			sed -i "${X}s/= /= $fallow_argument $boz_argument /g" ${WRF_FOLDER}/Downloads/NCEPlibs/macros.make.linux.gnu
		done
	else
		echo ""
		echo "Loop not needed"
	fi

	if [ ${auto_config} -eq 1 ]; then
		echo yes | ./make_ncep_libs.sh -s linux -c gnu -d $DIR/nceplibs -o 0 -m 1 -a upp | tee make.install.log
	else
		./make_ncep_libs.sh -s linux -c gnu -d $DIR/nceplibs -o 0 -m 1 -a upp | tee make.install.log
	fi

	export PATH=$DIR/nceplibs:$PATH

	echo " "
	################################UPPv4.1######################################
	#Previous verison of UPP
	#WRF Support page recommends UPPV4.1 due to too many changes to WRF and UPP code
	#since the WRF was written
	#Option 8 gfortran compiler with distributed memory
	#############################################################################
	cd ${WRF_FOLDER}/
	git clone -b dtc_post_v4.1.0 --recurse-submodules https://github.com/NOAA-EMC/EMC_post UPPV4.1
	cd UPPV4.1
	mkdir postprd
	export NCEPLIBS_DIR=$DIR/nceplibs
	export NETCDF=$DIR/NETCDF

	if [ ${auto_config} -eq 1 ]; then
		echo 8 | ./configure #Option 8 gfortran compiler with distributed memory
	else
		./configure #Option 8 gfortran compiler with distributed memory
	fi

	#make if statement for gcc-9 or older
	export GCC_VERSION=$(gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		z="58 63"
		for X in $z; do
			sed -i "${X}s/(FOPT)/(FOPT) $fallow_argument $boz_argument  /g" ${WRF_FOLDER}/UPPV4.1/configure.upp
		done
	else
		echo ""
		echo "Loop not needed"
	fi

	./compile
	cd ${WRF_FOLDER}/UPPV4.1/scripts
	echo $PASSWD | sudo -S cpan install XML::LibXML
	chmod +x run_unipost

	# IF statement to check that all files were created.
	cd ${WRF_FOLDER}/UPPV4.1/exec
	n=$(ls ./*.exe | wc -l)
	if (($n == 1)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing UPPV4.1. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files. Exiting the script."
		read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
		exit
	fi

	echo " "

	######################## ARWpost V3.1  ############################
	## ARWpost
	##Configure #3
	###################################################################
	cd ${WRF_FOLDER}/Downloads
	wget -c http://www2.mmm.ucar.edu/wrf/src/ARWpost_V3.tar.gz
	tar -xvzf ARWpost_V3.tar.gz -C ${WRF_FOLDER}/
	cd ${WRF_FOLDER}/ARWpost
	./clean -a
	sed -i -e 's/-lnetcdf/-lnetcdff -lnetcdf/g' ${WRF_FOLDER}/ARWpost/src/Makefile
	export NETCDF=$DIR/NETCDF

	if [ ${auto_config} -eq 1 ]; then
		echo 3 | ./configure #Option 3 gfortran compiler with distributed memory
	else
		./configure #Option 3 gfortran compiler with distributed memory
	fi

	export GCC_VERSION=$(gcc -dumpfullversion | awk '{print$1}')
	export GFORTRAN_VERSION=$(gfortran -dumpfullversion | awk '{print$1}')
	export GPLUSPLUS_VERSION=$(g++ -dumpfullversion | awk '{print$1}')

	export GCC_VERSION_MAJOR_VERSION=$(echo $GCC_VERSION | awk -F. '{print $1}')
	export GFORTRAN_VERSION_MAJOR_VERSION=$(echo $GFORTRAN_VERSION | awk -F. '{print $1}')
	export GPLUSPLUS_VERSION_MAJOR_VERSION=$(echo $GPLUSPLUS_VERSION | awk -F. '{print $1}')

	export version_10="10"

	if [ $GCC_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GFORTRAN_VERSION_MAJOR_VERSION -ge $version_10 ] || [ $GPLUSPLUS_VERSION_MAJOR_VERSION -ge $version_10 ]; then
		sed -i '32s/-ffree-form -O -fno-second-underscore -fconvert=big-endian -frecord-marker=4/-ffree-form -O -fno-second-underscore -fconvert=big-endian -frecord-marker=4 ${fallow_argument} /g' configure.arwp
	fi

	sed -i -e 's/-C -P -traditional/-P -traditional/g' ${WRF_FOLDER}/ARWpost/configure.arwp
	./compile

	export PATH=${WRF_FOLDER}/ARWpost/ARWpost.exe:$PATH

	echo " "
	################################ OpenGrADS ##################################
	#Verison 2.2.1 32bit of Linux
	#############################################################################
	if [[ $GRADS_PICK -eq 1 ]]; then
		cd ${WRF_FOLDER}/Downloads
		tar -xzvf opengrads-2.2.1.oga.1-bundle-x86_64-pc-linux-gnu-glibc_2.17.tar.gz -C ${WRF_FOLDER}/
		cd ${WRF_FOLDER}/
		mv ${WRF_FOLDER}/opengrads-2.2.1.oga.1 ${WRF_FOLDER}/GrADS
		cd GrADS/Contents
		wget -c https://github.com/regisgrundig/SIMOP/blob/master/g2ctl.pl
		chmod +x g2ctl.pl
		wget -c https://sourceforge.net/projects/opengrads/files/wgrib2/0.1.9.4/wgrib2-v0.1.9.4-bin-i686-glib2.5-linux-gnu.tar.gz
		tar -xzvf wgrib2-v0.1.9.4-bin-i686-glib2.5-linux-gnu.tar.gz
		cd wgrib2-v0.1.9.4/bin
		mv wgrib2 ${WRF_FOLDER}/GrADS/Contents
		cd ${WRF_FOLDER}/GrADS/Contents
		rm wgrib2-v0.1.9.4-bin-i686-glib2.5-linux-gnu.tar.gz
		rm -r wgrib2-v0.1.9.4

		export PATH=${WRF_FOLDER}/GrADS/Contents:$PATH

		echo " "
	fi
	################################## GrADS ###############################
	# Version  2.2.1
	# Sublibs library instructions: http://cola.gmu.edu/grads/gadoc/supplibs2.html
	# GrADS instructions: http://cola.gmu.edu/grads/downloads.php
	########################################################################
	if [[ $GRADS_PICK -eq 2 ]]; then
		cd ${WRF_FOLDER}/Downloads
		wget -c ftp://cola.gmu.edu/grads/2.2/grads-2.2.1-bin-centos7.4-x86_64.tar.gz
		tar -xzvf grads-2.2.1-bin-centos7.4-x86_64.tar.gz -C ${WRF_FOLDER}
		cd ${WRF_FOLDER}/grads-2.2.1/bin
		chmod 775 *

	fi

	##################### NCAR COMMAND LANGUAGE           ##################
	########### NCL compiled via Conda                    ##################
	########### This is the preferred method by NCAR      ##################
	########### https://www.ncl.ucar.edu/index.shtml      ##################
	#Installing Miniconda3 to WRF-Hydro directory and updating libraries

	pip install --upgrade --force-reinstall zstandard
	pip install --upgrade --force-reinstall zstd
	pip3 install --upgrade --force-reinstall zstandard
	pip3 install --upgrade --force-reinstall zstd
	export Miniconda_Install_DIR=${WRF_FOLDER}/miniconda3

	mkdir -p $Miniconda_Install_DIR

	wget -c https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $Miniconda_Install_DIR/miniconda.sh
	bash $Miniconda_Install_DIR/miniconda.sh -b -u -p $Miniconda_Install_DIR

	rm -rf $Miniconda_Install_DIR/miniconda.sh

	export PATH=${WRF_FOLDER}/miniconda3/bin:$PATH

	source $Miniconda_Install_DIR/etc/profile.d/conda.sh

	$Miniconda_Install_DIR/bin/conda init bash
	$Miniconda_Install_DIR/bin/conda init zsh
	$Miniconda_Install_DIR/bin/conda init tcsh
	$Miniconda_Install_DIR/bin/conda init xonsh
	$Miniconda_Install_DIR/bin/conda init powershell

	conda config --add channels conda-forge
	conda config --set auto_activate_base false
	conda update -n root --all -y

	echo " "

	echo " "
	#Installing NCL via Conda
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda init bash
	conda activate base
	conda create -n ncl_stable -c conda-forge ncl -y
	conda activate ncl_stable

	conda deactivate
	conda deactivate
	conda deactivate

	echo " "

	############################OBSGRID###############################
	## OBSGRID
	## Downloaded from git tagged releases
	## Option #2
	########################################################################
	cd ${WRF_FOLDER}/
	git clone https://github.com/wrf-model/OBSGRID.git
	cd ${WRF_FOLDER}/OBSGRID

	./clean -a
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda init bash
	conda activate ncl_stable

	export HOME=$(
		cd
		pwd
	)
	export DIR=${WRF_FOLDER}/Libs
	export NETCDF=$DIR/NETCDF

	if [ ${auto_config} -eq 1 ]; then
		echo 2 | ./configure 2>&1 | tee configure.log #Option 2 for gfortran/gcc and distribunted memory
	else
		./configure 2>&1 | tee configure.log #Option 2 for gfortran/gcc and distribunted memory
	fi

	sed -i '27s/-lnetcdf -lnetcdff/ -lnetcdff -lnetcdf/g' configure.oa

	sed -i '31s/-lncarg -lncarg_gks -lncarg_c -lX11 -lm -lcairo/-lncarg -lncarg_gks -lncarg_c -lX11 -lm -lcairo -lfontconfig -lpixman-1 -lfreetype -lhdf5 -lhdf5_hl /g' configure.oa

	sed -i '39s/-frecord-marker=4/-frecord-marker=4 ${fallow_argument} /g' configure.oa

	sed -i '44s/=	/=	${fallow_argument} /g' configure.oa

	sed -i '45s/-C -P -traditional/-P -traditional/g' configure.oa

	echo " "
	./compile 2>&1 | tee compile.obsgrid.log

	conda deactivate
	conda deactivate
	conda deactivate

	echo " "
	# IF statement to check that all files were created.
	cd ${WRF_FOLDER}/OBSGRID
	n=$(ls ./*.exe | wc -l)
	if (($n == 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing OBSGRID. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files. Exiting the script."
		read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
		exit
	fi

	echo " "
	############################## RIP4 #####################################
	mkdir ${WRF_FOLDER}/RIP4
	cd ${WRF_FOLDER}/Downloads
	wget -c https://www2.mmm.ucar.edu/wrf/src/RIP_47.tar.gz
	tar -xvzf RIP_47.tar.gz -C ${WRF_FOLDER}/RIP4
	cd ${WRF_FOLDER}/RIP4/RIP_47
	mv * ..
	cd ${WRF_FOLDER}/RIP4
	rm -rd RIP_47
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
	conda activate ncl_stable
	conda install -c conda-forge c-compiler fortran-compiler cxx-compiler -y

	export RIP_ROOT=${WRF_FOLDER}/RIP4
	export NETCDF=$DIR/NETCDF
	export NCARG_ROOT=${WRF_FOLDER}/anaconda3/envs/ncl_stable

	sed -i '349s|-L${NETCDF}/lib -lnetcdf $NETCDFF|-L${NETCDF}/lib $NETCDFF -lnetcdff -lnetcdf -lnetcdf -lnetcdff_C -lhdf5 |g' ${WRF_FOLDER}/RIP4/configure

	sed -i '27s|NETCDFLIB	= -L${NETCDF}/lib -lnetcdf CONFIGURE_NETCDFF_LIB|NETCDFLIB	= -L</usr/lib/x86_64-linux-gnu/libm.a> -lm -L${NETCDF}/lib CONFIGURE_NETCDFF_LIB -lnetcdf -lhdf5 -lhdf5_hl -lgfortran -lgcc -lz |g' ${WRF_FOLDER}/RIP4/arch/preamble

	sed -i '31s|-L${NCARG_ROOT}/lib -lncarg -lncarg_gks -lncarg_c -lX11 -lXext -lpng -lz CONFIGURE_NCARG_LIB| -L${NCARG_ROOT}/lib -lncarg -lncarg_gks -lncarg_c -lX11 -lXext -lpng -lz -lcairo -lfontconfig -lpixman-1 -lfreetype -lexpat -lpthread -lbz2 -lXrender -lgfortran -lgcc -L</usr/lib/x86_64-linux-gnu/> -lm -lhdf5 -lhdf5_hl |g' ${WRF_FOLDER}/RIP4/arch/preamble

	sed -i '33s| -O|-fallow-argument-mismatch -O |g' ${WRF_FOLDER}/RIP4/arch/configure.defaults

	sed -i '35s|=|= -L${WRF_FOLDER}/LIBS/grib2/lib -lhdf5 -lhdf5_hl |g' ${WRF_FOLDER}/RIP4/arch/configure.defaults

	if [ ${auto_config} -eq 1 ]; then
		echo 3 | ./configure #Option 3 gfortran compiler with distributed memory
	else
		./configure #Option 3 gfortran compiler with distributed memory
	fi

	./compile

	conda deactivate
	conda deactivate
	conda deactivate

	echo " "
	##################### WRF Python           ##################
	########### WRf-Python compiled via Conda  ##################
	########### This is the preferred method by NCAR      ##################
	##### https://wrf-python.readthedocs.io/en/latest/installation.html  ##################
	source $Miniconda_Install_DIR/etc/profile.d/conda.sh
conda env create -f $HOME/WRF-MOSIT/wrf-python-stable.yml

	echo " "

	################################## QGIS #####################################
	#QGIS (Quantum Geographic Information System) is a free and open-source platform that allows users to
	#analyze, view, and edit geospatial data. It supports both vector and raster layers, as well as various #web services, and is extensible through community-developed plugins. Key features include map
	#creation, spatial analysis, and data management.
	#############################################################################

	conda env create -f $HOME/WRF-MOSIT/qgis.3.28.8.yml

	echo " "



	############################ WRF ${WPS_VERSION}  #################################
	## WRF v${WPS_VERSION}
	## Downloaded from git tagged releases
	# option 34, option 1 for gfortran and distributed memory w/basic nesting
	# large file support enable with WRFiO_NCD_LARGE_FILE_SUPPORT=1
	# In the namelist.input, the following settings support pNetCDF by setting value to 11:
	# io_form_boundary
	# io_form_history
	# io_form_auxinput2
	# io_form_auxhist2
	# Note that you need set nocolons = .true. in the section &time_control of namelist.input
	########################################################################
	cd ${WRF_FOLDER}/Downloads
	wget -c https://github.com/wrf-model/WRF/releases/download/v${WRF_VERSION}/v${WRF_VERSION}.tar.gz -O WRF-${WRF_VERSION}.tar.gz
	tar -xvzf WRF-${WRF_VERSION}.tar.gz -C ${WRF_FOLDER}/

	# If statment for changing folder name
	if [ -d "${WRF_FOLDER}/WRF" ]; then
		mv -f ${WRF_FOLDER}/WRF ${WRF_FOLDER}/WRFV${WRF_VERSION}
	fi

	cd ${WRF_FOLDER}/WRFV${WRF_VERSION}
	export WRFIO_NCD_LARGE_FILE_SUPPORT=1
	./clean -a

	if [ ${auto_config} -eq 1 ]; then
		sed -i '443s/.*/  $response = "34 \\n";/g' ${WRF_FOLDER}/WRFV${WRF_VERSION}/arch/Config.pl # Answer for compiler choice
		sed -i '909s/.*/  $response = "1 \\n";/g' ${WRF_FOLDER}/WRFV${WRF_VERSION}/arch/Config.pl  #Answer for basic nesting
		./configure 2>&1 | tee configure.log
	else
		./configure 2>&1 | tee configure.log #Option 34 gfortran compiler with distributed memory option 1 for basic nesting
	fi

	./compile -j $CPU_HALF_EVEN em_real 2>&1 | tee compile.wrf1.log

	export WRF_DIR=${WRF_FOLDER}/WRFV${WRF_VERSION}

	# IF statement to check that all files were created.
	cd ${WRF_FOLDER}/WRFV${WRF_VERSION}/main
	n=$(ls ./*.exe | wc -l)
	if (($n >= 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		cd ${WRF_FOLDER}/WRFV${WRF_VERSION}
		./compile -j $CPU_HALF_EVEN em_real 2>&1 | tee compile.wrf2.log
		cd ${WRF_FOLDER}/WRFV${WRF_VERSION}/main
		n=$(ls ./*.exe | wc -l)
		if (($n >= 3)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "
	############################WPSV${WPS_VERSION}#####################################
	## WPS v${WPS_VERSION}
	## Downloaded from git tagged releases
	#Option 3 for gfortran and distributed memory
	########################################################################

	cd ${WRF_FOLDER}/Downloads
	wget -c https://github.com/wrf-model/WPS/archive/refs/tags/v${WPS_VERSION}.tar.gz -O WPS-${WPS_VERSION}.tar.gz
	tar -xvzf WPS-${WPS_VERSION}.tar.gz -C ${WRF_FOLDER}/
	cd ${WRF_FOLDER}/WPS-${WPS_VERSION}
	./clean -a

	if [ ${auto_config} -eq 1 ]; then
		echo 3 | ./configure 2>&1 | tee configure.log #Option 3 for gfortran and distributed memory
	else
		./configure 2>&1 | tee configure.log #Option 3 gfortran compiler with distributed memory
	fi
	./compile 2>&1 | tee compile.wps.log

	echo " "
	# IF statement to check that all files were created.
	cd ${WRF_FOLDER}/WPS-${WPS_VERSION}
	n=$(ls ./*.exe | wc -l)
	if (($n == 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		./compile 2>&1 | tee compile.wps2.log
		cd ${WRF_FOLDER}/WPS-${WPS_VERSION}
		n=$(ls ./*.exe | wc -l)
		if (($n == 3)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "
	############################WRFPLUS 4DVAR###############################
	## WRFPLUS v${WPS_VERSION} 4DVAR
	## Downloaded from git tagged releases
	## WRFPLUS is built within the WRF git folder
	## Does not include RTTOV Libarary for radiation data.  If wanted will need to install library then reconfigure
	##Note: if you intend to run both 3DVAR and 4DVAR experiments, it is not necessary to compile the code twice.
	#Option 18 for gfortran/gcc and distribunted memory
	########################################################################
	cd ${WRF_FOLDER}/Downloads
	tar -xvzf WRF-${WRF_VERSION}.tar.gz -C ${WRF_FOLDER}/WRFPLUS

	# If statment for changing folder name
	if [ -d "${WRF_FOLDER}/WRFPLUS/WRF" ]; then
		mv -f ${WRF_FOLDER}/WRFPLUS/WRF ${WRF_FOLDER}/WRFPLUS/WRFV${WRF_VERSION}
	fi

	cd ${WRF_FOLDER}/WRFPLUS/WRFV${WRF_VERSION}
	mv * ${WRF_FOLDER}/WRFPLUS
	cd ${WRF_FOLDER}/WRFPLUS
	rm -rf WRFV${WRF_VERSION}/
	export NETCDF=$DIR/NETCDF
	export HDF5=$DIR/grib2
	export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH
	./clean -a

	if [ ${auto_config} -eq 1 ]; then
		echo 18 | ./configure wrfplus 2>&1 | tee configure.log #Option 18 for gfortran/gcc and distribunted memory
	else
		./configure wrfplus 2>&1 | tee configure.log #Option 18 for gfortran/gcc and distribunted memory
	fi
	echo " "
	./compile -j $CPU_HALF_EVEN wrfplus 2>&1 | tee compile.wrfplus.log
	export WRFPLUS_DIR=${WRF_FOLDER}/WRFPLUS

	echo " "
	# IF statement to check that all files were created.
	cd ${WRF_FOLDER}/WRFPLUS/main
	n=$(ls ./wrfplus.exe | wc -l)
	if (($n == 1)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WRF Plus 4DVAR. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		cd ${WRF_FOLDER}/WRFPLUS/
		./compile -j $CPU_HALF_EVEN wrfplus 2>&1 | tee compile.wrfplus2.log
		cd ${WRF_FOLDER}/WRFPLUS/main
		n=$(ls ./wrfplus.exe | wc -l)
		if (($n == 1)); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WRF Plus 4DVAR. I am going to wait for 5 seconds only ..."
		else
			echo "Missing one or more expected files."
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi

	echo " "
	############################WRFDA 4DVAR###############################
	## WRFDA v${WPS_VERSION} 4DVAR
	## Downloaded from git tagged releases
	## WRFDA is built within the WRFPLUS folder
	## Does not include RTTOV Libarary for radiation data.  If wanted will need to install library then reconfigure
	##Note: if you intend to run both 3DVAR and 4DVAR experiments, it is not necessary to compile the code twice.
	#Option 18 for gfortran/gcc and distribunted memory
	########################################################################
	cd ${WRF_FOLDER}/Downloads
	mkdir ${WRF_FOLDER}/WRFDA
	tar -xvzf WRF-${WRF_VERSION}.tar.gz -C ${WRF_FOLDER}/WRFDA

	# If statment for changing folder name
	if [ -d "${WRF_FOLDER}/WRFDA/WRF" ]; then
		mv -f ${WRF_FOLDER}/WRFDA/WRF ${WRF_FOLDER}/WRFDA/WRFV${WRF_VERSION}
	fi

	cd ${WRF_FOLDER}/WRFDA/WRFV${WRF_VERSION}
	mv * ${WRF_FOLDER}/WRFDA
	cd ${WRF_FOLDER}/WRFDA
	rm -rf WRFV${WRF_VERSION}/
	export NETCDF=$DIR/NETCDF
	export HDF5=$DIR/grib2
	export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH
	export WRFPLUS_DIR=${WRF_FOLDER}/WRFPLUS
	./clean -a

	if [ ${auto_config} -eq 1 ]; then
		echo 18 | ./configure 4dvar 2>&1 | tee configure.log #Option 18 for gfortran/gcc and distribunted memory
	else
		./configure 4dvar 2>&1 | tee configure.log #Option 18 for gfortran/gcc and distribunted memory
	fi
	echo " "
	./compile all_wrfvar 2>&1 | tee compile.wrf4dvar.log
	echo " "
	# IF statement to check that all files were created.
	cd ${WRF_FOLDER}/WRFDA/var/da
	n=$(ls ./*.exe | wc -l)
	cd ${WRF_FOLDER}/WRFDA/var/obsproc/src
	m=$(ls ./*.exe | wc -l)
	if ((($n == 43) && ($m == 1))); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WRFDA. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files."
		echo "Running compiler again"
		cd ${WRF_FOLDER}/WRFDA
		./compile -j $CPU_HALF_EVEN all_wrfvar 2>&1 | tee compile.chem.wrfvar2.log
		cd ${WRF_FOLDER}/WRFDA/var/da
		n=$(ls ./*.exe | wc -l)
		cd ${WRF_FOLDER}/WRFDA/var/obsproc/src
		m=$(ls ./*.exe | wc -l)
		if ((($n == 43) && ($m == 1))); then
			echo "All expected files created."
			read -r -t 5 -p "Finished installing WRFDA. I am going to wait for 5 seconds only ..."
		else
			read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
			exit
		fi
	fi
	echo " "

	echo " "
	######################## WPS Domain Setup Tools ########################
	## DomainWizard
	cd ${WRF_FOLDER}/Downloads
	wget -c http://esrl.noaa.gov/gsd/wrfportal/domainwizard/WRFDomainWizard.zip
	mkdir ${WRF_FOLDER}/WRFDomainWizard
	unzip WRFDomainWizard.zip -d ${WRF_FOLDER}/WRFDomainWizard
	chmod +x ${WRF_FOLDER}/WRFDomainWizard/run_DomainWizard

	echo " "
	######################## WPF Portal Setup Tools ########################
	## WRFPortal
	cd ${WRF_FOLDER}/Downloads
	wget -c https://esrl.noaa.gov/gsd/wrfportal/portal/wrf-portal.zip
	mkdir ${WRF_FOLDER}/WRFPortal
	unzip wrf-portal.zip -d ${WRF_FOLDER}/WRFPortal
	chmod +x ${WRF_FOLDER}/WRFPortal/runWRFPortal

	echo " "

	######################## Static Geography Data inc/ Optional ####################
	# http://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	# These files are large so if you only need certain ones comment the others off
	# All files downloaded and untarred is 200GB
	# https://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	#################################################################################
	cd ${WRF_FOLDER}/Downloads
	mkdir ${WRF_FOLDER}/GEOG
	mkdir ${WRF_FOLDER}/GEOG/WPS_GEOG

	echo " "
	echo "Mandatory WRF Preprocessing System (WPS) Geographical Input Data Mandatory Fields Downloads"
	echo " "
	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_high_res_mandatory.tar.gz
	tar -xvzf geog_high_res_mandatory.tar.gz -C ${WRF_FOLDER}/GEOG/

	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_low_res_mandatory.tar.gz
	tar -xvzf geog_low_res_mandatory.tar.gz -C ${WRF_FOLDER}/GEOG/
	mv ${WRF_FOLDER}/GEOG/WPS_GEOG_LOW_RES/ ${WRF_FOLDER}/GEOG/WPS_GEOG

	if [ ${WPS_Specific_Applications} -eq 1 ]; then
		echo " "
		echo " WPS Geographical Input Data Mandatory for Specific Applications"
		echo " "

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_thompson28_chem.tar.gz
		tar -xvzf geog_thompson28_chem.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_noahmp.tar.gz
		tar -xvzf geog_noahmp.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/irrigation.tar.gz
		tar -xvzf irrigation.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG
		mkdir ${WRF_FOLDER}/GEOG/WPS_GEOG/irrigation
		mv ${WRF_FOLDER}/GEOG/WPS_GEOG/fao ${WRF_FOLDER}/GEOG/WPS_GEOG/irrigation

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_px.tar.gz
		tar -xvzf geog_px.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_urban.tar.gz
		tar -xvzf geog_urban.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_ssib.tar.gz
		tar -xvzf geog_ssib.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/lake_depth.tar.bz2
		tar -xvf lake_depth.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/topobath_30s.tar.bz2
		tar -xvf topobath_30s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/gsl_gwd.tar.bz2
		tar -xvf gsl_gwd.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG
	fi

	if [ ${Optional_GEOG} -eq 1 ]; then
		echo " "
		echo "Optional WPS Geographical Input Data"
		echo " "

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_older_than_2000.tar.gz
		tar -xvzf geog_older_than_2000.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s_with_lakes.tar.gz
		tar -xvzf modis_landuse_20class_15s_with_lakes.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_alt_lsm.tar.gz
		tar -xvzf geog_alt_lsm.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/nlcd2006_ll_9s.tar.bz2
		tar -xvf nlcd2006_ll_9s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/updated_Iceland_LU.tar.gz
		tar -xvf updated_Iceland_LU.tar.gz -C ${WRF_FOLDER}/GEOG/WPS_GEOG

		wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s.tar.bz2
		tar -xvf modis_landuse_20class_15s.tar.bz2 -C ${WRF_FOLDER}/GEOG/WPS_GEOG
	fi
fi

################################################################
## HWRF installation with parallel process.
# Download and install required library and data files for HWRF.
# Tested in Ubuntu 20.0${WPS_VERSION} LTS & Ubuntu 22.04 LTS
# Built in 64-bit system
# Tested with current available libraries on 10/10/2023
# Intel compilers utilized
# Compatibile only with WRF 4.3.3 & WPS 4.3.1 with NMM core
# If newer libraries exist edit script paths for changes
# Estimated Run Time ~ 45 - 90 Minutes with 10mb/s downloadspeed.
# Special thanks to:
# Youtube's meteoadriatic, GitHub user jamal919.
# University of Manchester's  Doug L
# University of Tunis El Manar's Hosni
# GSL's Jordan S.
# NCAR's Mary B., Christine W., & Carl D.
# DTC's Julie P., Tara J., George M., & John H.
# UCAR's Katelyn F., Jim B., Jordan P., Kevin M.,
##############################################################

if [ "$HWRF_PICK" = "1" ]; then

	############################# Basic package managment ############################

	echo $PASSWD | sudo -S apt -y update
	echo $PASSWD | sudo -S apt -y upgrade && sudo -S apt -y autoremove

	# download the key to system keyring; this and the following echo command are
	# needed in order to install the Intel compilers
	wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB |
		gpg --dearmor | sudo tee /usr/share/keyrings/oneapi-archive-keyring.gpg >/dev/null

	# add signed entry to apt sources and configure the APT client to use Intel repository:
	echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list

	# this update should get the Intel package info from the Intel repository
	echo $PASSWD | sudo -S apt -y update

	# necessary binary packages (especially pkg-config and build-essential)
	echo $PASSWD | sudo -S apt -y install autoconf automake bison build-essential byacc cmake csh curl default-jdk default-jre emacs flex g++ gawk gcc gfortran git ksh libcurl4-openssl-dev libjpeg-dev libncurses6 libpixman-1-dev libpng-dev libtool libxml2 libxml2-dev m4 make  ncview okular openbox pipenv pkg-config  python3 python3-dev python3-pip python3-dateutil tcsh unzip xauth xorg time

	# install the Intel compilers
	echo $PASSWD | sudo -S apt -y install intel-basekit
	echo $PASSWD | sudo -S apt -y install intel-hpckit
	echo $PASSWD | sudo -S apt -y install intel-oneapi-python

	echo $PASSWD | sudo -S apt -y update

	# make sure some critical packages have been installed
	which cmake pkg-config make gcc g++ gfortran

	# add the Intel compiler file paths to various environment variables
	source /opt/intel/oneapi/setvars.sh

	# some of the libraries we install below need one or more of these variables
	export CC=icc
	export CXX=icpc
	export FC=ifort
	export F77=ifort
	export F90=ifort
	export MPIFC=mpiifort
	export MPIF77=mpiifort
	export MPIF90=mpiifort
	export MPICC=mpiicc
	export MPICXX=mpiicpc

	############################# CPU Core Management ####################################

	export CPU_CORE=$(nproc) # number of available cores on system
	export CPU_6CORE="6"
	export CPU_HALF=$(($CPU_CORE / 2)) # half of availble cores on system
	# Forces CPU cores to even number to avoid partial core export. ie 7 cores would be 3.5 cores.
	export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))

	# If statement for low core systems.  Forces computers to only use 1 core if there are 4 cores or less on the system.
	if [ $CPU_CORE -le $CPU_6CORE ]; then
		export CPU_HALF_EVEN="2"
	else
		export CPU_HALF_EVEN=$(($CPU_HALF - ($CPU_HALF % 2)))
	fi

	echo "##########################################"
	echo "Number of cores being used $CPU_HALF_EVEN"
	echo "##########################################"

	############################## Directory Listing ############################
	# makes necessary directories

	export HOME=$(
		cd
		pwd
	)
	mkdir $HOME/HWRF
	export HWRF_FOLDER=$HOME/HWRF
	cd $HWRF_FOLDER
	mkdir Downloads
	mkdir Libs
	export DIR=$HWRF_FOLDER/Libs
	mkdir Libs/grib2
	mkdir Libs/NETCDF
	mkdir Libs/LAPACK

	############################## Downloading Libraries ############################
	# these are all the libraries we're installing, including HWRF itself

	cd Downloads
	wget -c https://github.com/madler/zlib/archive/refs/tags/v$Zlib_Version.tar.gz
	wget -c https://github.com/HDFGroup/hdf5/archive/refs/tags/hdf5-$HDF5_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-c/archive/refs/tags/v$Netcdf_C_Version.tar.gz
	wget -c https://github.com/Unidata/netcdf-fortran/archive/refs/tags/v$Netcdf_Fortran_Version.tar.gz
	wget -c https://download.sourceforge.net/libpng/libpng-$Libpng_Version.tar.gz
	wget -c https://www.ece.uvic.ca/~frodo/jasper/software/jasper-$Jasper_Version.zip
	wget -c https://github.com/pmodels/mpich/releases/download/v$Mpich_Version/mpich-$Mpich_Version.tar.gz
	wget -c https://parallel-netcdf.github.io/Release/pnetcdf-$Pnetcdf_Version.tar.gz
	wget -c https://sourceforge.net/projects/opengrads/files/grads2/2.2.1.oga.1/Linux%20%2864%20Bits%29/opengrads-2.2.1.oga.1-bundle-x86_64-pc-linux-gnu-glibc_2.17.tar.gz
	wget -c https://github.com/Reference-LAPACK/lapack/archive/refs/tags/v3.10.1.tar.gz

	wget -c https://dtcenter.org/sites/default/files/HWRF_v4.0a_hwrf-utilities.tar.gz
	wget -c https://dtcenter.org/sites/default/files/HWRF_v4.0a_pomtc.tar.gz
	wget -c https://dtcenter.org/sites/default/files/HWRF_v4.0a_ncep-coupler.tar.gz
	wget -c https://dtcenter.org/sites/default/files/HWRF_v4.0a_gfdl-vortextracker.tar.gz
	wget -c https://dtcenter.org/sites/default/files/HWRF_v4.0a_GSI.tar.gz
	wget -c https://dtcenter.org/sites/default/files/HWRF_v4.0a_UPP.tar.gz
	wget -c https://dtcenter.org/sites/default/files/HWRF_v4.0a_hwrfrun.tar.gz
	wget -c https://dtcenter.org/community-code/hurricane-wrf-hwrf/datasets#data-4

	############################# ZLib ############################

	cd $HWRF_FOLDER/Downloads
	tar -xvzf v$Zlib_Version.tar.gz
	cd zlib-$Zlib_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log
	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS CFLAGS="-fPIC -diag-disable=10441" ./configure --prefix=$DIR/grib2
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	# make check | tee zlib.makecheck.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log 2>&1 | tee zlib.makeinstall.log

	############################# LibPNG ############################

	cd $HWRF_FOLDER/Downloads

	# other libraries below need these variables to be set
	export LDFLAGS=-L$DIR/grib2/lib
	export CPPFLAGS=-I$DIR/grib2/include

	tar -xvzf libpng-$Libpng_Version.tar.gz
	cd libpng-$Libpng_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS CFLAGS="-fPIC -diag-disable=10441" ./configure --prefix=$DIR/grib2

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	#make -j $CPU_HALF_EVEN check | tee libpng.makecheck.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log

	############################# JasPer ############################

	cd $HWRF_FOLDER/Downloads
	unzip jasper-$Jasper_Version.zip
	cd jasper-$Jasper_Version/
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS CFLAGS="-fPIC -diag-disable=10441" ./configure --prefix=$DIR/grib2

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	#make -j $CPU_HALF_EVEN check | tee jasper.makecheck.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log 2>&1 2>&1 | tee make.install.log

	# other libraries below need these variables to be set
	export JASPERLIB=$DIR/grib2/lib
	export JASPERINC=$DIR/grib2/include

	############################# HDF5 library for NetCDF4 & parallel functionality ############################

	cd $HWRF_FOLDER/Downloads
	tar -xvzf hdf5-$HDF5_Version.tar.gz
	cd hdf5-hdf5-$HDF5_Version
	autoreconf -i -f 2>&1 | tee autoreconf.log

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS CFLAGS="-fPIC -diag-disable=10441" ./configure --prefix=$DIR/grib2 --with-zlib=$DIR/grib2 --enable-hl --enable-fortran --enable-parallel

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	#make VERBOSE=1 -j $CPU_HALF_EVEN check | tee hdf5.makecheck.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log 2>&1 | tee make.install.log

	# other libraries below need these variables to be set
	export HDF5=$DIR/grib2
	export LD_LIBRARY_PATH=$DIR/grib2/lib:$LD_LIBRARY_PATH
	export PATH=$HDF5/bin:$PATH
	export PHDF5=$DIR/grib2

	############################# Install Parallel-NetCDF ##############################

	cd $HWRF_FOLDER/Downloads
	tar -xvzf pnetcdf-$Pnetcdf_Version.tar.gz
	cd pnetcdf-$Pnetcdf_Version

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS CFLAGS="-fPIC -diag-disable=10441" ./configure --prefix=$DIR/grib2

	make -j $CPU_HALF_EVEN | tee pnetcdf.make.log
	#make check | tee pnetcdf.makecheck.log
	#make ptests | tee ptests.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log 2>&1 | tee pnetcdf.makeinstall.log

	# other libraries below need these variables to be set
	export PNETCDF=$DIR/grib2

	echo " "
	export LD_LIBRARY_PATH=$PNETCDF/lib:$LD_LIBRARY_PATH
	export PATH=$PNETCDF/bin:$PATH

	############################## Install NETCDF-C Library ############################

	cd $HWRF_FOLDER/Downloads
	tar -xzvf v$Netcdf_C_Version.tar.gz
	cd netcdf-c-$Netcdf_C_Version/

	# these variables need to be set for the NetCDF-C install to work
	export CPPFLAGS=-I$DIR/grib2/include
	export LDFLAGS=-L$DIR/grib2/lib
	export LIBS="-lhdf5_hl -lhdf5 -lz -lcurl -lpnetcdf -lm -ldl"

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS CFLAGS="-fPIC -diag-disable=10441" ./configure --prefix=$DIR/NETCDF --disable-dap --enable-netcdf-4 --enable-netcdf4 --enable-pnetcdf --enable-parallel-tests 2>&1 | tee configure.log
	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	#make check | tee netcdf.makecheck.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log 2>&1 | tee netcdf.makeinstall.log

	# other libraries below need these variables to be set
	export PATH=$DIR/NETCDF/bin:$PATH
	export NETCDF=$DIR/NETCDF

	############################## NetCDF-Fortran library ############################

	cd $HWRF_FOLDER/Downloads
	tar -xvzf v$Netcdf_Fortran_Version.tar.gz
	cd netcdf-fortran-$Netcdf_Fortran_Version/

	# these variables need to be set for the NetCDF-Fortran install to work
	export LD_LIBRARY_PATH=$DIR/NETCDF/lib:$LD_LIBRARY_PATH
	export CPPFLAGS="-I$DIR/NETCDF/include -I$DIR/grib2/include"
	export LDFLAGS="-L$DIR/NETCDF/lib -L$DIR/grib2/lib"
	export LIBS="-lnetcdf -lpnetcdf -lm -lcurl -lhdf5_hl -lhdf5 -lz -ldl"

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS CFLAGS="-fPIC -diag-disable=10441" ./configure --prefix=$DIR/NETCDF --enable-netcdf-4 --enable-netcdf4 --enable-parallel-tests --enable-hdf5

	automake -a -f 2>&1 | tee automake.log
	make -j $CPU_HALF_EVEN 2>&1 | tee make.log
	#make check | tee netcdf-f.makecheck.log
	make -j $CPU_HALF_EVEN install 2>&1 | tee make.install.log 2>&1 2>&1 | tee make.install.log

	############################ WRF 4.3.3 #################################
	## WRF v4.3.3
	## NMM core version 3.2
	## Downloaded from git tagged release
	# ifort/icc
	# option 15, distributed memory (dmpar)
	# large file support enable with WRFIO_NCD_LARGE_FILE_SUPPORT=1
	########################################################################

	cd $HWRF_FOLDER/Downloads
	wget -c https://github.com/wrf-model/WRF/archive/refs/tags/v4.3.3.tar.gz -O WRF-4.3.3.tar.gz
	mkdir $HWRF_FOLDER/WRF
	tar -xvzf WRF-4.3.3.tar.gz -C $HWRF_FOLDER/WRF
	cd $HWRF_FOLDER/WRF/WRF-4.3.3

	./clean -a

	# these variables need to be set for the WRF install to work
	export HWRF=1
	export WRF_NMM_CORE=1
	export WRF_NMM_NEST=1
	export JASPERLIB=$DIR/grib2/lib
	export JASPERINC=$DIR/grib2/include
	export PNETCDF_QUILT=1
	export WRFIO_NCD_LARGE_FILE_SUPPORT=1
	export NETCDF_classic=

	# Removing user input for configure.  Choosing correct option for configure with Intel compilers
	sed -i '420s/<STDIN>/15/g' $HWRF_FOLDER/WRF/WRF-4.3.3/arch/Config.pl

	CC=$MPICC FC=$MPIFC CXX=$MPICXX F90=$MPIF90 F77=$MPIF77 CFLAGS=$CFLAGS ./configure # option 15

	# Need to remove mpich/GNU config calls to Intel config calls
	sed -i '169s|mpif90 -f90=$(SFC)|mpiifort|g' $HWRF_FOLDER/WRF/WRF-4.3.3/configure.wrf
	sed -i '170s|mpicc -cc=$(SCC)|mpiicc|g' $HWRF_FOLDER/WRF/WRF-4.3.3/configure.wrf
	sed -i '177s|-w -O3|-diag-disable=10441 -w -O3|g' $HWRF_FOLDER/WRF/WRF-4.3.3/configure.wrf
	./compile -j $CPU_HALF_EVEN nmm_real | tee wrf.nmm.log

	export WRF_DIR=$HWRF_FOLDER/WRF/WRF-4.3.3

	# IF statement to check that all files were created.
	cd $HWRF_FOLDER/WRF/WRF-4.3.3/main
	n=$(ls ./*.exe | wc -l)
	if (($n == 2)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WRF. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files. Exiting the script."
		read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
		exit
	fi

	############################ WPS 4.3.1 #####################################
	## Downloaded from git tagged releases
	# Option 19 for gfortran and distributed memory
	########################################################################
	cd $HWRF_FOLDER/Downloads
	wget -c https://github.com/wrf-model/WPS/archive/refs/tags/v4.3.1.tar.gz -O WPS-4.3.1.tar.gz
	tar -xvzf WPS-4.3.1.tar.gz -C $HWRF_FOLDER/WRF
	cd $HWRF_FOLDER/WRF/WPS-4.3.1

	./clean -a

	# Removing user input for configure.  Choosing correct option for configure with Intel compilers
	sed -i '141s/<STDIN>/19/g' $HWRF_FOLDER/WRF/WPS-4.3.1/arch/Config.pl

	./configure -D #Option 19 for Intel and distributed memory

	sed -i '65s|mpif90|mpiifort|g' $HWRF_FOLDER/WRF/WPS-4.3.1/configure.wps
	sed -i '66s|mpicc|mpiicc|g' $HWRF_FOLDER/WRF/WPS-4.3.1/configure.wps

	./compile | tee compile_wps.log

	# IF statement to check that all files were created.
	cd $HWRF_FOLDER/WRF/WPS-4.3.1
	n=$(ls ./*.exe | wc -l)
	if (($n == 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing WPS. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files. Exiting the script."
		read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
		exit
	fi

	################### LAPACK ###########################

	cd $HWRF_FOLDER/Downloads
	tar -xvzf v3.10.1.tar.gz
	cd lapack-3.10.1
	cp make.inc.example make.inc

	# changing some variables and flags for the cmake build process
	sed -i '9s/ gcc/ icc /g' make.inc
	sed -i '20s/ gfortran/ ifort /g' make.inc
	sed -i '21s/ -O2 -frecursive/  -O2/g' make.inc
	sed -i '23s/ -O0 -frecursive/  -O0/g' make.inc
	sed -i '40s/#TIMER = EXT_ETIME/TIMER = EXT_ETIME/g' make.inc
	sed -i '46s/TIMER = INT_ETIME/#TIMER = INT_ETIME/g' make.inc

	mkdir build && cd build

	# this library uses cmake instead of make to build itself
	cmake -DCMAKE_INSTALL_LIBDIR=$HWRF_FOLDER/Libs/LAPACK ..
	cmake --build . -j $CPU_HALF_EVEN --target install

	# other libraries below need these variables to be set
	export LAPACK_DIR=$HWRF_FOLDER/Libs/LAPACK
	export LD_LIBRARY_PATH=$LAPACK_DIR:$LD_LIBRARY_PATH

	######################################## HWRF-Utilities ##################################

	cd $HWRF_FOLDER/Downloads
	tar -xvzf HWRF_v4.0a_hwrf-utilities.tar.gz -C $HWRF_FOLDER/
	cd $HWRF_FOLDER/
	mv $HWRF_FOLDER/hwrf-utilities $HWRF_FOLDER/HWRF_UTILITIES
	cd $HWRF_FOLDER/HWRF_UTILITIES

	###### SED statements required due to syntax error in original configure script ####
	sed -i '130c\ if [ -z "$MKLROOT" ] && [ ! -z "$MKL" ] ; then' $HWRF_FOLDER/HWRF_UTILITIES/configure
	sed -i '132c\ elif [ ! -z "$MKLROOT" ] && [ -z "$MKL" ] ; then' $HWRF_FOLDER/HWRF_UTILITIES/configure
	sed -i '136c\ if [ ! -z "$JASPERINC" ] && [ ! -z "$JASPERLIB" ] ; then' $HWRF_FOLDER/HWRF_UTILITIES/configure
	sed -i '139c\     if [ ! -z "$PNG_LDFLAGS" ] ; then' $HWRF_FOLDER/HWRF_UTILITIES/configure
	sed -i '144c\    if [ ! -z "$Z_INC" ] ; then' $HWRF_FOLDER/HWRF_UTILITIES/configure
	sed -i '147c\     if [ ! -z "$PNG_CFLAGS" ] ; then' $HWRF_FOLDER/HWRF_UTILITIES/configure
	sed -i '151c\ if [ ! -z "$PNETCDF" ] ; then' $HWRF_FOLDER/HWRF_UTILITIES/configure

	# these variables need to be set for the HWRF-Utilities install to work
	export MKL=$MKLROOT
	export NETCDF=$HWRF_FOLDER/Libs/NETCDF
	export WRF_DIR=$HWRF_FOLDER/WRF/WRF-4.3.3
	export JASPERLIB=$DIR/grib2/lib
	export JASPERINC=$DIR/grib2/include
	export LAPACK_PATH=$LAPACK_DIR

	# Removing user input for configure.  Choosing correct option for configure with Intel compilers
	sed -i '155s/<STDIN>/7/g' $HWRF_FOLDER/HWRF_UTILITIES/arch/Config.pl

	./configure #option 7

	# sed commands to change to Intel compiler format
	sed -i '30s/-openmp/-qopenmp/g' $HWRF_FOLDER/HWRF_UTILITIES/configure.hwrf
	sed -i '47s/ mpif90 -f90=ifort/ mpiifort/g' $HWRF_FOLDER/HWRF_UTILITIES/configure.hwrf
	sed -i '48s/mpif90 -free -f90=ifort/mpiifort -free/g' $HWRF_FOLDER/HWRF_UTILITIES/configure.hwrf
	sed -i '49s/mpicc -cc=icc/mpiicc/g' $HWRF_FOLDER/HWRF_UTILITIES/configure.hwrf

	./compile 2>&1 | tee hwrfutilities.build.log

	# IF statement to check that all files were created.
	cd $HWRF_FOLDER/HWRF_UTILITIES/exec
	n=$(ls ./*.exe | wc -l)
	cd $HWRF_FOLDER/HWRF_UTILITIES/libs
	m=$(ls ./*.a | wc -l)
	if (($n == 79)) && (($m == 28)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing HWRF-UTILITIES. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files. Exiting the script."
		read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
		exit
	fi

	##################################  MPIPOM-TC  ##############################

	cd $HWRF_FOLDER/Downloads
	tar -xvzf HWRF_v4.0a_pomtc.tar.gz -C $HWRF_FOLDER/
	cd $HWRF_FOLDER/
	mv $HWRF_FOLDER/pomtc $HWRF_FOLDER/MPIPOM-TC
	cd $HWRF_FOLDER/MPIPOM-TC

	# these variables need to be set for the MPIPOM-TC install to work
	export JASPER=$HWRF_FOLDER/Libs/grib2/
	export LIB_JASPER_PATH=$HWRF_FOLDER/Libs/grib2/lib
	export LIB_PNG_PATH=$HWRF_FOLDER/Libs/grib2/lib
	export LIB_Z_PATH=$HWRF_FOLDER/Libs/grib2/
	export LIB_W3_PATH=$HWRF_FOLDER/HWRF_UTILITIES/libs/
	export LIB_SP_PATH=$HWRF_FOLDER/HWRF_UTILITIES/libs/
	export LIB_SFCIO_PATH=$HWRF_FOLDER/HWRF_UTILITIES/libs/
	export LIB_BACIO_PATH=$HWRF_FOLDER/HWRF_UTILITIES/libs/
	export LIB_NEMSIO_PATH=$HWRF_FOLDER/HWRF_UTILITIES/libs/
	export LIB_G2_PATH=$HWRF_FOLDER/HWRF_UTILITIES/libs/
	export LIB_BLAS_PATH=$HWRF_FOLDER/HWRF_UTILITIES/libs/
	export PNETCDF=$DIR/grib2

	echo " "

	###### SED statements required due to syntax error in original configure script ####
	sed -i 's/\[\[/\[/g' $HWRF_FOLDER/MPIPOM-TC/configure
	sed -i 's/\]\]/\]/g' $HWRF_FOLDER/MPIPOM-TC/configure
	sed -i 's/==/=/g' $HWRF_FOLDER/MPIPOM-TC/configure
	sed -i '272c\    if [ -s $ldir/libjasper.a ] || [ -s $ldir/libjasper.so ] ; then' $HWRF_FOLDER/MPIPOM-TC/configure
	sed -i '288c\    if [ -s $ldir/libpng.a ] || [ -s $ldir/libpng.so ] ; then' $HWRF_FOLDER/MPIPOM-TC/configure
	sed -i '304c\    if [ -s $ldir/libz.a ] || [ -s $ldir/libz.so ] ; then' $HWRF_FOLDER/MPIPOM-TC/configure

	# Removing user input for configure.  Choosing correct option for configure with Intel compilers
	sed -i '101s/<STDIN>/3/g' $HWRF_FOLDER/MPIPOM-TC/arch/Config.pl

	/bin/bash ./configure #option 3

	# sed commands to change to intel compiler format
	sed -i '32s/ -openmp/ -qopenmp/g' $HWRF_FOLDER/MPIPOM-TC/configure.pom
	sed -i '41s/ mpif90 -f90=$(SFC)/ mpiifort/g' $HWRF_FOLDER/MPIPOM-TC/configure.pom
	sed -i '42s/ mpif90 -f90=$(SFC) -free / mpiifort -free/g' $HWRF_FOLDER/MPIPOM-TC/configure.pom

	./compile | tee ocean.log

	# IF statement to check that all files were created.
	cd $HWRF_FOLDER/MPIPOM-TC/ocean_exec
	n=$(ls ./*.exe | wc -l)
	m=$(ls ./*.xc | wc -l)
	if (($n == 9)) && (($m == 12)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing MPIPOM-TC. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files. Exiting the script."
		read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
		exit
	fi

	################################## GFDL Vortex Tracker ##############################

	cd $HWRF_FOLDER/Downloads
	tar -xvzf HWRF_v4.0a_gfdl-vortextracker.tar.gz -C $HWRF_FOLDER/
	cd $HWRF_FOLDER/
	mv $HWRF_FOLDER/gfdl-vortextracker $HWRF_FOLDER/GFDL_VORTEX_TRACKER
	cd $HWRF_FOLDER/GFDL_VORTEX_TRACKER

	# these variables need to be set for the GFDL Vortex Tracker install to work
	export LIB_JASPER_PATH=$HWRF_FOLDER/Libs/grib2/lib
	export LIB_PNG_PATH=$HWRF_FOLDER/Libs/grib2/lib
	export LIB_Z_PATH=$HWRF_FOLDER/Libs/grib2/
	export LIB_W3_PATH=$HWRF_FOLDER/HWRF_UTILITIES/libs/
	export LIB_BACIO_PATH=$HWRF_FOLDER/HWRF_UTILITIES/libs/
	export LIB_G2_PATH=$HWRF_FOLDER/HWRF_UTILITIES/libs/

	sed -i 's/\[\[/\[/g' $HWRF_FOLDER/GFDL_VORTEX_TRACKER/configure
	sed -i 's/\]\]/\]/g' $HWRF_FOLDER/GFDL_VORTEX_TRACKER/configure
	sed -i 's/==/=/g' $HWRF_FOLDER/GFDL_VORTEX_TRACKER/configure

	# Removing user input for configure.  Choosing correct option for configure with Intel compilers
	sed -i '154s/<STDIN>/2/g' $HWRF_FOLDER/GFDL_VORTEX_TRACKER/arch/Config.pl

	./configure #option 2

	# sed commands to change to Intel compiler format
	sed -i '38s/ mpif90 -fc=$(SFC)/ mpiifort/g' $HWRF_FOLDER/GFDL_VORTEX_TRACKER/configure.trk
	sed -i '39s/ mpif90 -fc=$(SFC) -free/ mpiifort -free/g' $HWRF_FOLDER/GFDL_VORTEX_TRACKER/configure.trk
	sed -i '40s/ mpicc/ mpiicc/g' $HWRF_FOLDER/GFDL_VORTEX_TRACKER/configure.trk

	./compile 2>&1 | tee tracker.log

	# IF statement to check that all files were created.
	cd $HWRF_FOLDER/GFDL_VORTEX_TRACKER/trk_exec
	n=$(ls ./*.exe | wc -l)
	if (($n == 3)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing GFDL_VORTEX_TRACKER. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files. Exiting the script."
		read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
		exit
	fi

	################################## NCEP Coupler ##############################

	cd $HWRF_FOLDER/Downloads
	tar -xvzf HWRF_v4.0a_ncep-coupler.tar.gz -C $HWRF_FOLDER/
	cd $HWRF_FOLDER/
	mv $HWRF_FOLDER/ncep-coupler $HWRF_FOLDER/NCEP_COUPLER
	cd $HWRF_FOLDER/NCEP_COUPLER

	# Removing user input for configure.  Choosing correct option for configure with intel compilers
	sed -i '84s/<STDIN>/3/g' $HWRF_FOLDER/NCEP_COUPLER/arch/Config.pl

	./configure #option 3

	# sed commands to change to intel compiler format
	sed -i '26s/ mpif90 -fc=$(SFC)/ mpiifort/g' $HWRF_FOLDER/NCEP_COUPLER/configure.cpl
	sed -i '27s/ mpif90 -fc=$(SFC) -free/ mpiifort -free/g' $HWRF_FOLDER/NCEP_COUPLER/configure.cpl

	./compile 2>&1 | tee coupler.log

	# IF statement to check that all files were created.
	cd $HWRF_FOLDER/NCEP_COUPLER/cpl_exec
	n=$(ls ./*.exe | wc -l)
	if (($n == 1)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing NCEP_COUPLER. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files. Exiting the script."
		read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
		exit
	fi

	################################## Unified Post Processor (UPP) ##############################

	cd $HWRF_FOLDER/Downloads
	tar -xvzf HWRF_v4.0a_UPP.tar.gz -C $HWRF_FOLDER/
	cd $HWRF_FOLDER/UPP

	# these variables need to be set for the UPP install to work
	export HWRF=1
	export WRF_DIR=$HWRF_FOLDER/WRF/WRF-4.3.3
	export JASPERLIB=$DIR/grib2/lib
	export JASPERINC=$DIR/grib2/include

	# Removing user input for configure.  Choosing correct option for configure with intel compilers
	sed -i '197s/<STDIN>/4/g' $HWRF_FOLDER/UPP/arch/Config.pl

	./configure #compile opiton 4

	# sed commands to change to intel compiler format
	sed -i '26s/ mpif90 -fc=$(SFC)/ mpiifort/g' $HWRF_FOLDER/NCEP_COUPLER/configure.cpl
	sed -i '27s/ mpif90 -fc=$(SFC) -free/ mpiifort -free/g' $HWRF_FOLDER/NCEP_COUPLER/configure.cpl

	# sed commands to change to intel compiler format
	sed -i '27s/ mpif90 -f90=$(SFC)/ mpiifort/g' $HWRF_FOLDER/UPP/configure.upp
	sed -i '28s/ mpif90 -f90=$(SFC) -free/ mpiifort -free/g' $HWRF_FOLDER/UPP/configure.upp
	sed -i '29s/ mpicc/ mpiicc/g' $HWRF_FOLDER/UPP/configure.upp

	./compile 2>&1 | tee build.log

	# IF statement to check that all files were created.
	cd $HWRF_FOLDER/UPP/bin
	n=$(ls ./*.exe | wc -l)
	cd $HWRF_FOLDER/UPP/lib
	m=$(ls ./*.a | wc -l)
	if (($n == 6)) && (($m == 13)); then
		echo "All expected files created."
		read -r -t 5 -p "Finished installing UPP. I am going to wait for 5 seconds only ..."
	else
		echo "Missing one or more expected files. Exiting the script."
		read -r -p "Please contact script authors for assistance, press 'Enter' to exit script."
		exit
	fi

	############################### HWRF RUN ######################################
	# This section unpacks the runtime files for HWRF
	# The HWRF User Guide and other documentation are downloaded as well;
	# see chapter 3 of the User Guide for details on running HWRF.
	###############################################################################

	cd $HWRF_FOLDER/Downloads
	tar -xvzf HWRF_v4.0a_hwrfrun.tar.gz -C $HWRF_FOLDER/
	cd $HOME/HWRF
	mv $HWRF_FOLDER/hwrfrun $HWRF_FOLDER/HWRF_RUN
	cd $HWRF_FOLDER/HWRF_RUN

	#HWRF v4.0a Users Guide
	wget -c https://dtcenter.org/sites/default/files/community-code/hwrf/docs/users_guide/HWRF-UG-2018.pdf
	#HWRF Scientific Documentation - November 2018
	wget -c https://dtcenter.org/sites/default/files/community-code/hwrf/docs/scientific_documents/HWRFv4.0a_ScientificDoc.pdf
	#WRF-NMM V4 User's Guide
	wget -c https://dtcenter.org/sites/default/files/community-code/hwrf/docs/scientific_documents/WRF-NMM_2018.pdf

	######################## Static geographic gata incl/ optional files ####################
	# http://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	# These files are LARGE so if you only need certain ones, comment the others off with #
	# All of these files downloaded and untarred come out to roughly 250GB
	# https://www2.mmm.ucar.edu/wrf/users/download/get_sources_wps_geog.html
	#################################################################################

	cd $HWRF_FOLDER/Downloads
	mkdir $HWRF_FOLDER/GEOG
	mkdir $HWRF_FOLDER/GEOG/WPS_GEOG

	# Mandatory WRF Preprocessing System (WPS) Geographical Input Data Mandatory Fields

	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_high_res_mandatory.tar.gz
	tar -xvzf geog_high_res_mandatory.tar.gz -C $HWRF_FOLDER/GEOG/

	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_low_res_mandatory.tar.gz
	tar -xvzf geog_low_res_mandatory.tar.gz -C $HWRF_FOLDER/GEOG/
	mv $HWRF_FOLDER/GEOG/WPS_GEOG_LOW_RES/ $HWRF_FOLDER/GEOG/WPS_GEOG

	# WPS Geographical Input Data - Mandatory for Specific Applications

	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_thompson28_chem.tar.gz
	tar -xvzf geog_thompson28_chem.tar.gz -C $HWRF_FOLDER/GEOG/WPS_GEOG

	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_noahmp.tar.gz
	tar -xvzf geog_noahmp.tar.gz -C $HWRF_FOLDER/GEOG/WPS_GEOG

	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/irrigation.tar.gz
	tar -xvzf irrigation.tar.gz -C $HWRF_FOLDER/GEOG/WPS_GEOG

	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_px.tar.gz
	tar -xvzf geog_px.tar.gz -C $HWRF_FOLDER/GEOG/WPS_GEOG

	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_urban.tar.gz
	tar -xvzf geog_urban.tar.gz -C $HWRF_FOLDER/GEOG/WPS_GEOG

	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_ssib.tar.gz
	tar -xvzf geog_ssib.tar.gz -C $HWRF_FOLDER/GEOG/WPS_GEOG

	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/lake_depth.tar.bz2
	tar -xvf lake_depth.tar.bz2 -C $HWRF_FOLDER/GEOG/WPS_GEOG

	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/topobath_30s.tar.bz2
	tar -xvf topobath_30s.tar.bz2 -C $HWRF_FOLDER/GEOG/WPS_GEOG

	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/gsl_gwd.tar.bz2
	tar -xvf gsl_gwd.tar.bz2 -C $HWRF_FOLDER/GEOG/WPS_GEOG

	# Optional WPS Geographical Input Data

	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_older_than_2000.tar.gz
	tar -xvzf geog_older_than_2000.tar.gz -C $HWRF_FOLDER/GEOG/WPS_GEOG

	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s_with_lakes.tar.gz
	tar -xvzf modis_landuse_20class_15s_with_lakes.tar.gz -C $HWRF_FOLDER/GEOG/WPS_GEOG

	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_alt_lsm.tar.gz
	tar -xvzf geog_alt_lsm.tar.gz -C $HWRF_FOLDER/GEOG/WPS_GEOG

	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/nlcd2006_ll_9s.tar.bz2
	tar -xvf nlcd2006_ll_9s.tar.bz2 -C $HWRF_FOLDER/GEOG/WPS_GEOG

	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/updated_Iceland_LU.tar.gz
	tar -xvf updated_Iceland_LU.tar.gz -C $HWRF_FOLDER/GEOG/WPS_GEOG

	wget -c https://www2.mmm.ucar.edu/wrf/src/wps_files/modis_landuse_20class_15s.tar.bz2
	tar -xvf modis_landuse_20class_15s.tar.bz2 -C $HWRF_FOLDER/GEOG/WPS_GEOG

	echo "Congratulations! You've successfully installed all required files to run the Hurricane Weather Research Forecast (HWRF) Model verison 4.0a utilizing the intel compilers."
	echo "Thank you for using this script."
fi

##########################  Export PATH and LD_LIBRARY_PATH ################################
cd $HOME

#####################################BASH Script Finished##############################

end=$(date)
END=$(date +"%s")
DIFF=$(($END - $START))
echo "Install Start Time: ${start}"
echo "Install End Time: ${end}"
echo "Install Duration: $(($DIFF / 3600)) hours $((($DIFF % 3600) / 60)) minutes $(($DIFF % 60)) seconds"
